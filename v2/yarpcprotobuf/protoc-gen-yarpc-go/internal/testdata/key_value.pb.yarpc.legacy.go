// Code generated by protoc-gen-yarpc-go
// source: key_value.proto
// DO NOT EDIT!

package keyvalue

import (
	"context"
	"io/ioutil"
	"reflect"

	"github.com/gogo/protobuf/proto"
	"go.uber.org/fx"
	"go.uber.org/yarpc"
	"go.uber.org/yarpc/api/transport"
	"go.uber.org/yarpc/encoding/protobuf"
)

var _ = ioutil.NopCloser

// KeyValueYARPCClient is the YARPC client-side interface for the KeyValue service.
type KeyValueYARPCClient interface {
	Foo(context.Context, *GetRequest, ...yarpc.CallOption) (*GetResponse, error)
	Bar(context.Context, ...yarpc.CallOption) (KeyValueServiceBarYARPCClient, error)
	Baz(context.Context, *GetRequest, ...yarpc.CallOption) (KeyValueServiceBazYARPCClient, error)
	Qux(context.Context, ...yarpc.CallOption) (KeyValueServiceQuxYARPCClient, error)
}

// KeyValueServiceBarYARPCClient sends GetRequests and receives the single GetResponse when sending is done.
type KeyValueServiceBarYARPCClient interface {
	Context() context.Context
	Send(*GetRequest, ...yarpc.StreamOption) error
	CloseAndRecv(...yarpc.StreamOption) (*GetResponse, error)
}

// KeyValueServiceBazYARPCClient receives GetResponses, returning io.EOF when the stream is complete.
type KeyValueServiceBazYARPCClient interface {
	Context() context.Context
	Recv(...yarpc.StreamOption) (*GetResponse, error)
	CloseSend(...yarpc.StreamOption) error
}

// KeyValueServiceQuxYARPCClient sends GetRequests and receives GetResponses, returning io.EOF when the stream is complete.
type KeyValueServiceQuxYARPCClient interface {
	Context() context.Context
	Send(*GetRequest, ...yarpc.StreamOption) error
	Recv(...yarpc.StreamOption) (*GetResponse, error)
	CloseSend(...yarpc.StreamOption) error
}

// NewKeyValueYARPCClient builds a new YARPC client for the KeyValue service.
func NewKeyValueYARPCClient(clientConfig transport.ClientConfig, options ...protobuf.ClientOption) KeyValueYARPCClient {
	return &_KeyValueYARPCCaller{protobuf.NewStreamClient(
		protobuf.ClientParams{
			ServiceName:  "keyvalue.KeyValue",
			ClientConfig: clientConfig,
			Options:      options,
		},
	)}
}

// KeyValueYARPCServer is the YARPC server-side interface for the KeyValue service.
type KeyValueYARPCServer interface {
	Foo(context.Context, *GetRequest) (*GetResponse, error)
	Bar(KeyValueServiceBarYARPCServer) (*GetResponse, error)
	Baz(*GetRequest, KeyValueServiceBazYARPCServer) error
	Qux(KeyValueServiceQuxYARPCServer) error
}

// KeyValueServiceBarYARPCServer receives GetRequests.
type KeyValueServiceBarYARPCServer interface {
	Context() context.Context
	Recv(...yarpc.StreamOption) (*GetRequest, error)
}

// KeyValueServiceBazYARPCServer sends GetResponses.
type KeyValueServiceBazYARPCServer interface {
	Context() context.Context
	Send(*GetResponse, ...yarpc.StreamOption) error
}

// KeyValueServiceQuxYARPCServer receives GetRequests and sends GetResponse.
type KeyValueServiceQuxYARPCServer interface {
	Context() context.Context
	Recv(...yarpc.StreamOption) (*GetRequest, error)
	Send(*GetResponse, ...yarpc.StreamOption) error
}

// BuildKeyValueYARPCProcedures prepares an implementation of the KeyValue service for YARPC registration.
func BuildKeyValueYARPCProcedures(server KeyValueYARPCServer) []transport.Procedure {
	handler := &_KeyValueYARPCHandler{server}
	return protobuf.BuildProcedures(
		protobuf.BuildProceduresParams{
			ServiceName: "keyvalue.KeyValue",
			UnaryHandlerParams: []protobuf.BuildProceduresUnaryHandlerParams{
				{
					MethodName: "Foo",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:     handler.Foo,
							NewRequest: newKeyValueServiceFooYARPCRequest,
						},
					),
				},
			},
			OnewayHandlerParams: []protobuf.BuildProceduresOnewayHandlerParams{},
			StreamHandlerParams: []protobuf.BuildProceduresStreamHandlerParams{
				{
					MethodName: "Qux",
					Handler: protobuf.NewStreamHandler(
						protobuf.StreamHandlerParams{
							Handle: handler.Qux,
						},
					),
				},

				{
					MethodName: "Baz",
					Handler: protobuf.NewStreamHandler(
						protobuf.StreamHandlerParams{
							Handle: handler.Baz,
						},
					),
				},

				{
					MethodName: "Bar",
					Handler: protobuf.NewStreamHandler(
						protobuf.StreamHandlerParams{
							Handle: handler.Bar,
						},
					),
				},
			},
		},
	)
}

// FxKeyValueYARPCClientParams defines the input
// for NewFxKeyValueYARPCClient. It provides the
// paramaters to get a KeyValueYARPCClient in an
// Fx application.
type FxKeyValueYARPCClientParams struct {
	fx.In

	Provider yarpc.ClientConfig
}

// FxKeyValueYARPCClientResult defines the output
// of NewFxKeyValueYARPCClient. It provides a
// KeyValueYARPCClient to an Fx application.
type FxKeyValueYARPCClientResult struct {
	fx.Out

	Client KeyValueYARPCClient

	// We are using an fx.Out struct here instead of just returning a client
	// so that we can add more values or add named versions of the client in
	// the future without breaking any existing code.
}

// NewFxKeyValueYARPCClient provides a KeyValueYARPCClient
// to an Fx application using the given name for routing.
//
//  fx.Provide(
//    keyvalue.NewFxKeyValueYARPCClient("service-name"),
//    ...
//  )
func NewFxKeyValueYARPCClient(name string, options ...protobuf.ClientOption) interface{} {
	return func(params FxKeyValueYARPCClientParams) FxKeyValueYARPCClientResult {
		return FxKeyValueYARPCClientResult{
			Client: NewKeyValueYARPCClient(params.Provider.ClientConfig(name), options...),
		}
	}
}

// FxKeyValueYARPCProceduresParams defines the input
// for NewFxKeyValueYARPCProcedures. It provides the
// paramaters to get KeyValueYARPCServer procedures in an
// Fx application.
type FxKeyValueYARPCProceduresParams struct {
	fx.In

	Server KeyValueYARPCServer
}

// FxKeyValueYARPCProceduresResult defines the output
// of NewFxKeyValueYARPCProcedures. It provides
// KeyValueYARPCServer procedures to an Fx application.
//
// The procedures are provided to the "yarpcfx" value group.
// Dig 1.2 or newer must be used for this feature to work.
type FxKeyValueYARPCProceduresResult struct {
	fx.Out

	Procedures []transport.Procedure `group:"yarpcfx"`
}

// NewFxKeyValueYARPCProcedures provides KeyValueYARPCServer procedures to an Fx application.
// It expects a KeyValueYARPCServer to be present in the container.
//
//  fx.Provide(
//    keyvalue.NewFxKeyValueYARPCProcedures(),
//    ...
//  )
func NewFxKeyValueYARPCProcedures() interface{} {
	return func(params FxKeyValueYARPCProceduresParams) FxKeyValueYARPCProceduresResult {
		return FxKeyValueYARPCProceduresResult{
			Procedures: BuildKeyValueYARPCProcedures(params.Server),
		}
	}
}

type _KeyValueYARPCCaller struct {
	streamClient protobuf.StreamClient
}

func (c *_KeyValueYARPCCaller) Foo(ctx context.Context, request *GetRequest, options ...yarpc.CallOption) (*GetResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "Foo", request, newKeyValueServiceFooYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*GetResponse)
	if !ok {
		return nil, protobuf.CastError(emptyKeyValueServiceFooYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_KeyValueYARPCCaller) Bar(ctx context.Context, options ...yarpc.CallOption) (KeyValueServiceBarYARPCClient, error) {
	stream, err := c.streamClient.CallStream(ctx, "Bar", options...)
	if err != nil {
		return nil, err
	}
	return &_KeyValueServiceBarYARPCClient{stream: stream}, nil
}

func (c *_KeyValueYARPCCaller) Baz(ctx context.Context, request *GetRequest, options ...yarpc.CallOption) (KeyValueServiceBazYARPCClient, error) {
	stream, err := c.streamClient.CallStream(ctx, "Baz", options...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(request); err != nil {
		return nil, err
	}
	return &_KeyValueServiceBazYARPCClient{stream: stream}, nil
}

func (c *_KeyValueYARPCCaller) Qux(ctx context.Context, options ...yarpc.CallOption) (KeyValueServiceQuxYARPCClient, error) {
	stream, err := c.streamClient.CallStream(ctx, "Qux", options...)
	if err != nil {
		return nil, err
	}
	return &_KeyValueServiceQuxYARPCClient{stream: stream}, nil
}

type _KeyValueYARPCHandler struct {
	server KeyValueYARPCServer
}

func (h *_KeyValueYARPCHandler) Foo(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *GetRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*GetRequest)
		if !ok {
			return nil, protobuf.CastError(emptyKeyValueServiceFooYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.Foo(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_KeyValueYARPCHandler) Bar(serverStream *protobuf.ServerStream) error {
	response, err := h.server.Bar(&_KeyValueServiceBarYARPCServer{serverStream: serverStream})
	if err != nil {
		return err
	}
	return serverStream.Send(response)
}

func (h *_KeyValueYARPCHandler) Baz(serverStream *protobuf.ServerStream) error {
	requestMessage, err := serverStream.Receive(newKeyValueServiceBazYARPCRequest)
	if requestMessage == nil {
		return err
	}

	request, ok := requestMessage.(*GetRequest)
	if !ok {
		return protobuf.CastError(emptyKeyValueServiceBazYARPCRequest, requestMessage)
	}
	return h.server.Baz(request, &_KeyValueServiceBazYARPCServer{serverStream: serverStream})
}

func (h *_KeyValueYARPCHandler) Qux(serverStream *protobuf.ServerStream) error {
	return h.server.Qux(&_KeyValueServiceQuxYARPCServer{serverStream: serverStream})
}

type _KeyValueServiceBarYARPCClient struct {
	stream *protobuf.ClientStream
}

func (c *_KeyValueServiceBarYARPCClient) Context() context.Context {
	return c.stream.Context()
}

func (c *_KeyValueServiceBarYARPCClient) Send(request *GetRequest, options ...yarpc.StreamOption) error {
	return c.stream.Send(request, options...)
}

func (c *_KeyValueServiceBarYARPCClient) CloseAndRecv(options ...yarpc.StreamOption) (*GetResponse, error) {
	if err := c.stream.Close(options...); err != nil {
		return nil, err
	}
	responseMessage, err := c.stream.Receive(newKeyValueServiceBarYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*GetResponse)
	if !ok {
		return nil, protobuf.CastError(emptyKeyValueServiceBarYARPCResponse, responseMessage)
	}
	return response, err
}

type _KeyValueServiceBazYARPCClient struct {
	stream *protobuf.ClientStream
}

func (c *_KeyValueServiceBazYARPCClient) Context() context.Context {
	return c.stream.Context()
}

func (c *_KeyValueServiceBazYARPCClient) Recv(options ...yarpc.StreamOption) (*GetResponse, error) {
	responseMessage, err := c.stream.Receive(newKeyValueServiceBazYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*GetResponse)
	if !ok {
		return nil, protobuf.CastError(emptyKeyValueServiceBazYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_KeyValueServiceBazYARPCClient) CloseSend(options ...yarpc.StreamOption) error {
	return c.stream.Close(options...)
}

type _KeyValueServiceQuxYARPCClient struct {
	stream *protobuf.ClientStream
}

func (c *_KeyValueServiceQuxYARPCClient) Context() context.Context {
	return c.stream.Context()
}

func (c *_KeyValueServiceQuxYARPCClient) Send(request *GetRequest, options ...yarpc.StreamOption) error {
	return c.stream.Send(request, options...)
}

func (c *_KeyValueServiceQuxYARPCClient) Recv(options ...yarpc.StreamOption) (*GetResponse, error) {
	responseMessage, err := c.stream.Receive(newKeyValueServiceQuxYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*GetResponse)
	if !ok {
		return nil, protobuf.CastError(emptyKeyValueServiceQuxYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_KeyValueServiceQuxYARPCClient) CloseSend(options ...yarpc.StreamOption) error {
	return c.stream.Close(options...)
}

type _KeyValueServiceBarYARPCServer struct {
	serverStream *protobuf.ServerStream
}

func (s *_KeyValueServiceBarYARPCServer) Context() context.Context {
	return s.serverStream.Context()
}

func (s *_KeyValueServiceBarYARPCServer) Recv(options ...yarpc.StreamOption) (*GetRequest, error) {
	requestMessage, err := s.serverStream.Receive(newKeyValueServiceBarYARPCRequest, options...)
	if requestMessage == nil {
		return nil, err
	}
	request, ok := requestMessage.(*GetRequest)
	if !ok {
		return nil, protobuf.CastError(emptyKeyValueServiceBarYARPCRequest, requestMessage)
	}
	return request, err
}

type _KeyValueServiceBazYARPCServer struct {
	serverStream *protobuf.ServerStream
}

func (s *_KeyValueServiceBazYARPCServer) Context() context.Context {
	return s.serverStream.Context()
}

func (s *_KeyValueServiceBazYARPCServer) Send(response *GetResponse, options ...yarpc.StreamOption) error {
	return s.serverStream.Send(response, options...)
}

type _KeyValueServiceQuxYARPCServer struct {
	serverStream *protobuf.ServerStream
}

func (s *_KeyValueServiceQuxYARPCServer) Context() context.Context {
	return s.serverStream.Context()
}

func (s *_KeyValueServiceQuxYARPCServer) Recv(options ...yarpc.StreamOption) (*GetRequest, error) {
	requestMessage, err := s.serverStream.Receive(newKeyValueServiceQuxYARPCRequest, options...)
	if requestMessage == nil {
		return nil, err
	}
	request, ok := requestMessage.(*GetRequest)
	if !ok {
		return nil, protobuf.CastError(emptyKeyValueServiceQuxYARPCRequest, requestMessage)
	}
	return request, err
}

func (s *_KeyValueServiceQuxYARPCServer) Send(response *GetResponse, options ...yarpc.StreamOption) error {
	return s.serverStream.Send(response, options...)
}

func newKeyValueServiceFooYARPCRequest() proto.Message {
	return &GetRequest{}
}

func newKeyValueServiceFooYARPCResponse() proto.Message {
	return &GetResponse{}
}

func newKeyValueServiceBarYARPCRequest() proto.Message {
	return &GetRequest{}
}

func newKeyValueServiceBarYARPCResponse() proto.Message {
	return &GetResponse{}
}

func newKeyValueServiceBazYARPCRequest() proto.Message {
	return &GetRequest{}
}

func newKeyValueServiceBazYARPCResponse() proto.Message {
	return &GetResponse{}
}

func newKeyValueServiceQuxYARPCRequest() proto.Message {
	return &GetRequest{}
}

func newKeyValueServiceQuxYARPCResponse() proto.Message {
	return &GetResponse{}
}

var (
	emptyKeyValueServiceFooYARPCRequest  = &GetRequest{}
	emptyKeyValueServiceFooYARPCResponse = &GetResponse{}
	emptyKeyValueServiceBarYARPCRequest  = &GetRequest{}
	emptyKeyValueServiceBarYARPCResponse = &GetResponse{}
	emptyKeyValueServiceBazYARPCRequest  = &GetRequest{}
	emptyKeyValueServiceBazYARPCResponse = &GetResponse{}
	emptyKeyValueServiceQuxYARPCRequest  = &GetRequest{}
	emptyKeyValueServiceQuxYARPCResponse = &GetResponse{}
)

func init() {
	yarpc.RegisterClientBuilder(
		func(clientConfig transport.ClientConfig, structField reflect.StructField) KeyValueYARPCClient {
			return NewKeyValueYARPCClient(clientConfig, protobuf.ClientBuilderOptions(clientConfig, structField)...)
		},
	)
}
