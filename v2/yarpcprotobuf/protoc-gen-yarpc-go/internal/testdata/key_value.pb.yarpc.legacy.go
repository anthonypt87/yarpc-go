// Code generated by protoc-gen-yarpc-go
// source: key_value.proto
// DO NOT EDIT!

package keyvalue

import (
	"context"
	"io/ioutil"
	"reflect"

	"github.com/gogo/protobuf/proto"
	"go.uber.org/fx"
	"go.uber.org/yarpc"
	"go.uber.org/yarpc/api/transport"
	"go.uber.org/yarpc/encoding/protobuf"
)

var _ = ioutil.NopCloser

// KeyValueYARPCClient is the YARPC client-side interface for the KeyValue service.
type KeyValueYARPCClient interface {
	ClientStream(context.Context, ...yarpc.CallOption) (KeyValueServiceClientStreamYARPCClient, error)
	ServerStream(context.Context, *GetRequest, ...yarpc.CallOption) (KeyValueServiceServerStreamYARPCClient, error)
	BidirectionalStream(context.Context, ...yarpc.CallOption) (KeyValueServiceBidirectionalStreamYARPCClient, error)
}

// KeyValueServiceClientStreamYARPCClient sends GetRequests and receives the single GetResponse when sending is done.
type KeyValueServiceClientStreamYARPCClient interface {
	Context() context.Context
	Send(*GetRequest, ...yarpc.StreamOption) error
	CloseAndRecv(...yarpc.StreamOption) (*GetResponse, error)
}

// KeyValueServiceServerStreamYARPCClient receives GetResponses, returning io.EOF when the stream is complete.
type KeyValueServiceServerStreamYARPCClient interface {
	Context() context.Context
	Recv(...yarpc.StreamOption) (*GetResponse, error)
	CloseSend(...yarpc.StreamOption) error
}

// KeyValueServiceBidirectionalStreamYARPCClient sends GetRequests and receives GetResponses, returning io.EOF when the stream is complete.
type KeyValueServiceBidirectionalStreamYARPCClient interface {
	Context() context.Context
	Send(*GetRequest, ...yarpc.StreamOption) error
	Recv(...yarpc.StreamOption) (*GetResponse, error)
	CloseSend(...yarpc.StreamOption) error
}

// NewKeyValueYARPCClient builds a new YARPC client for the KeyValue service.
func NewKeyValueYARPCClient(clientConfig transport.ClientConfig, options ...protobuf.ClientOption) KeyValueYARPCClient {
	return &_KeyValueYARPCCaller{protobuf.NewStreamClient(
		protobuf.ClientParams{
			ServiceName:  "keyvalue.KeyValue",
			ClientConfig: clientConfig,
			Options:      options,
		},
	)}
}

// KeyValueYARPCServer is the YARPC server-side interface for the KeyValue service.
type KeyValueYARPCServer interface {
	ClientStream(KeyValueServiceClientStreamYARPCServer) (*GetResponse, error)
	ServerStream(*GetRequest, KeyValueServiceServerStreamYARPCServer) error
	BidirectionalStream(KeyValueServiceBidirectionalStreamYARPCServer) error
}

// KeyValueServiceClientStreamYARPCServer receives GetRequests.
type KeyValueServiceClientStreamYARPCServer interface {
	Context() context.Context
	Recv(...yarpc.StreamOption) (*GetRequest, error)
}

// KeyValueServiceServerStreamYARPCServer sends GetResponses.
type KeyValueServiceServerStreamYARPCServer interface {
	Context() context.Context
	Send(*GetResponse, ...yarpc.StreamOption) error
}

// KeyValueServiceBidirectionalStreamYARPCServer receives GetRequests and sends GetResponse.
type KeyValueServiceBidirectionalStreamYARPCServer interface {
	Context() context.Context
	Recv(...yarpc.StreamOption) (*GetRequest, error)
	Send(*GetResponse, ...yarpc.StreamOption) error
}

// BuildKeyValueYARPCProcedures prepares an implementation of the KeyValue service for YARPC registration.
func BuildKeyValueYARPCProcedures(server KeyValueYARPCServer) []transport.Procedure {
	handler := &_KeyValueYARPCHandler{server}
	return protobuf.BuildProcedures(
		protobuf.BuildProceduresParams{
			ServiceName:         "keyvalue.KeyValue",
			UnaryHandlerParams:  []protobuf.BuildProceduresUnaryHandlerParams{},
			OnewayHandlerParams: []protobuf.BuildProceduresOnewayHandlerParams{},
			StreamHandlerParams: []protobuf.BuildProceduresStreamHandlerParams{
				{
					MethodName: "BidirectionalStream",
					Handler: protobuf.NewStreamHandler(
						protobuf.StreamHandlerParams{
							Handle: handler.BidirectionalStream,
						},
					),
				},

				{
					MethodName: "ServerStream",
					Handler: protobuf.NewStreamHandler(
						protobuf.StreamHandlerParams{
							Handle: handler.ServerStream,
						},
					),
				},

				{
					MethodName: "ClientStream",
					Handler: protobuf.NewStreamHandler(
						protobuf.StreamHandlerParams{
							Handle: handler.ClientStream,
						},
					),
				},
			},
		},
	)
}

// FxKeyValueYARPCClientParams defines the input
// for NewFxKeyValueYARPCClient. It provides the
// paramaters to get a KeyValueYARPCClient in an
// Fx application.
type FxKeyValueYARPCClientParams struct {
	fx.In

	Provider yarpc.ClientConfig
}

// FxKeyValueYARPCClientResult defines the output
// of NewFxKeyValueYARPCClient. It provides a
// KeyValueYARPCClient to an Fx application.
type FxKeyValueYARPCClientResult struct {
	fx.Out

	Client KeyValueYARPCClient

	// We are using an fx.Out struct here instead of just returning a client
	// so that we can add more values or add named versions of the client in
	// the future without breaking any existing code.
}

// NewFxKeyValueYARPCClient provides a KeyValueYARPCClient
// to an Fx application using the given name for routing.
//
//  fx.Provide(
//    keyvalue.NewFxKeyValueYARPCClient("service-name"),
//    ...
//  )
func NewFxKeyValueYARPCClient(name string, options ...protobuf.ClientOption) interface{} {
	return func(params FxKeyValueYARPCClientParams) FxKeyValueYARPCClientResult {
		return FxKeyValueYARPCClientResult{
			Client: NewKeyValueYARPCClient(params.Provider.ClientConfig(name), options...),
		}
	}
}

// FxKeyValueYARPCProceduresParams defines the input
// for NewFxKeyValueYARPCProcedures. It provides the
// paramaters to get KeyValueYARPCServer procedures in an
// Fx application.
type FxKeyValueYARPCProceduresParams struct {
	fx.In

	Server KeyValueYARPCServer
}

// FxKeyValueYARPCProceduresResult defines the output
// of NewFxKeyValueYARPCProcedures. It provides
// KeyValueYARPCServer procedures to an Fx application.
//
// The procedures are provided to the "yarpcfx" value group.
// Dig 1.2 or newer must be used for this feature to work.
type FxKeyValueYARPCProceduresResult struct {
	fx.Out

	Procedures []transport.Procedure `group:"yarpcfx"`
}

// NewFxKeyValueYARPCProcedures provides KeyValueYARPCServer procedures to an Fx application.
// It expects a KeyValueYARPCServer to be present in the container.
//
//  fx.Provide(
//    keyvalue.NewFxKeyValueYARPCProcedures(),
//    ...
//  )
func NewFxKeyValueYARPCProcedures() interface{} {
	return func(params FxKeyValueYARPCProceduresParams) FxKeyValueYARPCProceduresResult {
		return FxKeyValueYARPCProceduresResult{
			Procedures: BuildKeyValueYARPCProcedures(params.Server),
		}
	}
}

type _KeyValueYARPCCaller struct {
	streamClient protobuf.StreamClient
}

func (c *_KeyValueYARPCCaller) ClientStream(ctx context.Context, options ...yarpc.CallOption) (KeyValueServiceClientStreamYARPCClient, error) {
	stream, err := c.streamClient.CallStream(ctx, "ClientStream", options...)
	if err != nil {
		return nil, err
	}
	return &_KeyValueServiceClientStreamYARPCClient{stream: stream}, nil
}

func (c *_KeyValueYARPCCaller) ServerStream(ctx context.Context, request *GetRequest, options ...yarpc.CallOption) (KeyValueServiceServerStreamYARPCClient, error) {
	stream, err := c.streamClient.CallStream(ctx, "ServerStream", options...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(request); err != nil {
		return nil, err
	}
	return &_KeyValueServiceServerStreamYARPCClient{stream: stream}, nil
}

func (c *_KeyValueYARPCCaller) BidirectionalStream(ctx context.Context, options ...yarpc.CallOption) (KeyValueServiceBidirectionalStreamYARPCClient, error) {
	stream, err := c.streamClient.CallStream(ctx, "BidirectionalStream", options...)
	if err != nil {
		return nil, err
	}
	return &_KeyValueServiceBidirectionalStreamYARPCClient{stream: stream}, nil
}

type _KeyValueYARPCHandler struct {
	server KeyValueYARPCServer
}

func (h *_KeyValueYARPCHandler) ClientStream(serverStream *protobuf.ServerStream) error {
	response, err := h.server.ClientStream(&_KeyValueServiceClientStreamYARPCServer{serverStream: serverStream})
	if err != nil {
		return err
	}
	return serverStream.Send(response)
}

func (h *_KeyValueYARPCHandler) ServerStream(serverStream *protobuf.ServerStream) error {
	requestMessage, err := serverStream.Receive(newKeyValueServiceServerStreamYARPCRequest)
	if requestMessage == nil {
		return err
	}

	request, ok := requestMessage.(*GetRequest)
	if !ok {
		return protobuf.CastError(emptyKeyValueServiceServerStreamYARPCRequest, requestMessage)
	}
	return h.server.ServerStream(request, &_KeyValueServiceServerStreamYARPCServer{serverStream: serverStream})
}

func (h *_KeyValueYARPCHandler) BidirectionalStream(serverStream *protobuf.ServerStream) error {
	return h.server.BidirectionalStream(&_KeyValueServiceBidirectionalStreamYARPCServer{serverStream: serverStream})
}

type _KeyValueServiceClientStreamYARPCClient struct {
	stream *protobuf.ClientStream
}

func (c *_KeyValueServiceClientStreamYARPCClient) Context() context.Context {
	return c.stream.Context()
}

func (c *_KeyValueServiceClientStreamYARPCClient) Send(request *GetRequest, options ...yarpc.StreamOption) error {
	return c.stream.Send(request, options...)
}

func (c *_KeyValueServiceClientStreamYARPCClient) CloseAndRecv(options ...yarpc.StreamOption) (*GetResponse, error) {
	if err := c.stream.Close(options...); err != nil {
		return nil, err
	}
	responseMessage, err := c.stream.Receive(newKeyValueServiceClientStreamYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*GetResponse)
	if !ok {
		return nil, protobuf.CastError(emptyKeyValueServiceClientStreamYARPCResponse, responseMessage)
	}
	return response, err
}

type _KeyValueServiceServerStreamYARPCClient struct {
	stream *protobuf.ClientStream
}

func (c *_KeyValueServiceServerStreamYARPCClient) Context() context.Context {
	return c.stream.Context()
}

func (c *_KeyValueServiceServerStreamYARPCClient) Recv(options ...yarpc.StreamOption) (*GetResponse, error) {
	responseMessage, err := c.stream.Receive(newKeyValueServiceServerStreamYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*GetResponse)
	if !ok {
		return nil, protobuf.CastError(emptyKeyValueServiceServerStreamYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_KeyValueServiceServerStreamYARPCClient) CloseSend(options ...yarpc.StreamOption) error {
	return c.stream.Close(options...)
}

type _KeyValueServiceBidirectionalStreamYARPCClient struct {
	stream *protobuf.ClientStream
}

func (c *_KeyValueServiceBidirectionalStreamYARPCClient) Context() context.Context {
	return c.stream.Context()
}

func (c *_KeyValueServiceBidirectionalStreamYARPCClient) Send(request *GetRequest, options ...yarpc.StreamOption) error {
	return c.stream.Send(request, options...)
}

func (c *_KeyValueServiceBidirectionalStreamYARPCClient) Recv(options ...yarpc.StreamOption) (*GetResponse, error) {
	responseMessage, err := c.stream.Receive(newKeyValueServiceBidirectionalStreamYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*GetResponse)
	if !ok {
		return nil, protobuf.CastError(emptyKeyValueServiceBidirectionalStreamYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_KeyValueServiceBidirectionalStreamYARPCClient) CloseSend(options ...yarpc.StreamOption) error {
	return c.stream.Close(options...)
}

type _KeyValueServiceClientStreamYARPCServer struct {
	serverStream *protobuf.ServerStream
}

func (s *_KeyValueServiceClientStreamYARPCServer) Context() context.Context {
	return s.serverStream.Context()
}

func (s *_KeyValueServiceClientStreamYARPCServer) Recv(options ...yarpc.StreamOption) (*GetRequest, error) {
	requestMessage, err := s.serverStream.Receive(newKeyValueServiceClientStreamYARPCRequest, options...)
	if requestMessage == nil {
		return nil, err
	}
	request, ok := requestMessage.(*GetRequest)
	if !ok {
		return nil, protobuf.CastError(emptyKeyValueServiceClientStreamYARPCRequest, requestMessage)
	}
	return request, err
}

type _KeyValueServiceServerStreamYARPCServer struct {
	serverStream *protobuf.ServerStream
}

func (s *_KeyValueServiceServerStreamYARPCServer) Context() context.Context {
	return s.serverStream.Context()
}

func (s *_KeyValueServiceServerStreamYARPCServer) Send(response *GetResponse, options ...yarpc.StreamOption) error {
	return s.serverStream.Send(response, options...)
}

type _KeyValueServiceBidirectionalStreamYARPCServer struct {
	serverStream *protobuf.ServerStream
}

func (s *_KeyValueServiceBidirectionalStreamYARPCServer) Context() context.Context {
	return s.serverStream.Context()
}

func (s *_KeyValueServiceBidirectionalStreamYARPCServer) Recv(options ...yarpc.StreamOption) (*GetRequest, error) {
	requestMessage, err := s.serverStream.Receive(newKeyValueServiceBidirectionalStreamYARPCRequest, options...)
	if requestMessage == nil {
		return nil, err
	}
	request, ok := requestMessage.(*GetRequest)
	if !ok {
		return nil, protobuf.CastError(emptyKeyValueServiceBidirectionalStreamYARPCRequest, requestMessage)
	}
	return request, err
}

func (s *_KeyValueServiceBidirectionalStreamYARPCServer) Send(response *GetResponse, options ...yarpc.StreamOption) error {
	return s.serverStream.Send(response, options...)
}

func newKeyValueServiceClientStreamYARPCRequest() proto.Message {
	return &GetRequest{}
}

func newKeyValueServiceClientStreamYARPCResponse() proto.Message {
	return &GetResponse{}
}

func newKeyValueServiceServerStreamYARPCRequest() proto.Message {
	return &GetRequest{}
}

func newKeyValueServiceServerStreamYARPCResponse() proto.Message {
	return &GetResponse{}
}

func newKeyValueServiceBidirectionalStreamYARPCRequest() proto.Message {
	return &GetRequest{}
}

func newKeyValueServiceBidirectionalStreamYARPCResponse() proto.Message {
	return &GetResponse{}
}

var (
	emptyKeyValueServiceClientStreamYARPCRequest         = &GetRequest{}
	emptyKeyValueServiceClientStreamYARPCResponse        = &GetResponse{}
	emptyKeyValueServiceServerStreamYARPCRequest         = &GetRequest{}
	emptyKeyValueServiceServerStreamYARPCResponse        = &GetResponse{}
	emptyKeyValueServiceBidirectionalStreamYARPCRequest  = &GetRequest{}
	emptyKeyValueServiceBidirectionalStreamYARPCResponse = &GetResponse{}
)

func init() {
	yarpc.RegisterClientBuilder(
		func(clientConfig transport.ClientConfig, structField reflect.StructField) KeyValueYARPCClient {
			return NewKeyValueYARPCClient(clientConfig, protobuf.ClientBuilderOptions(clientConfig, structField)...)
		},
	)
}
