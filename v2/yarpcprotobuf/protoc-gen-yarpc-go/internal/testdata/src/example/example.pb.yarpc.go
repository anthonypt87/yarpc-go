// Code generated by protoc-gen-yarpc-go
// source: src/example/example.proto
// DO NOT EDIT!

package examplepb

import (
	context "context"
	proto "github.com/gogo/protobuf/proto"
	fx "go.uber.org/fx"
	yarpc "go.uber.org/yarpc/v2"
	yarpcprotobuf "go.uber.org/yarpc/v2/yarpcprotobuf"
	example "src/example"
	keyvalue "src/keyvalue"
)

// ExampleClient is the Example service's client interface.
type ExampleClient interface {
	Get(
		context.Context,
		*keyvalue.GetRequest,
		...yarpc.CallOption,
	) (*keyvalue.GetResponse, error)
}

// NewExampleClient builds a new YARPC client for the Example service.
func NewExampleClient(c yarpc.Client, opts ...yarpcprotobuf.ClientOption) ExampleClient {
	return &_ExampleClient{stream: yarpcprotobuf.NewStreamClient(c, "example.Example", opts...)}
}

type _ExampleClient struct {
	stream yarpcprotobuf.StreamClient
}

var _ ExampleClient = (*_ExampleClient)(nil)

func (c *_ExampleClient) Get(ctx context.Context, req *keyvalue.GetRequest, opts ...yarpc.CallOption) (*keyvalue.GetResponse, error) {
	msg, err := c.stream.Call(ctx, "Get", req, newExampleGetResponse, opts...)
	if err != nil {
		return nil, err
	}
	res, ok := msg.(*keyvalue.GetResponse)
	if !ok {
		return nil, yarpcprotobuf.CastError(_emptyExampleGetResponse, res)
	}
	return res, nil
}

// ExampleServer is the Example service's server interface.
type ExampleServer interface {
	Get(
		context.Context,
		*keyvalue.GetRequest,
	) (*keyvalue.GetResponse, error)
}

// BuildExampleProcedures constructs the YARPC procedures for the Example service.
func BuildExampleProcedures(s ExampleServer) []yarpc.Procedure {
	h := &_ExampleServer{server: s}
	return yarpcprotobuf.Procedures(
		yarpcprotobuf.ProceduresParams{
			Service: "example.Example",
			Unary: []yarpcprotobuf.UnaryProceduresParams{
				{
					MethodName: "Get",
					Handler: yarpcprotobuf.NewUnaryHandler{
						yarpcprotobuf.UnaryHandlerParams{
							Handle: h.Get,
							Create: newExampleGetRequest(),
						},
					},
				},
			},
			Stream: []yarpcprotobuf.StreamProceduresParams{},
		},
	)
}

type _ExampleServer struct {
	server ExampleServer
}

var _ ExampleServer = (*_ExampleServer)(nil)

func (h *_ExampleServer) Get(ctx context.Context, m proto.Message) (proto.Message, error) {
	req, _ := m.(*keyvalue.GetRequest)
	if req == nil {
		return nil, yarpcprotobuf.CastError(_emptyExampleGetRequest, m)
	}
	return h.server.Get(ctx, req)
}

// FxExampleClientParams defines the parameters
// required to provide a ExampleClient into an
// Fx application.
type FxExampleClientParams struct {
	fx.In

	Client yarpc.Client
}

// FxExampleClientResult provides a ExampleClient
// into an Fx application.
type FxExampleClientResult struct {
	fx.Out

	Client ExampleClient
}

// NewFxExampleClient provides a ExampleClient
// into an Fx application, using the given
// name for routing.
//
//  fx.Provide(
//    examplepb.NewFxExampleClient("service-name"),
//    ...
//  )
// TODO(mensch): How will this work in v2?
func NewFxExampleClient(_ string, opts ...yarpcprotobuf.ClientOption) interface{} {
	return func(p FxExampleClientParams) FxExampleClientResult {
		return FxExampleClientResult{
			Client: NewFxExampleClient(p.Client, opts...),
		}
	}
}

// FxExampleServerParams defines the paramaters
// required to provide the ExampleServer procedures
// into an Fx application.
type FxExampleServerParams struct {
	fx.In

	Server ExampleServer
}

// FxExampleServerResult provides the ExampleServer
// procedures into an Fx application.
type FxExampleServerResult struct {
	fx.Out

	Procedures []yarpc.Procedure `group:"yarpcfx"`
}

// NewFxExampleServer provides the ExampleServer
// procedures to an Fx application. It expects
// a ExampleServer to be present in the container.
//
//  fx.Provide(
//    examplepb.NewFxExampleServer(),
//    ...
//  )
func NewFxExampleServer() interface{} {
	return func(p FxExampleServerParams) FxExampleServerResult {
		return FxExampleServerResult{
			Procedures: BuildExampleProcedures(p.Server),
		}
	}
}

func newExampleGetRequest()  { return &keyvalue.GetRequest{} }
func newExampleGetResponse() { return &keyvalue.GetResponse{} }

var (
	_emptyExampleGetRequest  = &keyvalue.GetRequest{}
	_emptyExampleGetResponse = &keyvalue.GetResponse{}
)
