{{define "server_impl" -}}
{{with .File}}
{{$gopkg := .Package.GoPackage}}

{{range .Services -}}

  {{/* Server implementation */}}

  type {{.ServerImpl}} struct {
    server {{.Server}}
  }

  {{range .Methods}}
    {{if and .ClientStreaming .ServerStreaming -}}
      func (h *{{.ServerImpl}}) {{.Name}}(s *yarpcprotobuf.StreamServer) error {
        return h.server.{{.Name}}(&_{{.StreamServer}}{stream: s})
      }
    {{else if .ClientStreaming -}}
      func (h *{{.ServerImpl}}) {{.Name}}(s *yarpcprotobuf.StreamServer) error {
        res, err := h.server.{{.Name}}(&_{{.StreamServer}}{server: s})
        if err != nil {
          return err
        }
        return s.Send(res)
      }
    {{else if .ServerStreaming -}}
      func (h *{{.ServerImpl}}) {{.Name}}(s *yarpcprotobuf.StreamServer) error {
        recv, err := s.Receive({{.NewRequest}})
        if err != nil {
          return err
        }
        req, _ := recv.(*{{goType .Request $gopkg}})
        if req == nil {
          return yarpcprotobuf.CastError({{.EmptyRequest}}, recv)
        }
        return h.server.{{.Name}}(req, &_{{.StreamServer}}{server: s})
      }
    {{else -}}
      func (h *{{.ServerImpl}}) {{.Name}}(ctx context.Context, m proto.Message) (proto.Message, error) {
        req, _ := m.(*{{goType .Request $gopkg}})
        if req == nil {
          return nil, yarpcprotobuf.CastError({{.EmptyRequest}}, m)
        }
        return h.server.{{.Name}}(ctx, req)
      }
    {{end -}}
  {{end -}}
{{end -}}

{{end -}}{{end -}}
