{{define "fx" -}}
{{with .File}}
{{$gopkg := .Package.GoPackage}}

{{range .Services -}}

{{/* Fx clients */}}

{{$fxClient := printf "Fx%s" .Client}}

// {{$fxClient}}Params defines the parameters
// required to provide a {{.Client}} into an
// Fx application.
type {{$fxClient}}Params struct {
  fx.In

  Client yarpc.Client
}

// {{$fxClient}}Result provides a {{.Client}}
// into an Fx application.
type {{$fxClient}}Result struct {
  fx.Out

  Client {{.Client}}
}

// New{{$fxClient}} provides a {{.Client}}
// into an Fx application, using the given
// name for routing.
//
//  fx.Provide(
//    {{$gopkg}}.New{{$fxClient}}("service-name"),
//    ...
//  )
// TODO(mensch): How will this work in v2?
func New{{$fxClient}}(_ string, opts ...yarpcprotobuf.ClientOption) interface{} {
  return func(p {{$fxClient}}Params) {{$fxClient}}Result {
    return {{$fxClient}}Result{
      Client: New{{$fxClient}}(p.Client, opts...),
    }
  }
}

{{/* Fx procedures */}}

{{$fxProcedures := printf "Fx%s%s" .Name "Procedures"}}

// {{$fxProcedures}}Params defines the paramaters
// required to provide the {{.Server}} procedures
// into an Fx application.
type {{$fxProcedures}}Params struct {
  fx.In

  Server {{.Server}}
}

// {{$fxProcedures}}Result provides the {{.Server}}
// procedures into an Fx application.
type {{$fxProcedures}}Result struct {
  fx.Out

  Procedures []yarpc.Procedure `group:"yarpcfx"`
}

// New{{$fxProcedures}} provides the {{.Server}}
// procedures to an Fx application. It expects
// a {{.Server}} to be present in the container.
//
//  fx.Provide(
//    {{$gopkg}}.New{{$fxProcedures}}(),
//    ...
//  )
func New{{$fxProcedures}}() interface{} {
  return func(p {{$fxProcedures}}Params) {{$fxProcedures}}Result {
    return {{$fxProcedures}}Result{
      Procedures: Build{{.Name}}Procedures(p.Server),
    }
  }
}

{{end -}}

{{end -}}{{end -}}
