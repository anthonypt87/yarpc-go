// Code generated by go-bindata.
// sources:
// internal/templatedata/base.tmpl
// internal/templatedata/bindata.go
// internal/templatedata/client.tmpl
// internal/templatedata/client_impl.tmpl
// internal/templatedata/client_stream.tmpl
// internal/templatedata/fx.tmpl
// internal/templatedata/parameters.tmpl
// internal/templatedata/server.tmpl
// internal/templatedata/server_impl.tmpl
// internal/templatedata/server_stream.tmpl
// DO NOT EDIT!

package templatedata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _internalTemplatedataBaseTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xcc\x31\x4f\xc3\x30\x10\x05\xe0\xdd\xbf\xe2\x11\x75\x00\x89\x24\x7b\x25\x26\x0a\xa8\x4b\x5b\x89\xee\xe8\x70\xae\xc1\x22\x8e\xad\xb3\xa9\xa8\x2c\xff\x77\x44\x93\x02\x12\x4d\x37\xfb\x7d\xf7\x5e\x5d\xe3\xde\x35\x8c\x96\x7b\x16\x8a\xdc\xe0\xf5\x00\x2f\x2e\x3a\x5d\xb6\xdc\x97\x07\x12\xaf\xcb\xd6\xa9\xba\x46\x70\x1f\xa2\x79\x8e\x94\xaa\x47\xd3\x71\xb5\x22\xcb\x39\x7f\xcb\x62\x8d\xd5\x7a\x8b\x87\xc5\x72\x7b\xa5\x94\x27\xfd\x4e\x2d\xff\xdc\x6d\x86\x7f\xf5\xe4\xc6\x57\xce\x4a\xa5\x64\x76\x18\xfc\x99\x65\x6f\x34\x07\x94\x39\x2b\xc0\x58\xef\x24\xe2\x5a\x01\x40\x4a\x42\x7d\xcb\x98\x0d\xe9\x86\xe2\xdb\x2d\x66\xd4\x19\x0a\x98\xdf\xa1\x5a\x1e\xe3\x53\x75\x68\x0c\x9c\x33\x8a\x94\xfe\xf4\x72\x2e\xc6\x49\xee\x9b\xb1\x70\xa3\x7e\x7f\x2a\xa5\xc8\xd6\x77\x14\x19\x85\xee\x0c\xf7\xb1\x40\x75\xa4\xff\xf2\x62\xac\xef\x2e\x70\x88\xc2\x64\xcf\x1d\x04\x96\x3d\xcb\xb4\x4c\x2e\x8f\x3c\xbd\xbc\xfb\x3c\x97\x7a\x12\xb2\x1c\x59\xc2\x49\xbf\x02\x00\x00\xff\xff\xb7\xa9\x37\x42\xf4\x01\x00\x00")

func internalTemplatedataBaseTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplatedataBaseTmpl,
		"internal/templatedata/base.tmpl",
	)
}

func internalTemplatedataBaseTmpl() (*asset, error) {
	bytes, err := internalTemplatedataBaseTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/templatedata/base.tmpl", size: 500, mode: os.FileMode(420), modTime: time.Unix(1538673775, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplatedataBindataGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func internalTemplatedataBindataGoBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplatedataBindataGo,
		"internal/templatedata/bindata.go",
	)
}

func internalTemplatedataBindataGo() (*asset, error) {
	bytes, err := internalTemplatedataBindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/templatedata/bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1538694749, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplatedataClientTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x52\xcd\x6e\xdb\x3c\x10\xbc\xeb\x29\x06\xc6\xf7\xb5\xb6\xe1\xd2\xf7\x00\x3d\x14\x06\x52\xf4\x50\x37\x4d\x7a\xe9\x91\xa1\x57\x32\x11\x99\x64\x48\xaa\x6e\xb0\xe0\xbb\x17\x12\x15\xfd\xd8\x05\x5a\xa0\xba\x88\xdc\xc5\xce\xcc\x0e\x87\xf9\x40\xa5\x36\x84\x85\xaa\x35\x99\xb8\xc0\xbb\x94\x0a\xe6\xb3\x8e\x47\x88\x5b\x5d\x53\x77\xfd\xaf\xb2\xee\xa9\xc2\xcd\x7b\x88\x3b\xa9\x9e\x64\x45\xe2\xa3\xed\x4f\x29\x15\x05\xb3\x97\xa6\x22\x88\x07\xf2\x3f\xb4\xa2\xd0\xc1\x14\x00\xf3\x76\x8d\x5d\x07\x0d\x6d\x22\xf9\x52\x2a\xc2\x7a\x9b\xbb\xdb\x2d\x98\x45\x6e\xa7\x04\x1d\x10\x8f\xd4\x96\xf6\xf2\x44\x29\x21\x64\xb4\xb7\x01\xea\x02\x42\x14\x40\x7c\x71\x34\x9f\x1f\x08\xb8\x00\x5a\xf2\x5e\xd5\x67\x8a\x47\x7b\xc8\xa2\x80\xdc\xd2\x25\xac\x47\x3f\xfc\x10\x3d\xc9\x93\x36\x55\xde\x80\xfc\x58\x18\x67\x30\x2a\x5b\x0e\x25\x40\x59\x13\xe9\x67\x14\xbb\xfc\xdf\x4c\x5a\x1d\x8b\xb1\xf1\x9a\x66\x8a\xda\x7e\x6b\xe6\xca\x7e\x6b\x17\x12\xf7\xf4\xdc\x50\x88\xc8\x9e\xa7\x34\x07\x24\x73\xb8\x18\x16\x42\xbc\x48\xef\x94\xd8\xc9\xba\xfe\xe2\xa2\xb6\x66\x1c\x59\x61\xc9\x2c\x32\xef\xab\x4f\x1b\x90\xf7\xd6\xaf\x06\x2b\xa8\x0e\xf4\x4f\x7b\xfe\xa5\xfa\x3f\x29\x9d\xc1\x04\x67\x4d\xa0\x11\xe7\x4a\xf4\xc4\x88\xe9\xed\x2a\x76\xca\x9a\x10\x7d\xa3\x5a\xba\x69\xf2\xf6\x74\x9e\x86\xe7\xb1\xd1\xf5\x21\x40\xc2\xd0\x19\xdf\x3f\xdc\xdf\xed\x5e\x43\x57\x5a\xff\xfb\x5c\xb6\x21\x2c\x1b\xa3\x2e\xa0\x96\x0a\xfd\x9a\x5d\x61\x03\xeb\x62\x18\x96\x77\xde\x46\xfb\xd8\x94\x7d\x37\xdb\xb0\x9a\xe5\x38\xa7\xd7\x53\x6c\xbc\xc1\x9b\xa1\xf3\xe9\xe4\xea\x94\x38\x74\x8f\x79\x83\x39\xda\x9e\xce\xd3\x57\x5e\xaa\x0d\x98\x9d\xd7\x26\x96\x58\xfc\xff\xbc\x80\xb8\xfd\xba\x6f\x6d\x6c\xc5\x08\x21\x56\xbd\x57\xa3\x75\xe3\x71\xac\xfd\x0a\x00\x00\xff\xff\xd6\x5e\x65\x4c\x1f\x04\x00\x00")

func internalTemplatedataClientTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplatedataClientTmpl,
		"internal/templatedata/client.tmpl",
	)
}

func internalTemplatedataClientTmpl() (*asset, error) {
	bytes, err := internalTemplatedataClientTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/templatedata/client.tmpl", size: 1055, mode: os.FileMode(420), modTime: time.Unix(1538691222, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplatedataClient_implTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x55\x3b\x6f\xdb\x30\x10\xde\xf5\x2b\xbe\x18\x69\x21\x19\x0a\xb3\xbb\xf0\x64\xa4\x45\x87\x3e\x50\x77\x0f\x54\xf9\xa4\x10\x96\x48\x9a\xa4\x93\x18\x04\xff\x7b\x41\x52\x7e\x27\xd9\x8c\xa0\xe8\x64\xf2\xcc\xfb\x5e\x3c\x49\xce\x2d\xa8\xe1\x82\x30\xaa\x3b\x4e\xc2\xde\xf3\x5e\x75\x23\xdc\x78\x9f\x39\xf7\xc4\xed\x03\xd8\x67\xde\x51\xdc\x5e\xb7\x52\x2d\x5b\x4c\xa6\x60\x3f\xab\x7a\x59\xb5\xc4\xbe\xc8\x61\xe5\x7d\x96\x39\xa7\x2b\xd1\x12\xd8\x9c\xf4\x23\xaf\xc9\x44\x18\xc0\xb9\xeb\x04\xfe\xb5\x57\x5d\x6c\x9f\xed\xb6\xa1\x2f\x9c\xb8\x1d\x23\x15\x11\x04\x50\x4f\xc2\x56\x96\x4b\x81\xf1\x6d\x3a\x62\x37\x8a\x8e\x91\xbc\x87\xb1\x7a\x5d\x5b\xb8\x0c\x40\xd8\x50\xd5\x63\x53\x69\x55\x2b\x2d\xad\xfc\xb3\x6e\xd8\x3c\x16\x13\x74\x06\x44\xa8\xc7\x4a\xe3\x1e\xce\x0d\x32\xbc\xc7\x14\xf9\xf8\x04\xbb\xc8\x05\xef\x8a\x24\x6e\xb0\xf5\x8d\xec\x83\x5c\x98\xe8\x29\x94\x79\x83\x4a\x2c\xb6\x6e\x12\x13\x17\x6d\xf2\x4f\x7a\x5f\xb8\x19\x5a\x80\x66\x2d\x6a\xe4\x35\xce\xd8\x82\x9c\xef\x55\x4f\xde\xe7\xb5\x7d\x46\x2d\x85\xa5\x67\xcb\x66\xe9\xb7\x84\x54\xd6\x80\x31\x16\xdd\xb1\x59\xd5\x75\x3f\x54\xc8\xa7\x40\xee\xdc\x91\x4b\xef\x4b\x90\xd6\x52\x17\x43\x2e\x31\x9b\x58\x0b\xd9\xd7\x2c\xe5\x14\x31\x52\x5f\x60\x2c\xe1\x9c\xd2\x5c\xd8\x06\xa3\x0f\xab\x11\x06\x31\x89\x98\x31\x56\xec\xa0\x78\x13\xa1\xae\xa6\x10\xbc\x3b\xa0\x00\x34\xd9\xb5\x16\xa1\x1c\xd9\x76\xff\xf8\xec\xe4\xc4\xc7\x13\xc9\x29\x03\x97\x84\x4d\x60\x7c\x19\x40\xb2\xc3\x6e\xe7\xa8\x33\x14\xc8\xcf\xe2\xfe\xbf\xd2\xbd\x60\xb0\x17\x18\x5b\x4d\xab\xd0\xd4\xca\xdf\xe1\xf1\x65\xbf\x68\xb5\x26\x63\x91\xde\x24\xdb\x00\xfe\xe9\xe4\x87\xb6\xc9\x14\x86\xcd\x49\x2c\x72\x4d\xab\xe2\xd3\x3b\x3e\x22\xef\x7c\x6b\x47\x7d\x46\x49\x61\xe8\xa0\xf1\xec\x02\x7b\xd3\xbe\x7c\x85\x6f\x5e\x9e\xa6\x55\x19\x4d\xd0\xd3\x96\xe4\x02\xef\x2a\x53\x42\x2e\x83\xb0\xde\xb4\xec\x4d\x63\x47\x8c\x57\x72\xf9\x2a\xd5\xf1\xc7\x69\x56\x19\x7b\x17\x12\x09\xb3\x7e\xd7\x2b\xbb\x39\x74\xa3\xc9\x14\xaf\x0f\x48\x94\xf7\xc2\x08\x88\xc5\xee\xab\xbb\x5d\xef\x57\xfb\xe5\xbe\xf6\x37\x00\x00\xff\xff\xe4\x7b\xc2\xd8\x02\x08\x00\x00")

func internalTemplatedataClient_implTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplatedataClient_implTmpl,
		"internal/templatedata/client_impl.tmpl",
	)
}

func internalTemplatedataClient_implTmpl() (*asset, error) {
	bytes, err := internalTemplatedataClient_implTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/templatedata/client_impl.tmpl", size: 2050, mode: os.FileMode(420), modTime: time.Unix(1538678595, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplatedataClient_streamTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x55\x3d\x6f\xdb\x3c\x10\xde\xfd\x2b\x2e\x41\x06\xc9\xc8\x4b\xef\x6f\xe1\xa1\x30\xd2\xa2\x43\x3f\x60\x77\x0f\x54\xe9\x24\x13\x96\x48\x85\xa4\x9c\x1a\x84\xfe\x7b\x41\x8a\xa4\x25\x5b\x72\x5c\xa3\xdd\x3a\x85\x39\xf1\x9e\x8f\xcb\x73\x8c\xd6\x19\xe6\x94\x21\xdc\xa7\x25\x45\xa6\x9e\xa5\x12\x98\x54\xf7\xf0\x5f\xdb\xce\xb4\x7e\xa5\x6a\x0b\xe4\x03\x2d\xd1\xfe\xfa\x50\xf0\x7a\x57\xc0\xff\x4b\x20\xdf\x92\x74\x97\x14\x48\x3e\x72\x77\x6a\xdb\xd9\x4c\x6b\x91\xb0\x02\x81\x6c\x50\xec\x69\x8a\xd2\xc2\x00\x68\xfd\xd0\xc1\xdb\xd6\x95\x3d\x9a\xfb\xe6\xcb\x62\x0e\x5d\x01\x3a\x6a\xa0\x4c\xa1\xc8\x13\xd3\x3d\x5f\xf8\x5b\x0e\xf7\x33\xaa\x2d\xcf\x3c\xac\xf9\x40\x73\xe0\xc2\x63\x6e\x2c\x02\x65\x45\xa7\x00\x45\x28\xb8\xfb\x8b\x05\x68\x4d\xba\xaa\x97\x01\x54\x42\xe2\xc8\x4d\x6b\xe0\x87\x46\x62\x06\x94\x81\xda\xe2\xd1\x82\x69\xf0\x37\x88\x05\x55\x87\x1a\xc7\x60\x03\x8e\xb6\xd7\x00\x56\x9c\x29\xfc\xa9\xa2\x18\xd2\xee\x44\x5c\xe5\xe8\xe5\xcc\x88\x77\x0a\xb0\x41\x96\x45\x73\xad\x0b\xfe\xdd\x10\x92\x35\xbe\x34\x28\x15\x74\x7f\x94\xb6\x7d\x04\x42\xc8\x21\x11\x75\xea\x94\x7c\xad\x15\xe5\x2c\x06\x14\x82\x0b\x47\x81\x2c\x1b\x0e\xef\x74\x50\x3d\xc2\x35\xa6\xfb\x68\x02\x73\x28\x44\xd6\x9c\x49\xec\x29\xb1\x94\xb1\xb7\x5d\x72\x89\x56\xfd\x2d\x02\x13\x96\x9d\x4f\x25\x62\x5c\x9d\x49\x8f\x7b\xda\x2d\xe7\x7b\x96\xfd\x19\x0f\x43\x59\xed\x59\xed\x78\x9e\x88\x74\x55\x97\x58\x21\x53\x89\x61\xfe\x0b\xb9\x1e\x8b\xe0\xa7\xaa\x2e\xdb\xd6\x48\x68\x52\x15\x32\xe8\x14\xcd\xed\x40\x6a\xc1\x15\xff\xd1\xe4\x83\x3e\xe7\xd1\xfe\xd8\x27\x02\x9e\x47\xb2\xbd\xb4\xc3\x1b\xa1\x8b\x23\x46\xcb\xb8\x6b\xce\x1b\x96\x42\x94\xc2\xc4\xcd\xe9\x75\x08\x62\x05\xaa\x46\x30\x48\x49\xa7\x9a\x84\x8e\xbe\xc6\xd1\xbd\x71\x73\x79\x4b\x82\x4d\xa5\xc0\x17\xb8\xb8\x57\xbc\x56\xf2\xe2\x72\x4d\x0a\xf6\xf8\x1d\x06\x21\x24\x1e\x4d\xd0\xf4\x3a\x5e\xe9\xc3\xc6\xfc\x92\xcc\xab\xb2\x1e\x6c\x54\xb2\xb0\x35\xf3\x5c\x07\x2f\x6b\x4c\x91\xee\x31\xd2\x9a\x7c\xc1\x57\x0f\xe2\xe7\x13\xbc\x01\xd0\xdc\xf6\xde\x2d\x81\xd1\x32\x60\x86\xe1\x30\x5a\x5a\x70\x57\x6f\xc3\xe8\xe4\x23\xf0\x9d\xa1\xac\x64\x41\x2e\x0a\xee\x31\xdd\xf1\xdd\x04\xc5\x30\xe1\xab\x44\xaa\x27\xe3\xd2\xe8\x7f\xaa\x6a\x75\xe8\x3b\xa8\x64\x11\x9f\xe9\xb1\x50\x56\x16\xa3\x65\x3f\x71\x6f\x06\x3b\x3c\x78\xb7\x27\xc7\x62\x44\x57\xa6\xe6\x37\xde\xc8\x2b\x03\x35\x78\x3f\xaf\x0f\xd6\xe9\xe6\x9c\xe4\xca\x25\xa3\x9f\xaa\xa1\xcf\x77\xb7\x24\xe7\x5f\x5a\x87\x69\xf5\x6a\x27\xf2\x32\xfa\x6f\x6b\xec\x78\xac\xfd\x0a\x00\x00\xff\xff\x98\x33\x2a\x95\x26\x0a\x00\x00")

func internalTemplatedataClient_streamTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplatedataClient_streamTmpl,
		"internal/templatedata/client_stream.tmpl",
	)
}

func internalTemplatedataClient_streamTmpl() (*asset, error) {
	bytes, err := internalTemplatedataClient_streamTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/templatedata/client_stream.tmpl", size: 2598, mode: os.FileMode(420), modTime: time.Unix(1538678660, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplatedataFxTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x95\xcd\x6e\xdb\x3a\x10\x85\xf7\x7a\x8a\x81\x71\x17\x72\x90\xd0\xc0\x5d\x1a\x28\x0a\xb4\x85\xdb\x6c\x62\xa3\xe9\xae\x28\x1a\x46\x1e\xc9\x44\x64\x92\x25\x29\x5b\x01\xc1\x77\x2f\xf8\x23\x2b\x52\xe4\xd6\x8d\x17\x36\x3d\x1a\x9e\xf9\x34\xc3\x23\x59\xbb\xc5\x92\x71\x84\x59\xd9\xce\xe0\xc6\xb9\xcc\xda\x23\x33\x3b\x20\x2b\x56\x63\xf8\xfb\x5f\x25\xe4\x53\x05\xcb\x77\x40\x36\xb4\x78\xa2\x15\x92\xcf\x22\xad\x9c\xcb\x32\x6b\x15\xe5\x15\x02\xb9\x47\x75\x60\x05\xea\x20\x93\x01\x58\xbb\xb8\x82\x55\x0b\x45\xcd\x90\x1b\x0d\x57\x8b\x18\x5f\x2c\xc0\x5a\xb2\x6a\x3f\x86\xb8\x73\x1b\xaa\xe8\x5e\x43\x04\xd1\x60\x76\x08\xd2\x87\xd0\xa0\xd2\x31\x5f\xe1\xaf\x86\x29\xdc\x82\x11\x20\x95\x38\xb0\x2d\x02\xf5\x2a\x9d\x06\x30\x6e\x04\x50\x1e\xd3\x57\x2d\x50\x29\x6b\x56\x50\xc3\x04\x27\x19\x80\x79\x96\x38\x59\x55\x1b\xd5\x14\x06\x6c\x06\x00\x50\xb6\xe4\x96\x67\x61\x19\xd3\xe0\x99\x2a\x59\xa4\x2a\x19\xc0\x24\xff\x57\xd4\x4d\x6d\x3a\x2e\x3d\x04\x8b\xf9\x89\xee\x22\xb0\x24\x37\x06\x5b\x37\x66\x40\x36\xac\xd1\x81\xdd\xe1\x71\x20\xf6\x06\xaa\x6b\x68\x34\xe3\x55\x98\x43\xc5\x0e\x98\x7a\xca\xe9\x1e\xa1\x14\x0a\x94\x68\x0c\xe3\x15\x09\xe1\x78\xcd\xf3\x6d\x62\xa1\x3c\x45\xfc\xf8\xe3\xc9\x71\x8e\x8c\xa9\xf2\x99\x8e\x67\xe5\xc6\xab\xce\xe6\xd7\xa7\x4d\x84\x90\xb4\x9e\xc7\xdf\x6f\xeb\x4f\xeb\x7c\x8f\x5c\x17\xbb\xf9\x12\xbe\x88\x23\x1c\x59\x5d\x83\xd9\x31\x0d\x47\xa1\x9e\x80\x71\x38\xfc\xff\x3e\x03\x28\x1b\x5e\xbc\xba\xff\xfc\xa7\x6f\x24\xe3\xd5\x35\x08\x69\xb4\xd7\x0f\x23\x95\x4a\x18\xf1\xd8\x94\xa9\x23\x6b\xe9\xef\x7c\xee\x3b\x82\xaa\xa4\x05\x5a\x97\x3a\xaf\xd0\x34\x8a\x07\xf1\x5c\x4e\x9d\xa0\xf9\xe4\xf4\xe2\xe6\xd3\xf6\x89\x94\x2e\xa3\x1b\xe8\x32\xb1\x9f\xc8\x65\x5a\x46\x72\x42\x48\x68\x93\xff\xb8\xac\xfb\x1e\xf8\xcc\xf7\x14\xd5\x6b\x9f\xdd\x87\xf8\x79\x9f\xd1\x3f\xfb\xcc\xe7\x59\x4b\x3a\x15\x1f\x2f\x70\xdb\x28\xd4\x97\x9f\xed\x11\xc2\x39\xd3\xc5\xb4\x97\xd5\xc6\x9e\xeb\xe2\x63\xcf\x8d\x20\xe3\x8e\x9e\xf4\x9f\x20\xff\x66\xc0\x4d\x2f\xfb\xfd\x47\x7c\x40\x9c\x42\xf0\x50\x29\xd1\xc8\xe5\x2c\xc4\xcb\x76\xf6\x30\x61\xce\x97\xad\xbc\x0c\x7f\x12\x1e\x6e\x0d\x60\x2b\xb1\x30\x69\x12\x74\x30\x27\x23\xe0\x11\x41\x2a\xd4\xfe\x71\xc1\x78\x28\x52\x08\x6e\x28\xe3\xa8\xde\x62\xdf\x4e\x3a\x3f\x6b\xd8\x81\x07\xfb\xf4\xcb\x7c\x35\x3c\x24\xf3\xc9\xa1\x4c\xf9\x6a\x98\xd2\xfb\xaa\x9f\xd3\x12\x3e\x34\xac\xde\x5a\x4b\xee\xe8\x1e\x9d\xeb\xaf\xe4\x32\x35\x6c\xd2\x5c\xd6\x22\xdf\xc6\xd7\xd9\x69\xd9\xc7\x7e\x07\x00\x00\xff\xff\xe2\x9e\x5f\xc5\x3c\x07\x00\x00")

func internalTemplatedataFxTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplatedataFxTmpl,
		"internal/templatedata/fx.tmpl",
	)
}

func internalTemplatedataFxTmpl() (*asset, error) {
	bytes, err := internalTemplatedataFxTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/templatedata/fx.tmpl", size: 1852, mode: os.FileMode(420), modTime: time.Unix(1538692862, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplatedataParametersTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xc1\x6a\xf3\x30\x10\x84\xef\x7e\x8a\x21\xfc\xfc\x24\x81\x2a\xf7\x42\x8e\x6d\x4f\x29\xa1\xed\x0b\x08\x7b\xa3\x98\x34\x92\x2a\xc9\x09\x66\xd9\x77\x2f\xb1\x65\xd7\x69\x4a\xe9\x6d\x77\xd9\x19\xe6\x1b\xe6\x8a\x76\xb5\x25\xcc\xbc\x0e\xfa\x48\x89\x42\x9c\xe1\x4e\xa4\x60\x3e\xd7\x69\x0f\xf5\x58\xbf\x53\xb7\xfe\x33\xce\x1f\x0c\xee\xd7\x50\x5b\x5d\x1e\xb4\x21\xf5\xe4\xf2\x24\x52\x14\xcc\x41\x5b\x43\x50\xaf\x14\x4e\x75\x49\xb1\xb3\x29\x00\xe6\xd5\x12\xdb\xc1\x1e\xa5\xb3\x31\x85\xa6\x4c\x2e\x44\x2c\x57\xc3\x4f\x16\x6f\x28\xed\x5d\xd5\x6b\x01\x60\xd7\xd8\x12\xcc\xea\x99\xce\x2f\xf4\xd1\x50\x4c\x22\xf3\x05\x7c\x70\xc9\xa9\x0d\xc5\xa8\x0d\x81\x11\x28\x35\xc1\xe2\x3f\xb3\x71\x6f\xad\x27\xa8\xfc\x8d\x3e\xb6\x08\x0b\xf0\x83\x65\xf4\xce\x46\xfa\xb3\x67\xff\x3e\x35\x95\x2e\x3d\xd9\xea\x0a\xf7\xe1\xe8\x53\x8b\xb1\x53\xa4\xd6\xd3\x94\xb6\xef\x36\xc3\x66\xd4\x93\x0e\x98\x77\xd3\xd8\xc6\x58\xc3\xe5\xa6\x3a\xd3\xb1\x05\x60\xfd\x3b\xef\x8d\x70\x60\xfd\x2e\xbc\x81\xca\x21\x06\xa8\xcb\xb6\xb8\xc2\x9c\x00\x8f\xe3\xd7\xed\x33\x00\x00\xff\xff\x7e\x35\x28\x43\x55\x02\x00\x00")

func internalTemplatedataParametersTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplatedataParametersTmpl,
		"internal/templatedata/parameters.tmpl",
	)
}

func internalTemplatedataParametersTmpl() (*asset, error) {
	bytes, err := internalTemplatedataParametersTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/templatedata/parameters.tmpl", size: 597, mode: os.FileMode(420), modTime: time.Unix(1538694591, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplatedataServerTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x54\x41\x6f\xd4\x3c\x10\xbd\xef\xaf\x18\xad\xfa\x7d\x64\xab\xe2\xbd\x47\xe2\x00\x2b\x15\x38\x50\x2d\x2d\x1c\x10\xe2\x60\x92\x49\xd6\x6a\xd6\x4e\x6d\xa7\xa5\xb2\xfc\xdf\x91\x63\x27\x76\x92\x56\x5d\x09\xc4\x5e\x36\xf1\xbc\x79\x7e\x33\xf3\x26\xc6\x94\x58\x31\x8e\xb0\x56\x28\xef\x51\xae\xe1\xb5\xb5\x2b\x63\x1e\x98\x3e\x00\xb9\x64\x0d\xf6\xaf\x67\xb5\x68\x6f\x6b\xc8\xdf\x00\xd9\xd3\xe2\x96\xd6\x48\xde\x8b\xf0\x64\xed\x6a\x65\x8c\xa4\xbc\x46\x20\x37\x28\xef\x59\x81\xaa\xa7\x01\x30\xe6\x4c\xdd\x17\x7d\xde\x15\x3d\xf6\x50\x77\xb8\x3d\x87\x00\x04\xc6\x35\xca\x8a\x16\x08\xe7\x5b\x1f\xde\x6e\xc1\x98\x9e\x08\xa5\xb5\xc0\x14\xe8\x03\x06\x26\x6b\x41\xf9\xc4\x57\x0a\xbc\xe2\xc8\x40\x56\x00\xfa\xb1\xc5\x69\xfa\xc8\x6f\x56\x00\xee\xf2\xa0\xf4\x13\xea\x83\x28\x07\xa1\x3e\xc4\x2a\x10\x12\xc8\xae\x61\xc8\xf5\x8d\x96\x48\x8f\x8c\xd7\x10\xd8\xe2\x41\xcc\x71\x59\xa1\xb4\x6c\x3c\x0a\x54\x5c\xe8\x25\x57\x9a\xea\x7e\xe7\xc6\xd4\xe2\x8b\x53\x4d\xae\xf1\xae\x43\xa5\xc1\x37\xdb\xda\x8b\x09\x21\xf2\x72\x96\xec\xca\xec\x79\x87\x62\x63\xc2\x26\x51\x30\x13\x6f\x2d\x64\xcb\x4c\x40\x29\x85\x74\x69\xd8\x28\xb4\xd6\xbf\xfb\x6b\x93\x06\xb9\xe0\xcb\xd5\x17\x82\x6b\xfc\xa5\xc9\xce\xff\xa7\x75\x9c\x54\xee\x06\xb2\x09\x4e\xb5\x82\x2b\x8c\xc0\x20\x76\xf5\x54\x6b\xd2\xb7\xe8\xb6\xbd\x14\x05\x96\x9d\x44\xa7\x4d\x69\xd9\x15\x9a\x09\x9e\x5a\xee\x5d\xc7\x9a\xd2\x18\x32\x22\x95\xb5\x11\xec\x3d\xf8\xed\xed\xf5\x7e\x07\xed\x88\x80\x4a\xc8\x27\xcd\xe9\x9c\x58\x75\xbc\x78\x92\x35\x53\xa9\x41\x37\xf0\xfd\xc7\x23\x95\x6d\x11\x31\xc1\xa9\x07\xb7\x36\xff\x8f\xd0\x8f\xc7\xb6\xb1\xd6\x78\xd3\xe7\xa0\x7c\xb9\x12\x75\x27\x39\xf4\x0c\xad\x14\x5a\xfc\xec\xaa\xe4\xb6\x61\x2a\xcf\xc5\xf7\x54\xd2\xa3\x32\x63\xe7\xc3\x56\xe6\x60\x4c\x2b\x19\xd7\x15\xac\xff\xbb\x5b\x03\xb9\xfc\x7c\x95\x0e\xe8\x2b\xa7\xf2\x31\x1f\x94\x8f\xbc\xfd\xf1\xf3\xe4\x71\xf9\x3a\x07\x1c\x16\x90\xcc\x6d\x3d\xd9\x0f\x8f\x5a\x08\xf2\xa6\xbb\x98\x40\x3f\x50\x5e\x36\xae\x37\x53\x55\x57\xf8\xd0\x0b\x0b\xe1\x6c\x92\x33\x6f\x4d\x8a\x5c\xea\x4f\xef\xc9\xe1\x40\x46\xf7\x5f\x2c\x40\x3b\x89\x54\x63\x0e\x1c\x1f\x06\x77\x8c\xe8\xe0\xfc\x6c\x33\x4f\x9b\xf1\x4c\xe2\x2f\x7c\x0e\x92\xb0\x5f\xed\xe5\x78\xfc\xf9\x29\xf3\x51\x3d\xf2\x1f\x0e\xc8\x4b\x3b\x69\x42\x13\xe8\x1f\x8c\xe8\x6f\xf4\x3a\x3c\x6c\xfa\x6f\x4d\xc4\xc5\xc7\x78\xf6\x3b\x00\x00\xff\xff\x9c\x66\x73\x72\x69\x07\x00\x00")

func internalTemplatedataServerTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplatedataServerTmpl,
		"internal/templatedata/server.tmpl",
	)
}

func internalTemplatedataServerTmpl() (*asset, error) {
	bytes, err := internalTemplatedataServerTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/templatedata/server.tmpl", size: 1897, mode: os.FileMode(420), modTime: time.Unix(1538694566, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplatedataServer_implTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x54\x5f\x6f\xda\x30\x10\x7f\xe7\x53\xfc\x56\x55\x53\x82\xa8\xfb\x5e\x89\x27\xd4\x4d\x7b\xe8\x34\x95\xbd\x23\xcf\x1c\xc1\x6a\xe2\x04\xdb\xa4\x20\xcb\xdf\x7d\xb2\x1d\x12\xfe\x8c\xa9\x95\xb6\xf2\xc2\xf9\x92\xfb\xfd\xb9\xf3\xc5\xb9\x25\xad\xa4\x22\xdc\x18\xd2\x2d\xe9\x85\xac\x9a\xf2\x06\x77\xde\x8f\x9c\x7b\x95\x76\x0d\xf6\x45\x96\x14\x8f\xb7\x45\xdd\xbc\x14\x78\x98\x82\xfd\xe0\xe2\x85\x17\xc4\xbe\xd6\x5d\xe4\xfd\x68\xe4\x9c\xe6\xaa\x20\xb0\x39\xe9\x56\x0a\x32\x11\x06\x70\xee\x36\x81\x7f\xab\x9a\x32\x96\xcf\xfb\x63\xa8\x0b\x6f\xdc\x8f\x91\x92\x08\x02\xa8\x22\x65\xb9\x95\xb5\xc2\xf8\x3e\xbd\x62\xf7\x0d\x9d\x22\x79\x0f\x63\xf5\x56\x58\xb8\x11\x00\xa4\x27\x70\xae\x83\x8f\xdc\xb1\xb6\xe5\x1a\x8b\xe3\x07\x98\x22\x1b\x9f\x81\xe5\x99\x92\x65\x9e\xd4\x74\x3e\x9e\xc8\xae\xeb\xa5\x89\x40\x21\x2d\x57\xe0\x6a\x09\x36\x2b\x25\x29\x3b\xb7\x9a\x78\x25\x55\x71\xf0\x33\x24\xee\xba\x12\x60\xb5\x55\x02\xd9\x1a\x17\x6c\x41\xce\x77\x5e\x91\xf7\x99\xc1\x78\xcf\x75\x23\x1a\x5d\xdb\xfa\xd7\x76\xc5\x12\x50\x02\xcd\x41\x5a\xd7\xba\xf3\x18\x7e\x9a\xec\x56\x2b\xac\x59\xc2\x63\x03\xd0\xe7\x60\xf1\xa8\x36\x51\x39\x13\x53\x0f\x30\x3e\xef\x40\x0e\x86\xa8\x34\x04\xb9\xba\x74\xf4\x9f\x0d\x98\x49\x48\x86\xab\xf0\x0e\x17\xf1\x70\xec\x02\x41\x7a\xc0\xf9\x34\x85\x92\xe5\x11\x43\xdf\x24\xd2\xba\x4f\xfa\xf3\x0e\x1a\x36\x27\xb5\xcc\x34\x99\xab\x7d\xf9\xe0\xc1\x8a\xb6\x6f\x8c\x61\xcf\x24\x48\xb6\x94\x05\x3c\x7a\x7d\xa6\xcd\x96\x8c\xf5\xff\xc2\xfd\x66\x82\x45\xe0\x08\x84\x2c\x2c\x42\x51\xff\x0c\xeb\xc5\x3a\x12\xa4\x4d\x3f\xe3\xd2\xb4\xc1\xf4\x2a\xd7\xa9\xd1\x19\x37\xf6\x31\xd8\x0b\xea\x1f\xab\xc6\xee\x7b\xfd\x93\x48\x9b\x5f\x1f\xcb\x1f\xae\x44\x94\xfc\xe6\x7b\x71\x32\xc5\xf7\x4d\x4c\xd8\x1d\x44\xad\x2c\xed\x2c\x9b\xa5\xff\x49\x34\xfe\xb7\x26\x21\x8b\xbe\xd9\x13\x19\xc3\x0b\x9a\xa4\xc1\xe6\x6f\x5a\x59\x61\x77\x91\xe0\x42\xbb\x5a\xf6\x5f\xcf\x43\x3c\x44\x43\x38\xe4\x7e\x07\x00\x00\xff\xff\xf9\xd1\x0c\x65\xca\x05\x00\x00")

func internalTemplatedataServer_implTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplatedataServer_implTmpl,
		"internal/templatedata/server_impl.tmpl",
	)
}

func internalTemplatedataServer_implTmpl() (*asset, error) {
	bytes, err := internalTemplatedataServer_implTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/templatedata/server_impl.tmpl", size: 1482, mode: os.FileMode(420), modTime: time.Unix(1538694741, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplatedataServer_streamTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\x4d\x6f\xdb\x30\x0c\xbd\xe7\x57\xb0\x45\x0f\x76\xd0\x29\xf7\x01\x39\x05\xdd\xb0\xc3\x3e\x90\xec\x5e\x78\x0e\xed\x08\xb1\x25\x55\x92\xd3\x05\x82\xfe\xfb\x20\x5a\x56\x92\xc6\xce\x7a\xe9\x29\x0a\x4d\xbe\xf7\x48\x3e\xc9\xb9\x2d\x56\x5c\x20\xdc\x1b\xd4\x07\xd4\xcf\xc6\x6a\x2c\xda\x7b\xf8\xe4\xfd\xcc\xb9\x57\x6e\x77\xc0\xbe\xf0\x06\xe9\xef\x43\x2d\xd5\xbe\x86\xcf\x4b\x60\xbf\x8a\x72\x5f\xd4\xc8\xbe\xca\x78\xf2\x7e\x36\x73\x4e\x17\xa2\x46\x60\x1b\xd4\x07\x5e\xa2\x21\x18\x00\xe7\x1e\x7a\x78\x2a\xdd\xd0\x31\xe4\x87\x2f\x8b\x39\xf4\x01\xe8\xa9\x81\x0b\x8b\xba\x2a\x42\xf5\x7c\x31\x64\x45\xdc\xef\x68\x77\x72\x3b\xc0\x86\x0f\xbc\x02\xa9\x81\xad\x1a\x8e\xc2\x6e\x08\x81\x8b\x7a\x20\x49\x81\x98\xbf\x58\x80\x73\xac\x8f\x0e\x32\x80\x1b\x28\x22\x79\x28\x4d\xfc\xd0\x19\xdc\x02\x17\x60\x77\x78\x6a\x21\x14\x0c\x19\x8c\x40\xed\x51\xe1\x18\x6c\xc2\x71\x94\x06\xb0\x92\xc2\xe2\x5f\x9b\xe5\x50\xf6\x27\x16\x23\xa7\x5e\xae\x1a\x19\x3a\x05\x58\x63\x79\xc8\x18\x63\xc7\x42\xab\x32\x92\xfd\x54\x96\x4b\x91\x43\x36\x77\xae\x96\xbf\x83\x10\xb6\xc6\x97\x0e\x8d\x85\x7e\x59\xde\x3f\x02\x6a\x2d\x75\x1e\x49\x50\x6c\x2f\xc7\xf7\x76\x54\x67\x94\x1b\x14\xdb\x4b\x68\xa3\xa4\x30\x78\x86\x3d\x21\x88\x28\x47\x18\xfd\x55\xec\x74\x9e\xb0\x43\xab\x1a\x6c\x51\xd8\x22\x20\x7f\x80\x27\xc6\xd6\xf7\xad\x55\x8d\xf7\x41\x42\x57\xda\xb4\xbf\xa8\x68\x4e\x0d\x2b\x2d\xad\xfc\xd3\x55\x17\x75\xb1\x47\xfa\x39\x14\x1a\x9e\x47\x7c\xb1\xa4\x6d\x8d\xd0\xe5\x99\xe0\x4d\xde\x17\x57\x9d\x28\x21\x33\x30\x91\x39\x6d\xa5\x24\x56\xa3\xed\xb4\x00\xc3\x7a\xd5\x2c\x55\x9c\x6b\x1c\xf5\x5c\x9c\xcb\xff\x24\x90\x1f\xa5\xb2\x66\xca\x03\xef\x31\x65\x92\xdb\x9a\x9a\x62\xe1\x85\x48\x9a\xd7\x58\x22\x3f\x60\xe6\x1c\xfb\x81\xaf\x11\x23\x14\x07\x5a\xc6\x58\x1e\x8b\x79\x45\xa5\x77\x4b\x10\xbc\x49\x90\x69\x06\x82\x37\x84\x1d\xe3\x3e\x4d\xe8\xe5\x11\xe4\x3e\x30\xb6\xa6\x66\xb7\xe4\x9e\x11\xdd\xc9\xfd\x04\xc3\xa5\x2d\x56\x85\xb1\x4f\xa1\xc7\xa0\xfe\xa9\x55\xf6\x78\xa6\xbf\x35\x75\x7e\xa5\x86\x90\x48\x94\xe0\xcd\xe8\x6d\x99\xbe\xb4\xef\xdc\x19\x5d\x68\x8d\x94\x70\xe3\x52\xdf\xda\x2a\xed\x6d\xd2\x65\x03\xc1\x9b\x15\x4d\x34\x32\xfa\x0a\x8c\x1d\x4f\xb1\x7f\x01\x00\x00\xff\xff\x3e\x6f\x2e\x03\xb1\x06\x00\x00")

func internalTemplatedataServer_streamTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplatedataServer_streamTmpl,
		"internal/templatedata/server_stream.tmpl",
	)
}

func internalTemplatedataServer_streamTmpl() (*asset, error) {
	bytes, err := internalTemplatedataServer_streamTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/templatedata/server_stream.tmpl", size: 1713, mode: os.FileMode(420), modTime: time.Unix(1538678678, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"internal/templatedata/base.tmpl": internalTemplatedataBaseTmpl,
	"internal/templatedata/bindata.go": internalTemplatedataBindataGo,
	"internal/templatedata/client.tmpl": internalTemplatedataClientTmpl,
	"internal/templatedata/client_impl.tmpl": internalTemplatedataClient_implTmpl,
	"internal/templatedata/client_stream.tmpl": internalTemplatedataClient_streamTmpl,
	"internal/templatedata/fx.tmpl": internalTemplatedataFxTmpl,
	"internal/templatedata/parameters.tmpl": internalTemplatedataParametersTmpl,
	"internal/templatedata/server.tmpl": internalTemplatedataServerTmpl,
	"internal/templatedata/server_impl.tmpl": internalTemplatedataServer_implTmpl,
	"internal/templatedata/server_stream.tmpl": internalTemplatedataServer_streamTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"internal": &bintree{nil, map[string]*bintree{
		"templatedata": &bintree{nil, map[string]*bintree{
			"base.tmpl": &bintree{internalTemplatedataBaseTmpl, map[string]*bintree{}},
			"bindata.go": &bintree{internalTemplatedataBindataGo, map[string]*bintree{}},
			"client.tmpl": &bintree{internalTemplatedataClientTmpl, map[string]*bintree{}},
			"client_impl.tmpl": &bintree{internalTemplatedataClient_implTmpl, map[string]*bintree{}},
			"client_stream.tmpl": &bintree{internalTemplatedataClient_streamTmpl, map[string]*bintree{}},
			"fx.tmpl": &bintree{internalTemplatedataFxTmpl, map[string]*bintree{}},
			"parameters.tmpl": &bintree{internalTemplatedataParametersTmpl, map[string]*bintree{}},
			"server.tmpl": &bintree{internalTemplatedataServerTmpl, map[string]*bintree{}},
			"server_impl.tmpl": &bintree{internalTemplatedataServer_implTmpl, map[string]*bintree{}},
			"server_stream.tmpl": &bintree{internalTemplatedataServer_streamTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

