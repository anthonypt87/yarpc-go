// Code generated by go-bindata.
// sources:
// internal/templatedata/base.tmpl
// internal/templatedata/bindata.go
// internal/templatedata/caller.tmpl
// internal/templatedata/client.tmpl
// internal/templatedata/client_stream.tmpl
// internal/templatedata/fx.tmpl
// internal/templatedata/handler.tmpl
// internal/templatedata/parameters.tmpl
// internal/templatedata/server.tmpl
// internal/templatedata/server_stream.tmpl
// DO NOT EDIT!

package templatedata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _internalTemplatedataBaseTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8c\xcd\x6e\xea\x30\x10\x85\xf7\x7e\x8a\x73\x23\x16\xb7\x52\x93\xec\x91\xba\x2a\x6d\xc5\x06\x90\xe0\x05\xa6\xce\x10\xac\x3a\xb6\x35\x71\x51\x91\xe5\x77\xaf\x8a\xa1\x3f\x52\xd8\xcd\x39\xdf\x7c\xa7\x6d\xf1\xe8\x3b\x46\xcf\x8e\x85\x22\x77\x78\x3d\x21\x88\x8f\x5e\xd7\x3d\xbb\xfa\x44\x12\x74\xdd\x7b\xd5\xb6\x18\xfd\xbb\x68\x9e\x23\xa5\xe6\xd9\x58\x6e\x56\x34\x70\xce\x5f\x64\xb1\xc6\x6a\xbd\xc3\xd3\x62\xb9\xfb\xa7\x54\x20\xfd\x46\x3d\x7f\xff\x6d\x4a\x6e\x5e\xfc\xe5\xca\x59\xa9\x94\xcc\x1e\x85\x6f\x59\x8e\x46\xf3\x88\x3a\x67\x05\x98\x21\x78\x89\xf8\xaf\x00\x20\x25\x21\xd7\x33\x66\xa5\xdd\x50\x3c\xdc\x63\x46\xd6\xd0\x88\xf9\x03\x9a\xe5\xb9\xbe\xaa\xc5\x28\x38\x67\x54\x29\xfd\xf2\x72\xae\x2e\x93\xec\xba\x8b\x70\xa7\x7e\x92\x4a\x29\xf2\x10\x2c\x45\x46\xa5\xad\x61\x17\x2b\x34\x67\xf4\x87\x90\xb5\x2c\x93\xe4\xec\x6c\xa3\x30\x0d\x53\x7c\x64\x39\x4e\x9b\x07\x72\xdd\x8d\xd1\x22\xdd\x1e\xdd\x7f\x4c\xb5\x81\x84\x06\x8e\x2c\xe3\x95\x7e\x06\x00\x00\xff\xff\xd7\x0d\x55\xa2\xe9\x01\x00\x00")

func internalTemplatedataBaseTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplatedataBaseTmpl,
		"internal/templatedata/base.tmpl",
	)
}

func internalTemplatedataBaseTmpl() (*asset, error) {
	bytes, err := internalTemplatedataBaseTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/templatedata/base.tmpl", size: 489, mode: os.FileMode(420), modTime: time.Unix(1538668253, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplatedataBindataGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func internalTemplatedataBindataGoBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplatedataBindataGo,
		"internal/templatedata/bindata.go",
	)
}

func internalTemplatedataBindataGo() (*asset, error) {
	bytes, err := internalTemplatedataBindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/templatedata/bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1538668262, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplatedataCallerTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x55\xcd\x6e\xdb\x3c\x10\xbc\xeb\x29\x26\x42\xfc\xc1\x32\x14\xe6\xee\x0f\x3e\x19\x6d\x4f\xfd\x41\xdd\xbb\xa1\xd2\x2b\x85\xb0\x44\xca\x24\x9d\xc4\x20\xf8\xee\x05\x49\xf9\xaf\x76\x72\x6a\x10\x14\x3d\x79\x35\xde\xd9\xd9\xd9\xa5\x44\xe7\x56\x54\x0b\x49\xc8\x79\xd5\xb6\xa4\x73\xdc\x79\x9f\x39\xf7\x24\xec\x03\xd8\x47\xd1\x52\x7c\xbc\x6d\x54\xbf\x6e\x30\x9d\x81\x7d\xab\xf8\xba\x6a\x88\x7d\x52\x43\xe4\x7d\x96\x39\xa7\x2b\xd9\x10\xd8\x82\xf4\xa3\xe0\x64\x62\x19\xc0\xb9\x5b\xf3\xc8\x23\xef\x4b\xd5\xd1\x1e\x4b\x5a\x01\xee\xb5\x90\xb6\x46\xbe\x1c\x99\x91\xc9\x11\xb3\xf3\x79\x6a\x25\x14\x0e\xe9\xf7\x13\x24\x04\xa2\xeb\x5b\xea\x48\xda\xca\x0a\x25\x31\xb9\x4f\x29\x76\xd7\xd3\xb1\xac\xf7\x30\x56\x6f\xb9\x85\xcb\x00\x84\x07\xaa\x3a\xec\x2a\xdd\xf3\x5e\x2b\xab\x7e\x6e\x6b\xb6\x88\xe0\xbc\x15\x24\x6d\x06\x0c\x4a\x83\x89\xcf\x64\x1f\xd4\xca\xc4\x6e\x03\x2c\x6a\x54\x72\x05\x96\xd2\x13\x55\xc8\x26\xb9\x25\x7d\x04\xee\x06\x0a\x50\x6f\x25\xc7\x98\x63\x72\xd2\x56\x01\xe7\x86\x31\x8c\xb9\x7d\x06\x57\xd2\xd2\xb3\x65\xf3\xf4\x5b\x42\xf5\xd6\x80\x31\x16\x5b\x65\xc1\xf3\xd7\x3e\x18\x2d\x30\x76\xee\x4c\xdd\xfb\x12\xa4\xb5\xd2\xc5\x60\x32\x1a\x8d\x58\x98\x2a\x67\xc9\x74\xac\x91\x18\x41\xb1\x84\x73\xfb\x81\x8f\x36\xf9\x7e\x27\x49\x98\x31\x56\x1c\x4a\x89\x3a\x96\xba\x99\x41\x8a\xf6\x44\x02\xd0\x64\xb7\x5a\x06\x38\xaa\x1d\xfe\xf1\xd9\x6f\x19\xff\x2d\x2f\x7a\x76\xa9\xab\x29\x8c\x2f\x43\x85\xec\x94\xea\x1c\xb5\x86\x82\xf2\xc5\x9c\xff\x9d\xb1\xbe\xd5\x44\xff\xf0\x41\xd5\xb4\x09\x84\x46\xfd\x08\x6f\x1e\xfb\x4e\x9b\x2d\x19\x8b\xf4\x95\xd8\x3b\xff\xab\x47\x3e\xd0\xa6\x33\x18\xb6\x20\xb9\x1a\x6b\xda\x14\xff\xbf\xd7\x4b\xf1\x8e\xeb\x3a\xe3\x99\x5e\x49\x43\x27\xc4\x8b\xcd\x75\xa6\xb9\xbe\xbb\x57\xb7\xa6\x69\x53\x42\xd2\x93\x73\x07\x91\x20\xf9\x06\x9f\x26\x53\x42\xad\x43\x73\x9d\x69\xd8\xab\xe6\xce\x14\x6f\xd4\xfa\x45\xa9\xf3\x8b\x65\x5e\x19\xfb\x21\x4c\x65\xbc\xa4\xae\xb7\xbb\x2b\x96\x34\x99\xe2\xe5\x23\x12\x7b\xbc\x72\x0e\xe4\xea\x70\xa7\xee\xe3\x63\x74\x0c\x8f\xd8\xaf\x00\x00\x00\xff\xff\x7d\xfb\x4a\xcc\xdb\x07\x00\x00")

func internalTemplatedataCallerTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplatedataCallerTmpl,
		"internal/templatedata/caller.tmpl",
	)
}

func internalTemplatedataCallerTmpl() (*asset, error) {
	bytes, err := internalTemplatedataCallerTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/templatedata/caller.tmpl", size: 2011, mode: os.FileMode(420), modTime: time.Unix(1538664260, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplatedataClientTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x52\x4d\x8f\xd3\x30\x10\xbd\xe7\x57\x3c\x55\x0b\xb4\x55\x71\xef\x2b\x71\x40\x95\xe0\x44\x59\xed\x72\xe1\x84\xbc\xee\x24\xb5\x36\x6b\x67\xed\xc9\x96\xca\xf2\x7f\x47\x89\xd3\x24\x4d\x90\x40\xda\x5e\x1a\xcf\xf8\x7d\xcc\xf8\x85\x70\xa0\x5c\x1b\xc2\x42\x95\x9a\x0c\x2f\xf0\x31\xc6\x2c\x84\x93\xe6\x23\xc4\x17\x5d\x52\x7b\xbc\x29\x6c\xf5\x54\xe0\xf6\x13\xc4\x9d\x54\x4f\xb2\x20\xf1\xd5\x76\x5f\x31\x66\x59\x08\x4e\x9a\x82\x20\x1e\xc8\xbd\x6a\x45\xbe\xa5\x01\x42\xb8\xf1\xaf\xaa\xc5\xed\xe5\x73\x7b\xb5\x29\x6e\xd7\xd8\xb5\x72\xd0\x86\xc9\xe5\x52\x11\xd6\xdb\xd4\xdd\x6e\x3b\x54\x8c\x97\x3b\x1e\x7c\xa4\xbe\x0a\x9f\x34\x3e\x78\xa8\x09\x89\xc8\x00\x3e\x57\x34\x63\xe8\x55\x42\x06\x34\x0e\x3a\xbb\xdf\x88\x8f\xf6\x70\x71\x9b\x5a\x3a\x87\x75\x10\x09\xfa\xc0\x8e\xe4\xb3\x36\x45\x1a\x8d\xdc\x50\x18\x30\x0d\xaa\x9b\x6f\xd9\x97\x00\x65\x0d\xd3\x6f\x16\xbb\xf4\xbf\x19\xb5\x5a\x15\x63\x79\x2e\x33\x66\x6d\x7e\xeb\x10\x0a\xfb\xa3\x99\x49\xdc\xd3\x4b\x4d\x9e\x91\x1e\x23\xc6\x6b\x42\x32\x87\x09\x58\x08\x71\x96\xae\x52\x62\x27\xcb\xf2\x7b\xc5\xda\x9a\x01\xb2\xc2\x32\x84\x2b\xf5\x18\x37\x20\xe7\xac\x5b\xf5\xab\xa0\xd2\xd3\x9b\xe6\xfc\x4f\xf7\xff\x72\x7a\x45\xe3\x2b\x6b\x3c\x0d\x3c\x33\xd3\xa3\x45\x8c\x4f\xb3\xec\x29\x6b\x3c\xbb\x5a\x35\x72\xe3\xf8\xed\xe9\x34\xc9\xcf\x63\xad\xcb\x83\x87\x84\xa1\x13\x7e\x7e\xbe\xbf\xdb\x5d\xa2\x97\x5b\xf7\xd7\x70\x36\x49\xcc\x6b\xa3\xe6\x64\x4b\x85\x6e\xd6\xf6\xb8\x81\xad\xd8\xf7\x1b\xa8\x9c\x65\xfb\x58\xe7\x5d\x37\xed\x62\x35\xcd\x73\x4a\xb1\x23\xae\x9d\xc1\xfb\x5f\x7d\x57\x96\x25\xb9\xe0\xdb\xe7\xbc\xc5\x35\xe1\x9e\x4e\xe9\x9d\x2f\x36\x36\x08\xa1\x72\xda\x70\x8e\xc5\xbb\x97\x05\x12\x47\xf2\x23\x84\x58\x75\x3b\x1b\x56\x38\x7c\x0e\xb5\x3f\x01\x00\x00\xff\xff\xfe\xde\xee\xb5\x40\x04\x00\x00")

func internalTemplatedataClientTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplatedataClientTmpl,
		"internal/templatedata/client.tmpl",
	)
}

func internalTemplatedataClientTmpl() (*asset, error) {
	bytes, err := internalTemplatedataClientTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/templatedata/client.tmpl", size: 1088, mode: os.FileMode(420), modTime: time.Unix(1538664266, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplatedataClient_streamTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\x4f\x6f\x9b\x30\x14\xbf\xf7\x53\xbc\x56\x3d\x40\xd4\x39\xf7\x4d\x3d\x4c\xd5\xb6\xd3\xfe\x28\xd9\xbd\x62\xe6\x41\xac\x80\x4d\x6d\x93\x2e\xb2\xfc\xdd\x27\x8c\x71\x20\x40\xc4\xa2\x4d\xdb\xa9\xee\xeb\x7b\xbf\x3f\x8f\x9f\x5d\x63\x52\xcc\x18\x47\xb8\xa3\x05\x43\xae\xb7\x5a\x62\x52\xde\xc1\x1b\x6b\x6f\x8c\x79\x65\x7a\x07\xe4\x23\x2b\xd0\xfd\x7a\x9f\x8b\x6a\x9f\xc3\xdb\x47\x20\xdf\x12\xba\x4f\x72\x24\x9f\x84\x3f\x59\x7b\x73\x63\x8c\x4c\x78\x8e\x40\xb6\x28\x0f\x8c\xa2\x72\x30\x00\xc6\xdc\xab\x03\x75\x73\x5f\x92\xd2\xb5\x36\xc5\xf5\x0a\x9e\x1c\x29\x28\xc7\x0a\x8c\x6b\x94\x59\xd2\x0c\xae\xd6\x5d\x97\x87\xfc\x8c\x7a\x27\xd2\x0e\xb1\xf9\x03\xcb\x40\x48\x20\x4f\x3d\xdd\x8c\xe7\x2d\x39\xca\x50\xf0\xfd\xeb\x35\x18\x33\x68\xb6\x16\x98\x82\xc4\x93\x37\xa3\x81\x1f\x6a\x85\x29\x30\x0e\x7a\x87\x5e\xbd\xb5\xd6\x8b\x0d\x5d\xc4\x01\xeb\x63\x85\x53\xd0\x01\xcb\xb8\x36\x80\x27\xc1\x35\xfe\xd4\x51\x0c\xb4\x3d\x11\x5f\x39\xf9\x19\x99\xe9\xdc\x02\x6c\x91\xa7\xd1\xca\x98\x5c\x7c\x6f\x08\xc9\x06\x5f\x6a\x54\x1a\xda\x6f\x62\xed\x03\x10\x42\x8e\x89\xac\x28\x69\xc7\xbf\x56\x9a\x09\x1e\x03\x4a\x29\xa4\xa7\x40\x9e\x0e\x17\x78\xbe\xac\x1e\xe1\x06\xe9\x21\x9a\xc1\x1c\x0a\x51\x95\xe0\x0a\x7b\x4a\x1c\x65\xdc\xd9\x2e\x84\x42\xa7\xfe\x1a\x81\x09\x4f\xc7\x5b\x89\xb8\xd0\x23\xe9\x71\x4f\xbb\xe3\x7c\xcf\xd3\x3f\xe3\x61\x28\xcb\x8e\x6a\xa7\xf3\x4c\xac\xcb\xaa\xc0\x12\xb9\x4e\x1a\xe6\xbf\x90\x6d\x17\xc1\xe7\x71\x06\x95\x96\x35\xd5\x21\x80\x5e\xce\xca\x6d\xa3\x92\x42\x8b\x1f\x75\x36\x98\xf1\x06\xdd\x8f\xac\xe6\x14\x22\x0a\xab\x31\x70\x3c\x9f\xe5\x40\x26\x51\xd7\x92\x03\x25\x2d\x2b\x09\x13\x7d\x8e\xc9\xd0\x7b\x53\x17\xf9\x5d\x9e\x24\xbe\xc0\xc5\x1b\x21\x2a\xad\x2e\x5e\x8b\x59\xb5\x1d\x7e\x8b\x41\x08\x89\x27\xbf\xfd\xfc\x45\x5a\x62\xc2\xa5\xf3\x92\xc6\x45\x11\x0d\x1e\x4a\x95\xbb\x5a\xf3\xce\x06\x23\x1b\xa4\xc8\x0e\x18\x71\x7c\x35\x26\x80\x34\x90\xdd\x82\x82\x39\x00\x96\xb9\xf9\xdb\x47\xe0\xac\x08\xb8\x61\x3b\x9c\x15\x8e\xc0\xd7\x6d\xd8\x9d\x7a\x00\xb1\x6f\x68\x4b\x95\x93\x46\xf4\x19\x51\x0f\xff\x56\xec\x67\x80\xcf\x52\x99\x28\xfd\xa1\xf1\x17\x3d\x63\x59\xe9\xe3\x84\xf8\x52\xe5\xf1\x48\x8a\xc3\x73\x8a\x38\x2b\x96\xc7\x39\xbc\x51\xd7\x47\xc6\x61\x44\x0b\xe3\xf2\x1b\xcf\xda\x92\x24\x0d\xde\xbb\xe5\x89\x3a\xbf\x2f\x67\x81\xf2\x71\xe8\xc7\x69\x68\xf2\xdd\x35\x71\xf9\x8f\x62\x3a\x7b\xb7\xfe\x49\x60\x3b\xc9\x33\xa9\x99\xfc\x7f\x33\x75\x3c\xd5\x7e\x05\x00\x00\xff\xff\x68\x4c\x9c\x3a\xdd\x09\x00\x00")

func internalTemplatedataClient_streamTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplatedataClient_streamTmpl,
		"internal/templatedata/client_stream.tmpl",
	)
}

func internalTemplatedataClient_streamTmpl() (*asset, error) {
	bytes, err := internalTemplatedataClient_streamTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/templatedata/client_stream.tmpl", size: 2525, mode: os.FileMode(420), modTime: time.Unix(1538664271, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplatedataFxTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x95\x5f\x6b\xdb\x3c\x14\xc6\xef\xf5\x29\x0e\xa6\x2f\xd8\x25\x55\xe0\xbd\x0c\x8c\xc1\x36\xb2\xf5\xa6\x09\xdb\xee\xc6\x58\x55\xe7\xd8\x11\x75\x25\x4d\x92\x13\x17\xe1\xef\x3e\xf4\x27\x8d\x13\xbb\x25\xbd\x68\xb1\x8f\x8e\x1e\xfd\x74\xce\x79\x1c\xe7\x36\x58\x71\x81\x90\x55\x5d\x06\x37\x7d\x4f\x9c\xdb\x73\xbb\x05\xba\xe4\x0d\x86\xd7\xab\x5a\xaa\xc7\x1a\x16\x1f\x80\xae\x59\xf9\xc8\x6a\xa4\x5f\x65\x7a\xea\x7b\x42\x9c\xd3\x4c\xd4\x08\xf4\x07\xea\x1d\x2f\xd1\x04\x19\xe2\xdc\xfc\x1a\x96\x1d\x94\x0d\x47\x61\x0d\x5c\xcf\x63\xf4\xaa\xea\x3e\x87\x90\x57\x54\x9a\x0b\x5b\x41\xb6\xec\xfe\x33\x19\xd0\xb8\xe0\xf3\xe6\x73\x18\xa4\xf6\xfd\x9a\x69\xf6\x64\x20\xc2\x1a\xb0\x5b\x04\xe5\x43\x68\x51\x1b\x9f\xad\xf1\x6f\xcb\x35\x6e\xc0\x4a\x50\x5a\xee\xf8\x06\x81\x81\x73\x2f\x9a\xc0\x85\x95\xc0\x84\x4f\x5e\x76\xc0\x94\x6a\x78\xc9\x2c\x97\x82\x12\xfb\xac\x70\xf2\x3c\x63\x75\x5b\x5a\x70\x04\xa0\xea\xe8\xad\x20\x04\x20\xd1\x3f\x33\xad\xca\xa4\x4e\x26\x88\xbf\xa3\x69\x1b\x7b\x60\x31\xa7\x30\x3e\x3b\xf1\x5c\x00\x93\xa4\x4e\x61\x56\xad\x1d\xd0\x0c\xb5\x23\xcc\x1d\xee\x4f\x44\xde\x4d\x32\x83\xd6\x70\x51\x87\x5a\xd7\x7c\x87\xa1\x72\x82\x3d\x21\x54\x52\x83\x96\xad\xe5\xa2\xa6\x64\x3e\xf7\x71\x4f\xb4\x8e\x07\xe4\xe1\x1d\xe0\x30\x39\x7d\x4f\xcf\x59\xf2\xcc\xc4\x59\xb9\xf1\x7a\x59\x31\x4b\x5b\x28\xa5\xe1\xa9\xf0\xff\x7f\xae\xbe\xac\xf2\x27\x14\xa6\xdc\x16\x0b\xf8\x26\xf7\xb0\xe7\x4d\x03\x76\xcb\x0d\xec\xa5\x7e\x04\x2e\x60\xf7\xff\x47\x52\xb5\xa2\x1c\xdd\x36\xff\xe3\xcb\xc5\x45\x3d\x03\xa9\xac\xf1\xca\xa1\x61\x4a\x4b\x2b\x1f\xda\x2a\xdd\x7f\xa5\xfc\x4d\x0b\x5f\x01\xd4\x15\x2b\xd1\xf5\xa1\xbe\x1a\x6d\xab\x05\x78\xe9\x5c\x4d\x4d\x46\x31\xd9\x21\xbf\xf5\x65\xf3\x44\x42\x5c\x3f\x34\x6d\x31\xa6\x56\x89\x2b\x52\x53\x4a\x8b\x59\xd8\xd2\x13\xff\x37\x70\x95\xd2\xb2\xc4\x4d\xab\x31\x19\x0b\x20\x5a\x6b\x7d\x8c\x9f\xd9\x2b\x18\xec\xce\xb7\x2f\x3b\x26\x65\x43\xaf\x1d\xc3\xaf\xfb\x8d\xbd\xe5\x37\x9f\xe5\x5c\xf8\x0e\xa0\x8e\x13\x97\x04\x2f\x9b\xf7\x09\x80\x29\x03\x46\xfd\xe1\x49\xe4\x95\x5b\x9c\x7b\xf0\x0c\xd0\xef\x19\x14\xf2\x7d\x80\x6f\x99\x72\xd0\x85\x5f\xbf\xe3\x87\xe2\x25\x04\xf7\xb5\x96\xad\x5a\x64\x21\x5e\x75\xd9\xfd\x99\x61\x87\x87\x5c\x8a\x3e\x09\x0e\xb7\x16\xb0\x53\x58\xda\x50\x7f\x76\xd2\x1b\x2b\xe1\x01\x41\x69\x34\xfe\xf3\xc1\x45\x38\xa0\x94\xc2\x32\x2e\x50\xbf\xcf\xd6\x43\xe2\x7c\xc2\xcc\x27\x0e\x3d\x4d\xbe\xc4\x79\xe3\xb1\x28\x5e\x6d\xc7\xd8\x81\xe3\xa4\x83\x0b\x8f\x2b\x0b\xf8\xd4\xf2\x66\xe3\x5c\x30\x48\xdf\x1f\x57\x72\x95\x4a\x36\x36\x22\x8a\xcd\xe1\x97\x2e\x3d\x1e\x63\xff\x02\x00\x00\xff\xff\x0f\x05\xc5\xd8\x57\x07\x00\x00")

func internalTemplatedataFxTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplatedataFxTmpl,
		"internal/templatedata/fx.tmpl",
	)
}

func internalTemplatedataFxTmpl() (*asset, error) {
	bytes, err := internalTemplatedataFxTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/templatedata/fx.tmpl", size: 1879, mode: os.FileMode(420), modTime: time.Unix(1538668204, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplatedataHandlerTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x54\x5b\x6b\xdb\x30\x18\x7d\xcf\xaf\x38\x0b\xed\xb0\x83\xab\xbe\x17\xfa\x54\x76\x79\xe9\x18\xcd\xde\x83\x26\x7f\x76\x44\x6d\xd9\x91\x94\x34\x41\xe8\xbf\x0f\xc9\xca\xc5\xed\x32\x1a\xd8\x96\x97\x7c\x3a\x58\xe7\x3b\x17\x63\xe7\x4a\xaa\xa4\x22\x4c\x97\x5c\x95\x0d\xe9\x29\x6e\xbc\x9f\x38\xf7\x22\xed\x12\xec\xb3\x6c\x28\x1e\xaf\xea\xae\x7f\xae\x71\x77\x0f\xf6\x9d\x8b\x67\x5e\x13\xfb\xd2\xa5\xc9\xfb\xc9\xc4\x39\xcd\x55\x4d\x60\x73\xd2\x1b\x29\xc8\x44\x1a\xc0\xb9\x2b\xb3\x11\xf1\xde\x37\xde\xd2\x1e\x4b\xcb\x02\xde\x6b\xa9\x6c\x85\xe9\xe2\xda\x5c\x9b\x29\xe2\xe3\xd3\xaf\x49\x4c\xa0\x0e\x17\x6e\x67\x48\x10\x64\xdb\x37\xd4\x92\xb2\xdc\xca\x4e\x61\x76\x3b\x3c\x63\x77\x3d\x9d\x30\x7b\x0f\x63\xf5\x5a\x58\xb8\x09\x00\x18\xd2\x1b\xd2\x49\x8e\xf7\xf3\x78\x9c\x00\x89\x3f\x89\x7f\x24\xbb\xec\x4a\x13\x55\x06\x58\x56\xe0\xaa\x04\x7b\x68\x24\x29\x3b\xb7\x9a\x78\x2b\x55\x3d\xb8\x24\x7d\x04\x6e\xd2\x15\xa0\x5a\x2b\x81\x6c\x89\xd9\xa9\x96\x1c\xce\x25\xff\x99\xc1\x6c\xc7\x75\x2f\x7a\xdd\xd9\xee\xe7\xba\x1a\x71\xe5\x20\xad\x3b\x9d\x44\x87\x9f\x26\xbb\xd6\x0a\x4b\x36\x38\x60\x47\xa2\x8f\x0b\xe7\x46\x97\xbd\x77\x26\x0e\x77\x30\x3e\x4f\x0c\x7b\x2b\xd4\x18\x82\xac\xde\x7a\xf9\x97\xd2\x4d\x11\xc0\xd0\xf2\x7b\xf5\xc7\xe3\xa9\x7e\x04\xd1\x81\xe4\xc3\x3d\x94\x6c\x4e\xe8\x0f\xd9\x90\xd6\x07\xd0\xbf\x0e\xce\xb0\x39\xa9\x32\xd3\x64\xce\x26\xf2\x3f\xcb\x14\x9b\x43\x24\x86\x3d\x91\x20\xb9\xa1\x4c\xd1\x8b\x73\xec\x89\x56\x6b\x32\xf6\xc7\xae\x27\xff\x37\xec\xaf\x0a\x2c\xc2\x9e\xb0\x94\x65\xb3\x3f\x6e\xd0\xb4\xc2\xfd\xd9\x0d\x63\x8b\x0f\xdc\xd8\x4f\xc1\x58\xb6\xa0\xb6\xb7\xbb\xd7\xc4\x45\xdc\x98\x9f\xaf\xe4\x37\xef\x42\x54\xfb\xbe\x17\x62\x54\xdf\x05\x55\x09\xbb\x85\xe8\x94\xa5\xad\x65\x0f\xc3\x7f\x81\x16\xd1\x16\x7b\x24\x63\x78\x4d\x39\xb2\xd1\xb9\x18\x1a\xcc\x47\x15\xee\x73\x6d\x63\xa8\x75\x17\x5c\x63\x1f\x01\x86\x0f\xe5\x45\xf1\x2a\xd9\x14\x17\x67\xdc\x5e\x16\xb0\xb0\xdb\xd0\xcb\xea\x4d\x8a\xaa\x3c\x7c\xa9\xf7\xf3\x71\x3a\x8e\x47\xec\x57\x00\x00\x00\xff\xff\x40\x47\x1d\x2e\x32\x06\x00\x00")

func internalTemplatedataHandlerTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplatedataHandlerTmpl,
		"internal/templatedata/handler.tmpl",
	)
}

func internalTemplatedataHandlerTmpl() (*asset, error) {
	bytes, err := internalTemplatedataHandlerTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/templatedata/handler.tmpl", size: 1586, mode: os.FileMode(420), modTime: time.Unix(1538664278, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplatedataParametersTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xc1\x6a\xc3\x30\x0c\x86\xef\x79\x8a\x9f\x52\x46\x5b\x58\x7a\x1f\xf4\xb8\xed\xb4\x51\xb6\xdd\x87\x71\xd4\x34\x74\xb1\x3d\xdb\x49\x09\xc2\xef\x3e\xe2\xc4\x59\xd6\x96\xdd\x64\xf1\xeb\xb3\x3e\x31\x17\x74\xa8\x14\x61\x61\x84\x15\x35\x79\xb2\x6e\x81\xfb\x10\x32\xe6\x73\xe5\x8f\xc8\x9f\xaa\x2f\x8a\xcf\x65\xa9\xcd\xa9\xc4\xc3\x0e\xf9\x5e\xc8\x93\x28\x29\x7f\xd6\x63\x15\x42\x96\x31\x5b\xa1\x4a\x42\xfe\x4e\xb6\xad\x24\xb9\x88\x01\x98\x97\xae\x95\x71\xee\x55\xd4\x31\xda\x37\xb7\x1b\xec\xd3\x97\x90\x5a\x39\x6f\x1b\xe9\xb5\x75\xd8\x6c\x53\x66\x04\xbe\x90\x3f\xea\x22\xf1\x80\x43\xa3\x24\x14\x9d\x99\xf3\x37\xfa\x6e\xc8\xf9\x8f\xce\x50\x08\xab\x35\xc0\xb0\xe4\x1b\xab\x70\xc7\x5c\xea\xbe\x8f\x14\xc2\x60\x10\x02\x07\xe0\x06\xc9\x19\xad\x1c\x4d\xa8\xdb\xa4\x21\x34\x47\x0d\x8e\xa4\x8a\xb8\x5f\x72\x7b\xac\x8d\xef\x30\x1d\x15\xbe\x33\x34\x57\x1b\x8e\x3b\x9a\x8d\x5e\xad\xb0\x58\xc5\x6a\x52\x9f\x9c\x81\x4f\xea\x91\x97\xce\xc0\xee\x7f\xd5\xeb\xe9\xb9\xe7\xe5\xf4\x95\xde\xb8\x4e\xd2\xeb\x5f\xeb\x3f\xc2\x33\xf5\xa9\xfc\xed\xfd\x04\x00\x00\xff\xff\xec\x5b\x6a\x29\x60\x02\x00\x00")

func internalTemplatedataParametersTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplatedataParametersTmpl,
		"internal/templatedata/parameters.tmpl",
	)
}

func internalTemplatedataParametersTmpl() (*asset, error) {
	bytes, err := internalTemplatedataParametersTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/templatedata/parameters.tmpl", size: 608, mode: os.FileMode(420), modTime: time.Unix(1538664285, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplatedataServerTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x54\x4d\x6f\xd4\x3c\x10\xbe\xe7\x57\x8c\x56\x7d\x5f\x76\xab\xe2\xbd\x47\xe2\x00\x2b\x01\x17\xaa\x55\x0b\x07\x84\x10\x32\xc9\x24\x6b\x75\x6b\xa7\x63\xa7\xa5\xb2\xfc\xdf\x91\x63\x27\xce\x47\xab\xae\x04\x62\x2f\x6b\xcf\x3c\xcf\xf8\x99\xaf\x58\x5b\x62\x25\x24\xc2\x4a\x23\xdd\x23\xad\xe0\xb5\x73\x99\xb5\x0f\xc2\x1c\x80\xbd\x17\x47\xec\xae\x67\xb5\x6a\x6e\x6a\xc8\xdf\x00\xdb\xf3\xe2\x86\xd7\xc8\x3e\xa8\x78\x72\x2e\xcb\xac\x25\x2e\x6b\x04\x76\x8d\x74\x2f\x0a\xd4\x5d\x18\x00\x6b\xcf\xf4\x7d\xd1\xf1\x2e\xf9\x6d\x07\xf5\xc6\xed\x39\x44\x20\x08\x69\x90\x2a\x5e\x20\x9c\x6f\x83\x7b\xbb\x8d\x34\xe7\xae\x3b\x4d\x20\x34\x98\x03\x0e\x56\xd0\x81\xfb\x4a\x83\x8e\x80\x3e\x08\xcb\x00\xcc\x63\x83\x8b\x08\xc3\x2b\x36\x03\xf0\x12\xa2\xde\x4f\x68\x0e\xaa\xec\xe5\x06\x97\xa8\x40\x11\xb0\xdd\x51\xa0\x34\xd7\x86\x90\xdf\x0a\x59\x87\xdc\x90\x92\x21\x71\x3c\x2b\x26\xb8\x1e\x4c\x31\x94\x54\x66\x19\x6b\x4c\xf5\xbf\x73\x6b\x6b\xf5\xd9\x0b\x67\x57\x78\xd7\xa2\x36\x10\x4a\xee\xdc\xc5\x24\x20\xca\x72\x46\xb6\x76\x22\x6c\x4c\xd8\x8c\x14\xcc\xc4\x3b\x07\xeb\x25\x13\x90\x48\x91\xa7\xe1\x51\xa3\x73\xe1\x1e\x9e\x1d\x15\xc8\x3b\x5f\xce\xbe\x50\xd2\xe0\x2f\xc3\x76\xe1\x7f\x9c\xc7\x49\xe9\x6e\x60\x3d\xc1\xe9\x46\x49\x8d\x09\x18\xc5\x66\x4f\x95\x66\x7c\x4b\x33\xb7\x27\x55\x60\xd9\x12\x7a\x6d\xda\x50\x5b\x18\xa1\xe4\x78\xf0\xde\xb5\xe2\x58\xf6\xb3\x33\xc0\x75\xc2\x87\x49\xfc\xfa\xf6\x6a\xbf\x83\x26\xf9\x2b\x45\x4f\x8e\xa8\x9f\xc7\xaa\x95\xc5\x73\x81\xd7\x7a\x36\xa9\x1b\xf8\xf6\xfd\x91\x53\x53\xb0\x24\x36\x8c\xec\xc1\x6f\xd1\xff\x3f\x7a\xf8\x47\x2e\xcb\x23\x92\x0d\x1b\x90\x83\x0e\x89\x13\x9a\x96\x24\x74\x21\x1a\x52\x46\xfd\x6c\x2b\x36\x7a\x2f\x56\xeb\x39\xff\x9e\x13\xbf\xd5\x76\xe8\x41\xdc\xd2\x1c\xac\x6d\x48\x48\x53\xc1\xea\xbf\xbb\x15\x04\x09\xa9\x55\x5f\x24\xa7\xc7\xbc\x97\x3e\xc4\xed\xcc\xcf\x07\x4f\x6b\xd8\x7a\x60\xbf\x8a\x6c\x3e\xe0\x93\x4d\x09\x28\x3f\x6d\x73\x51\x71\x04\x2f\x26\xf0\x58\xa6\x7c\x96\xf1\x25\x3e\x74\xe2\xfa\x2a\x4e\x38\xf3\xf2\x8c\x91\xcb\x1c\xc6\xef\xe4\x70\x60\xc3\x2e\x5c\x2c\x40\x3b\x42\x6e\x30\x07\x89\x0f\x7d\x1b\x07\x74\xdc\x83\xf5\x66\x4e\x9b\xc5\x99\x5c\x5f\xf8\x38\x8c\xdc\x61\xc5\x97\x2d\x0a\xf6\x53\x7a\xa4\x3b\xe4\x3f\x6e\x52\x90\x77\x52\x97\x26\xd0\x3f\x68\xd3\xdf\xa8\x77\x3c\x6c\xba\xaf\x4f\xc2\xa5\x63\xb2\xfd\x0e\x00\x00\xff\xff\xba\x17\x23\xcb\x81\x07\x00\x00")

func internalTemplatedataServerTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplatedataServerTmpl,
		"internal/templatedata/server.tmpl",
	)
}

func internalTemplatedataServerTmpl() (*asset, error) {
	bytes, err := internalTemplatedataServerTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/templatedata/server.tmpl", size: 1921, mode: os.FileMode(420), modTime: time.Unix(1538664290, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplatedataServer_streamTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\x4d\x6f\xdb\x30\x0c\xbd\xf7\x57\xb0\x45\x0f\x76\xd0\x29\xf7\x01\x3d\x05\xdb\x4e\xfb\x40\xb2\x7b\xe1\x39\xb4\x22\xc4\x96\x5c\x49\x4e\x17\x08\xfa\xef\x83\x68\x59\x89\x6b\x3b\xe8\x65\xa7\x28\x14\xf9\xde\xa3\x1e\x69\xe7\xf6\x58\x09\x89\xf0\x60\x50\x9f\x50\xef\xac\xc6\xa2\x79\x80\x4f\xde\xdf\x39\xf7\x26\xec\x01\xd8\x57\x51\x23\xfd\x7d\xe4\xaa\x3d\x72\xf8\xfc\x0c\xec\x57\x51\x1e\x0b\x8e\xec\x9b\x8a\x27\xef\xef\xee\x9c\xd3\x85\xe4\x08\x6c\x87\xfa\x24\x4a\x34\x04\x03\xe0\xdc\xa3\x39\x95\x54\xf7\xa3\x68\x28\x35\x04\xd7\x2b\xd8\x11\x29\x18\x62\x05\x21\x2d\xea\xaa\x08\x85\xab\xf5\x90\x15\x21\xbf\xa3\x3d\xa8\xfd\x80\x18\x2e\x44\x05\x4a\x03\xdb\xd4\x02\xa5\xed\x75\x0b\xc9\x7b\xf2\xa1\x11\x21\x79\xcc\x5f\xaf\xc1\xb9\xd1\x9d\xf7\x20\x0c\x14\x91\x3c\x94\x26\x7e\xe8\x0c\xee\x41\x48\xb0\x07\x8c\xea\xbd\xf7\x51\x6c\xca\x62\x04\x6c\xcf\x2d\xce\x41\x27\x2c\x47\x69\x00\x1b\x25\x2d\xfe\xb5\x59\x0e\x65\x7f\x62\x31\x72\xe9\x67\xd2\xcc\xd0\x2d\xc0\x16\xcb\x53\xc6\x18\x3b\x17\xba\x2d\x59\x9f\xf1\xb3\xb5\x42\xc9\x1c\xb2\x95\x73\x5c\xfd\x0e\x42\xd8\x16\x5f\x3b\x34\x16\x7a\xaf\xbc\x7f\x02\xd4\x5a\xe9\x3c\x92\xa0\xdc\x8f\x9f\xf0\xfd\x73\x5d\x51\xee\x50\xee\xc7\xd0\xa6\x55\xd2\xe0\x15\xf6\x82\x20\xa2\x9c\x61\xf4\x93\xd8\xe5\xbc\x30\x12\x4d\x5b\x63\x83\xd2\x16\x01\xf9\x3f\xcc\x05\xd9\xf7\x32\xf5\xcf\x58\xdd\x95\x36\x99\x17\xe5\xac\xa8\xdb\x56\x2b\xab\xfe\x74\xd5\xa8\x26\x36\x48\x3f\x55\x27\x4b\xc8\x0c\xac\xa6\xc0\xf9\xf2\x1c\x24\x32\x8d\xb6\xd3\x12\x0c\xeb\x59\x59\xaa\xb8\xe6\x98\x1d\x98\xd8\xd4\x4d\x7e\x9a\x24\xd5\x5a\xb3\xe4\xde\x47\xc6\x29\x69\x6d\x0c\xa7\x58\xd8\xee\x24\x78\x8b\x25\x8a\x13\x66\x12\xdf\x9c\x1b\x30\x02\x60\x00\x08\xd4\x8c\xb1\x3c\x02\x88\x8a\xca\xef\x9f\x41\x8a\x3a\xc1\xa6\x47\x90\xa2\x26\xfc\x18\xf7\xe9\x89\x5e\x9f\x40\x1d\x03\x6b\x63\x38\x0b\x92\xc7\x3c\x57\xf0\xf7\xea\xb8\x80\x3b\x76\x73\x53\x18\xfb\x25\x74\x97\xbd\x60\xd3\xda\xf3\x54\x7a\x63\x78\x3e\x11\x42\x70\xa4\x47\x8a\x7a\x76\xcc\x97\xb7\xed\x23\x7e\xd1\x1a\xea\xf0\x4d\xbc\xb9\x8a\xb7\x1c\x25\xcf\x16\xc7\x6b\x20\x78\x67\xcd\x42\x17\xb3\xbb\x3b\x77\xbc\xc4\xfe\x05\x00\x00\xff\xff\xaa\xda\x09\xcd\x65\x06\x00\x00")

func internalTemplatedataServer_streamTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplatedataServer_streamTmpl,
		"internal/templatedata/server_stream.tmpl",
	)
}

func internalTemplatedataServer_streamTmpl() (*asset, error) {
	bytes, err := internalTemplatedataServer_streamTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/templatedata/server_stream.tmpl", size: 1637, mode: os.FileMode(420), modTime: time.Unix(1538664297, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"internal/templatedata/base.tmpl": internalTemplatedataBaseTmpl,
	"internal/templatedata/bindata.go": internalTemplatedataBindataGo,
	"internal/templatedata/caller.tmpl": internalTemplatedataCallerTmpl,
	"internal/templatedata/client.tmpl": internalTemplatedataClientTmpl,
	"internal/templatedata/client_stream.tmpl": internalTemplatedataClient_streamTmpl,
	"internal/templatedata/fx.tmpl": internalTemplatedataFxTmpl,
	"internal/templatedata/handler.tmpl": internalTemplatedataHandlerTmpl,
	"internal/templatedata/parameters.tmpl": internalTemplatedataParametersTmpl,
	"internal/templatedata/server.tmpl": internalTemplatedataServerTmpl,
	"internal/templatedata/server_stream.tmpl": internalTemplatedataServer_streamTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"internal": &bintree{nil, map[string]*bintree{
		"templatedata": &bintree{nil, map[string]*bintree{
			"base.tmpl": &bintree{internalTemplatedataBaseTmpl, map[string]*bintree{}},
			"bindata.go": &bintree{internalTemplatedataBindataGo, map[string]*bintree{}},
			"caller.tmpl": &bintree{internalTemplatedataCallerTmpl, map[string]*bintree{}},
			"client.tmpl": &bintree{internalTemplatedataClientTmpl, map[string]*bintree{}},
			"client_stream.tmpl": &bintree{internalTemplatedataClient_streamTmpl, map[string]*bintree{}},
			"fx.tmpl": &bintree{internalTemplatedataFxTmpl, map[string]*bintree{}},
			"handler.tmpl": &bintree{internalTemplatedataHandlerTmpl, map[string]*bintree{}},
			"parameters.tmpl": &bintree{internalTemplatedataParametersTmpl, map[string]*bintree{}},
			"server.tmpl": &bintree{internalTemplatedataServerTmpl, map[string]*bintree{}},
			"server_stream.tmpl": &bintree{internalTemplatedataServer_streamTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

