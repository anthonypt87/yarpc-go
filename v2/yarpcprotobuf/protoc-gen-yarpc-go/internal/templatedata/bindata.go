// Code generated by go-bindata.
// sources:
// internal/templatedata/base.tmpl
// internal/templatedata/bindata.go
// internal/templatedata/caller.tmpl
// internal/templatedata/client.tmpl
// internal/templatedata/client_stream.tmpl
// internal/templatedata/fx.tmpl
// internal/templatedata/handler.tmpl
// internal/templatedata/parameters.tmpl
// internal/templatedata/server.tmpl
// internal/templatedata/server_stream.tmpl
// DO NOT EDIT!

package templatedata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _internalTemplatedataBaseTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8c\x4d\x4f\xf3\x30\x10\x84\xef\xfe\x15\xf3\x46\x3d\xbc\x48\x24\xb9\x57\xe2\x44\x01\xf5\xd2\x56\xa2\x77\xb4\x24\xdb\xd4\xc2\xb1\xad\xb5\xa9\xa8\x2c\xff\x77\x44\xdd\xf2\x21\x05\x6e\xbb\xf3\xcc\x33\x6d\x8b\x5b\xd7\x33\x06\xb6\x2c\x14\xb9\xc7\xf3\x11\x5e\x5c\x74\x5d\x3d\xb0\xad\x8f\x24\xbe\xab\x07\xa7\xda\x16\xc1\xbd\x4a\xc7\x73\xa4\xd4\xdc\x6b\xc3\xcd\x8a\x46\xce\xf9\x83\x2c\xd6\x58\xad\xb7\xb8\x5b\x2c\xb7\xff\x94\xf2\xd4\xbd\xd0\xc0\x9f\xbd\x4d\xf9\x9b\x07\x77\xbe\x72\x56\x2a\x25\xbd\x43\xe1\x8f\x2c\x07\xdd\x71\x40\x9d\xb3\x02\xf4\xe8\x9d\x44\xfc\x57\x00\x90\x92\x90\x1d\x18\xb3\x92\x6e\x28\xee\xaf\x31\x23\xa3\x29\x60\x7e\x83\x66\x79\x8a\x2f\x6a\x31\x0a\xce\x19\x55\x4a\xdf\xbc\x9c\xab\xf3\x24\xdb\xfe\x2c\x5c\xa9\xaf\x4f\xa5\x14\x79\xf4\x86\x22\xa3\xea\x8c\x66\x1b\x2b\x34\x27\xf4\x83\x90\x31\x2c\x93\xe4\xe4\x3c\x85\x28\x4c\xe3\x54\x21\xb0\x1c\xa6\xd5\x3d\xd9\xfe\x97\xd5\x22\xfd\xb1\xba\x7b\x9b\x4a\x3d\x09\x8d\x1c\x59\xc2\x85\xbe\x07\x00\x00\xff\xff\x23\xa7\xdd\x95\xeb\x01\x00\x00")

func internalTemplatedataBaseTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplatedataBaseTmpl,
		"internal/templatedata/base.tmpl",
	)
}

func internalTemplatedataBaseTmpl() (*asset, error) {
	bytes, err := internalTemplatedataBaseTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/templatedata/base.tmpl", size: 491, mode: os.FileMode(420), modTime: time.Unix(1538672550, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplatedataBindataGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func internalTemplatedataBindataGoBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplatedataBindataGo,
		"internal/templatedata/bindata.go",
	)
}

func internalTemplatedataBindataGo() (*asset, error) {
	bytes, err := internalTemplatedataBindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/templatedata/bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1538672850, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplatedataCallerTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x55\xcd\x6e\xdb\x3c\x10\xbc\xeb\x29\x26\x46\xbe\x0f\x96\xa1\x30\x77\x17\x3e\x19\x6d\x4f\xfd\x41\xdd\x7b\xa0\xca\x2b\x85\xb0\x44\xca\x24\xdd\xc4\x58\xf0\xdd\x0b\x92\x8a\x65\xd7\x4e\x4e\x0d\x82\xa2\x27\xaf\x56\x3b\x3b\x33\xbb\xa4\xc5\xbc\xa6\x5a\x2a\xc2\xa4\x2a\xdb\x96\xcc\x04\x37\xde\x67\xcc\x0f\xd2\xdd\x43\x7c\x90\x2d\xc5\xc7\xeb\x46\xf7\x9b\x06\xf3\x05\xc4\xd7\xb2\xda\x94\x0d\x89\x8f\x7a\x88\xbc\xcf\x32\x66\x53\xaa\x86\x20\x56\x64\x7e\xca\x8a\x6c\x6c\x03\x30\x5f\xa7\xbe\x11\xba\x8c\x61\xa8\x0f\x6f\x6e\x67\x48\x09\xc8\xae\x6f\xa9\x23\xe5\x4a\x27\xb5\xc2\xec\x36\x95\xb8\x7d\x4f\x63\x07\xef\x61\x9d\xd9\x55\x0e\x9c\x01\x08\x0f\x54\x76\xd8\x97\xa6\xaf\x7a\xa3\x9d\xfe\xb1\xab\xc5\x2a\x26\x97\xad\x24\xe5\x32\x60\x60\x1a\xb4\x7d\x22\x77\xaf\xd7\x36\x0a\x0b\x69\x59\xa3\x54\x6b\x88\x54\x9e\xa0\x52\x35\xc9\x04\x99\x31\x71\x33\x40\x80\x7a\xa7\x2a\x4c\x2b\xcc\x8e\x64\xe5\x60\x16\x9f\xcb\x8e\xbc\x9f\x56\xee\x11\x95\x56\x8e\x1e\x9d\x58\xa6\xdf\x02\xba\x77\x16\x42\x88\x28\x35\x0e\xe1\x4b\x1f\x8c\xe6\x98\x32\x9f\x48\xf6\xbe\x00\x19\xa3\x4d\x3e\x98\x8c\x46\x63\x2e\x0c\xb0\x12\xc9\x74\xec\x91\x70\x81\xb1\x00\x73\x6f\xa4\x72\x35\x26\xff\x6d\x27\x18\xc4\x24\x62\x21\x44\x7e\x68\x25\xeb\xd8\xea\x6a\x01\x25\xdb\x23\x0a\xc0\x90\xdb\x19\x15\xd2\x91\xed\xf0\xc6\x67\xbf\x55\xfc\x7f\x77\xa6\x99\x93\xaa\x39\xac\x2f\x42\x87\xec\x18\xca\x4c\xad\xa5\xc0\x7c\x36\xe7\x7f\x67\xac\xaf\x35\xd1\x3f\x7c\x50\x0d\x6d\x03\xa0\xd1\xdf\xc3\xcd\x13\xdf\x68\xbb\x23\xeb\x90\x2e\xff\x93\xf3\xbf\x7a\xe4\x03\x6c\xbe\x80\x15\x2b\x52\xeb\xa9\xa1\x6d\xfe\xee\xad\x2e\xc5\x1b\xae\xeb\x04\x67\x7b\xad\x2c\x1d\x01\xcf\x36\xd7\xd9\xe6\xf2\xee\x5e\xdc\x9a\xa1\x6d\x01\x45\x0f\xcc\x07\x92\x40\xf9\x0a\x7f\x4d\xb6\x80\xde\x04\x71\x9d\x6d\xc4\x8b\xe6\x4e\x18\xaf\xf4\xe6\x59\xaa\xd3\x0f\xcb\xb2\xb4\xee\x7d\x98\xca\xf4\x8e\xba\xde\xed\x2f\x58\x32\x64\xf3\xe7\x8f\x48\xd4\x78\xe1\x1c\xa8\xf5\xe1\x53\xf9\x14\x8f\xd1\x18\x8e\xb9\x5f\x01\x00\x00\xff\xff\xb1\xf1\x7a\x61\xb2\x07\x00\x00")

func internalTemplatedataCallerTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplatedataCallerTmpl,
		"internal/templatedata/caller.tmpl",
	)
}

func internalTemplatedataCallerTmpl() (*asset, error) {
	bytes, err := internalTemplatedataCallerTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/templatedata/caller.tmpl", size: 1970, mode: os.FileMode(420), modTime: time.Unix(1538672842, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplatedataClientTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x52\xcb\x6e\xdb\x30\x10\xbc\xeb\x2b\x06\x46\x1f\xb6\xe1\xd2\xf7\x00\x3d\x14\x06\xd2\x53\xdd\x34\xe9\xa5\x47\x86\x5e\xc9\x44\x14\x52\x21\xa9\xba\xc1\x82\xff\x5e\x50\x94\xf5\xb0\x0b\xb4\x40\x75\x11\xb9\x8b\x9d\x99\x1d\x0e\xf3\x81\x4a\x6d\x08\x0b\x55\x6b\x32\x61\x81\x0f\x31\x16\xcc\x27\x1d\x8e\x10\xb7\xba\xa6\xee\xfa\xa6\xb2\xcd\x53\x85\x9b\x8f\x10\x77\x52\x3d\xc9\x8a\xc4\x67\xdb\x9f\x62\x2c\x0a\x66\x27\x4d\x45\x10\x0f\xe4\x7e\x6a\x45\xbe\x83\x29\x00\xe6\xed\x1a\xbb\x0e\x1a\xda\x04\x72\xa5\x54\x84\xf5\x36\x77\xb7\x5b\x30\x8b\xdc\x8e\x11\xda\x23\x1c\x29\x95\xf6\xf2\x99\x62\x84\xcf\x68\xef\x3d\xd4\x05\x84\x28\x80\xf0\xda\xd0\x7c\x7e\x20\xe0\x02\x48\xe4\xbd\xaa\x2f\x14\x8e\xf6\x90\x45\x01\xb9\xa5\x4b\x58\x87\x7e\xf8\x21\x38\x92\xcf\xda\x54\x79\x03\x72\x63\x61\x9c\xc1\xa8\x6c\x39\x94\x00\x65\x4d\xa0\x5f\x41\xec\xf2\x7f\x33\x69\x75\x2c\xc6\x86\x6b\x9a\x29\x6a\xfa\xd6\xcc\x95\xfd\x9e\x16\x12\xf7\xf4\xd2\x92\x0f\xc8\x9e\xc7\x38\x07\x24\x73\xb8\x18\x16\x42\xbc\x4a\xd7\x28\xb1\x93\x75\xfd\xb5\x09\xda\x9a\x71\x64\x85\x25\xb3\xc8\xbc\x67\x9f\x36\x20\xe7\xac\x5b\x0d\x56\x50\xed\xe9\xbf\xf6\xfc\x47\xf5\x7f\x53\x3a\x83\xf1\x8d\x35\x9e\x46\x9c\x2b\xd1\x13\x23\xa6\xb7\xab\xd8\x29\x6b\x7c\x70\xad\x4a\x74\xd3\xe4\xed\xe9\x34\x0d\xcf\x63\xab\xeb\x83\x87\x84\xa1\x13\x7e\x7c\xba\xbf\xdb\x9d\x43\x57\x5a\xf7\xe7\x5c\xa6\x10\x96\xad\x51\x17\x50\x4b\x85\x7e\xcd\xae\xb0\x81\x6d\x82\x1f\x96\x6f\x9c\x0d\xf6\xb1\x2d\xfb\x6e\xb6\x61\x35\xcb\x71\x4e\xaf\xa3\xd0\x3a\x83\x77\xa9\x23\xeb\x9a\x5c\x8c\xec\xbb\x87\xbc\xc1\x1c\x69\x4f\xa7\xe9\x0b\x2f\xd5\x06\xcc\x8d\xd3\x26\x94\x58\xbc\x7d\x59\x40\xdc\x7e\xdb\x27\x0b\x93\x10\x21\xc4\xaa\xf7\x69\xb4\x6d\x3c\x8e\xb5\xdf\x01\x00\x00\xff\xff\xad\x6f\x37\xdb\x1b\x04\x00\x00")

func internalTemplatedataClientTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplatedataClientTmpl,
		"internal/templatedata/client.tmpl",
	)
}

func internalTemplatedataClientTmpl() (*asset, error) {
	bytes, err := internalTemplatedataClientTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/templatedata/client.tmpl", size: 1051, mode: os.FileMode(420), modTime: time.Unix(1538672842, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplatedataClient_streamTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\x4d\x8f\x9b\x3c\x10\xbe\xef\xaf\x98\x5d\xed\x01\xa2\x7d\x9d\xfb\x5b\xed\xa1\x5a\xb5\x3d\x55\xad\x92\xde\x23\x6a\x06\x62\x05\x6c\xd6\x36\xd9\x46\x16\xff\xbd\xb2\x31\x0e\x04\x88\x68\xd4\xaa\x3d\xc5\x19\x3c\xcf\xc7\xf0\xd8\x18\x93\x62\xc6\x38\xc2\x03\x2d\x18\x72\xbd\x53\x5a\x62\x52\x3e\xc0\x7f\x4d\x73\x67\xcc\x1b\xd3\x7b\x20\x1f\x59\x81\xee\xef\x63\x2e\xaa\x43\x0e\xff\x3f\x03\xf9\x9a\xd0\x43\x92\x23\xf9\x24\xfc\xaa\x69\xee\xee\x8c\x91\x09\xcf\x11\xc8\x16\xe5\x91\x51\x54\x0e\x06\xc0\x98\xc7\x16\xde\xb5\xbe\xb8\xa5\xdd\x6f\x9f\xac\x57\xd0\x16\xa0\xa5\x06\xc6\x35\xca\x2c\xb1\xdd\xab\x75\xb7\xcb\xe3\x7e\x46\xbd\x17\x69\x07\x6b\x1f\xb0\x0c\x84\xec\x30\xb7\x0e\x81\xf1\xbc\x55\x80\x32\x14\xfc\xfe\xf5\x1a\x8c\x21\x6d\xb5\x93\x01\x4c\x41\xe2\xc9\x6d\x6b\xe0\x87\x5a\x61\x0a\x8c\x83\xde\xe3\xd9\x82\x6d\xe8\x76\x10\x07\xaa\x4f\x15\x4e\xc1\x06\x1c\xe3\xb6\x01\xbc\x08\xae\xf1\x87\x8e\x62\xa0\xed\x8a\xf8\xca\xd9\xcb\xc8\x48\xe7\x14\x60\x8b\x3c\x8d\x56\xc6\xe4\xe2\x9b\x25\x24\x1b\x7c\xad\x51\x69\x68\x5f\x4a\xd3\x3c\x01\x21\xe4\x94\xc8\x8a\x7a\x25\x5f\x2a\xcd\x04\x8f\x01\xa5\x14\xd2\x53\x20\x4f\x87\xc3\xbb\x1c\x54\x8f\x70\x83\xf4\x18\xcd\x60\x0e\x85\xa8\x4a\x70\x85\x3d\x25\x8e\x32\xee\x6c\x17\x42\xa1\x53\x7f\x8b\xc0\x84\xa7\xe3\xa9\x44\x5c\xe8\x91\xf4\xb8\xa7\xdd\x71\xbe\xe7\xe9\xef\xf1\x30\x94\xd5\x8c\x6a\xe7\xf5\x4c\xa4\xcb\xaa\xc0\x12\xb9\x4e\x2c\xf3\x1f\xc8\xb5\x8b\xe0\x6e\x9c\x41\xa5\x65\x4d\x75\x08\xa0\x97\xb3\x72\xd3\xa8\xa4\xd0\xe2\x7b\x9d\x0d\x7a\xbc\x41\xf7\x93\xd5\x9c\x42\x44\x61\x35\x06\x8e\xe7\xb3\x1c\xc8\x24\xea\x5a\x72\xa0\xa4\x65\x25\xa1\xa3\xcf\x31\x19\x7a\x6f\xea\x2a\xbf\xcb\x93\xc4\x57\xb8\x7a\x22\x44\xa5\xd5\xd5\x63\x31\xab\xb6\xc3\x6f\x31\x08\x21\xf1\xe4\xbb\x9f\x3f\x48\x4b\x4c\xb8\x74\x5e\xd3\xb8\x28\xa2\xc1\x43\xa9\x72\x57\xb3\xb7\x6c\x30\xb2\x41\x8a\xec\x88\x11\xc7\x37\x63\x02\x88\x85\xec\x06\x14\xcc\x01\xb0\xcc\xf5\xdf\x3f\x03\x67\x45\xc0\x0d\xd3\xe1\xac\x70\x04\xbe\xde\x84\xd9\xa9\x27\x10\x07\x4b\x5b\xaa\x9c\x58\xd1\x17\x44\x3d\xfc\x7b\x71\x98\x01\x1e\xa6\xf2\x25\x51\xfa\x83\xf5\x17\xed\xb0\xac\xf4\x69\x42\x7c\xa9\xf2\x78\x24\xc5\xe1\x39\x45\x9c\x15\xcb\xe3\x1c\xee\xa8\xdb\x23\xe3\x30\xa2\x85\x71\xf9\x85\x6b\x6d\x49\x92\x06\xf7\xdd\xf2\x44\x5d\x9e\x97\x8b\x40\xf9\x38\xf4\xe3\x34\x34\xf9\xee\x96\xb8\xfc\x43\x31\x9d\x3d\x5b\x7f\x25\xb0\x9d\xe4\x99\xd4\x4c\x7e\x6f\xa6\x96\xe7\xda\xcf\x00\x00\x00\xff\xff\x42\x72\x15\xab\xdf\x09\x00\x00")

func internalTemplatedataClient_streamTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplatedataClient_streamTmpl,
		"internal/templatedata/client_stream.tmpl",
	)
}

func internalTemplatedataClient_streamTmpl() (*asset, error) {
	bytes, err := internalTemplatedataClient_streamTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/templatedata/client_stream.tmpl", size: 2527, mode: os.FileMode(420), modTime: time.Unix(1538672842, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplatedataFxTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x95\x5f\x6b\xdb\x3c\x14\xc6\xef\xf5\x29\x0e\xa6\x2f\xd8\x25\x55\xe0\xbd\x0c\x8c\xc1\x36\xb2\xf5\xa6\x09\xdb\xee\xc6\x58\x55\xe7\xd8\x11\x75\x25\x4d\x92\x13\x17\xe1\xef\x3e\xf4\x27\x8d\x13\xbb\x25\xbd\x68\xb1\x8f\x8e\x1e\xfd\x74\xce\x79\x1c\xe7\x36\x58\x71\x81\x90\x55\x5d\x06\x37\x7d\x4f\x9c\xdb\x73\xbb\x05\xba\xe4\x0d\x86\xd7\xab\x5a\xaa\xc7\x1a\x16\x1f\x80\xae\x59\xf9\xc8\x6a\xa4\x5f\x65\x7a\xea\x7b\x42\x9c\xd3\x4c\xd4\x08\xf4\x07\xea\x1d\x2f\xd1\x04\x19\xe2\xdc\xfc\x1a\x96\x1d\x94\x0d\x47\x61\x0d\x5c\xcf\x63\xf4\xaa\xea\x3e\x87\x90\x57\x54\x9a\x0b\x5b\x41\xb6\xec\xfe\x33\x19\xd0\xb8\xe0\xf3\xe6\x73\x18\xa4\xf6\xfd\x9a\x69\xf6\x64\x20\xc2\x1a\xb0\x5b\x04\xe5\x43\x68\x51\x1b\x9f\xad\xf1\x6f\xcb\x35\x6e\xc0\x4a\x50\x5a\xee\xf8\x06\x81\x81\x73\x2f\x9a\xc0\x85\x95\xc0\x84\x4f\x5e\x76\xc0\x94\x6a\x78\xc9\x2c\x97\x82\x12\xfb\xac\x70\xf2\x3c\x63\x75\x5b\x5a\x70\x04\xa0\xea\xe8\xad\x20\x04\x20\xd1\x3f\x33\xad\xca\xa4\x4e\x26\x88\xbf\xa3\x69\x1b\x7b\x60\x31\xa7\x30\x3e\x3b\xf1\x5c\x00\x93\xa4\x4e\x61\x56\xad\x1d\xd0\x0c\xb5\x23\xcc\x1d\xee\x4f\x44\xde\x4d\x32\x83\xd6\x70\x51\x87\x5a\xd7\x7c\x87\xa1\x72\x82\x3d\x21\x54\x52\x83\x96\xad\xe5\xa2\xa6\x64\x3e\xf7\x71\x4f\xb4\x8e\x07\xe4\xe1\x1d\xe0\x30\x39\x7d\x4f\xcf\x59\xf2\xcc\xc4\x59\xb9\xf1\x7a\x59\x31\x4b\x5b\x28\xa5\xe1\xa9\xf0\xff\x7f\xae\xbe\xac\xf2\x27\x14\xa6\xdc\x16\x0b\xf8\x26\xf7\xb0\xe7\x4d\x03\x76\xcb\x0d\xec\xa5\x7e\x04\x2e\x60\xf7\xff\x47\x52\xb5\xa2\x1c\xdd\x36\xff\xe3\xcb\xc5\x45\x3d\x03\xa9\xac\xf1\xca\xa1\x61\x4a\x4b\x2b\x1f\xda\x2a\xdd\x7f\xa5\xfc\x4d\x0b\x5f\x01\xd4\x15\x2b\xd1\xf5\xa1\xbe\x1a\x6d\xab\x05\x78\xe9\x5c\x4d\x4d\x46\x31\xd9\x21\xbf\xf5\x65\xf3\x44\x42\x5c\x3f\x34\x6d\x31\xa6\x56\x89\x2b\x52\x53\x4a\x8b\x59\xd8\xd2\x13\xff\x37\x70\x95\xd2\xb2\xc4\x4d\xab\x31\x19\x0b\x20\x5a\x6b\x7d\x8c\x9f\xd9\x2b\x18\xec\xce\xb7\x2f\x3b\x26\x65\x43\xaf\x1d\xc3\xaf\xfb\x8d\xbd\xe5\x37\x9f\xe5\x5c\xf8\x0e\xa0\x8e\x13\x97\x04\x2f\x9b\xf7\x09\x80\x29\x03\x46\xfd\xe1\x49\xe4\x95\x5b\x9c\x7b\xf0\x0c\xd0\xef\x19\x14\xf2\x7d\x80\x6f\x99\x72\xd0\x85\x5f\xbf\xe3\x87\xe2\x25\x04\xf7\xb5\x96\xad\x5a\x64\x21\x5e\x75\xd9\xfd\x99\x61\x87\x87\x5c\x8a\x3e\x09\x0e\xb7\x16\xb0\x53\x58\xda\x50\x7f\x76\xd2\x1b\x2b\xe1\x01\x41\x69\x34\xfe\xf3\xc1\x45\x38\xa0\x94\xc2\x32\x2e\x50\xbf\xcf\xd6\x43\xe2\x7c\xc2\xcc\x27\x0e\x3d\x4d\xbe\xc4\x79\xe3\xb1\x28\x5e\x6d\xc7\xd8\x81\xe3\xa4\x83\x0b\x8f\x2b\x0b\xf8\xd4\xf2\x66\xe3\x5c\x30\x48\xdf\x1f\x57\x72\x95\x4a\x36\x36\x22\x8a\xcd\xe1\x97\x2e\x3d\x1e\x63\xff\x02\x00\x00\xff\xff\x0f\x05\xc5\xd8\x57\x07\x00\x00")

func internalTemplatedataFxTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplatedataFxTmpl,
		"internal/templatedata/fx.tmpl",
	)
}

func internalTemplatedataFxTmpl() (*asset, error) {
	bytes, err := internalTemplatedataFxTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/templatedata/fx.tmpl", size: 1879, mode: os.FileMode(420), modTime: time.Unix(1538668204, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplatedataHandlerTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x54\x5d\x6f\xda\x30\x14\x7d\xe7\x57\x9c\x55\xd5\x94\xa0\xd4\x7d\xaf\xc4\x13\xda\xc7\x4b\xa7\xa9\xec\x1d\x79\xce\x25\xb1\x9a\x38\xc1\x76\x28\xc8\xf2\x7f\x9f\xec\x04\x12\xda\x31\x15\x69\x1b\x2f\x5c\xdf\xe4\x9e\x7b\x3e\x22\x3b\x97\xd3\x46\x2a\xc2\x4d\xc9\x55\x5e\x91\xbe\xc1\x9d\xf7\x33\xe7\x5e\xa4\x2d\xc1\x3e\xcb\x8a\xe2\xf1\xb6\x68\xda\xe7\x02\x0f\x0b\xb0\xef\x5c\x3c\xf3\x82\xd8\x97\x66\xa8\xbc\x9f\xcd\x9c\xd3\x5c\x15\x04\xb6\x22\xbd\x93\x82\x4c\x84\x01\x9c\xbb\x1d\x80\xe3\xec\xd7\xbe\x0e\x13\xe1\xd9\xfd\x1c\x43\x07\xb2\x6e\x2b\xaa\x49\x59\x6e\x65\xa3\x30\xbf\xef\xdf\xb1\x87\x96\x26\x20\xde\xc3\x58\xdd\x09\x0b\x37\x03\x00\x43\x7a\x47\x1a\xce\xc5\xbd\x11\x18\x18\xc0\x07\x42\x8f\x64\xcb\x26\x37\xf1\x49\x68\xcb\x0d\xb8\xca\xc1\x96\x95\x24\x65\x57\x56\x13\xaf\xa5\x2a\x30\x20\x8c\x8d\xbb\x61\x04\xd8\x74\x4a\x20\x29\x31\x9f\x12\x49\xc3\xd6\x6f\xbc\x26\xef\x13\x83\xf9\x81\xeb\x56\xb4\xba\xb1\xcd\xcf\x6e\xc3\x7a\x94\x1e\x31\x05\x69\xdd\xe8\x81\x71\xf8\x69\xb2\x9d\x56\x28\x59\x4f\x9f\x8d\x40\x1f\xd7\x41\xca\x64\xd8\x7b\x67\xe2\xf1\x01\xc6\xa7\x03\xc2\x51\x0a\x55\x86\x20\x37\x6f\xb5\xfc\x4b\xea\x26\x0b\xcd\x90\xe6\x7b\xf9\xc7\x62\xca\x1f\x81\x74\x00\xf9\xb0\x80\x92\xd5\x04\xfe\xe4\x0d\x69\x7d\x6a\xfa\xd7\xc6\x19\xb6\x22\x95\x27\x9a\xcc\x45\x47\xfe\x67\x98\x62\x77\xb2\xc4\xb0\x27\x12\x24\x77\x94\x28\x7a\x71\x8e\x3d\xd1\xb6\x23\x63\x7f\x1c\x5a\xf2\x7f\x43\xfe\x36\xc3\x3a\xec\x09\x4b\x59\x32\xff\xe3\x06\x4d\x5b\x2c\x2e\x6e\x38\x97\xb8\xe4\xc6\x7e\x0a\xc2\x92\x35\xd5\xad\x3d\xbc\x06\xce\xe2\xc6\xf4\x72\x24\xbf\xf9\x16\x22\xdb\xf7\x7d\x10\x67\xf1\x5d\x11\x95\xb0\x7b\x88\x46\x59\xda\x5b\xb6\xec\xff\x33\xd4\x88\xb2\xd8\x23\x19\xc3\x0b\x4a\x91\x9c\x9d\xb3\x3e\xc1\xf4\x2c\xc2\xa3\xaf\x75\x34\xb5\x68\x82\x6a\x1c\x2d\x40\x7f\xf9\x5d\x65\xaf\x92\x55\x76\xb5\xc7\xf5\x75\x06\x0b\xbb\x0f\xb9\x6c\xdf\xb8\xa8\xf2\xd3\xed\x7b\xac\xc7\x6a\x2c\xc7\xde\xaf\x00\x00\x00\xff\xff\x15\xe3\xd7\xb0\x06\x06\x00\x00")

func internalTemplatedataHandlerTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplatedataHandlerTmpl,
		"internal/templatedata/handler.tmpl",
	)
}

func internalTemplatedataHandlerTmpl() (*asset, error) {
	bytes, err := internalTemplatedataHandlerTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/templatedata/handler.tmpl", size: 1542, mode: os.FileMode(420), modTime: time.Unix(1538672842, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplatedataParametersTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\x4d\x6b\xc3\x30\x0c\x86\xef\xf9\x15\x2f\x65\x8c\xb6\xb0\xf4\x3e\xe8\x71\xdb\x69\x50\xb6\xdd\x87\x49\xd4\x34\x74\xb5\x3d\xdb\x69\x09\x42\xff\x7d\x24\x71\xbc\xf4\x83\xde\x24\xa1\xf7\x41\x8f\x98\x4b\xda\xd6\x9a\x30\xb3\xca\xa9\x03\x05\x72\x7e\x86\x27\x91\x8c\xf9\x54\x87\x1d\xf2\xd7\xfa\x87\xfa\xf6\xa1\x32\x76\x5f\xe1\x79\x8d\x7c\xa3\x8a\xbd\xaa\x28\x7f\x33\xb1\x12\xc9\x32\x66\xa7\x74\x45\xc8\x3f\xc9\x1d\xeb\x82\x7c\x8f\xc9\x00\xe6\xd5\x12\x9b\x11\x8f\xc2\x68\x1f\x5c\x53\x04\xe3\x3c\x96\xab\x71\x27\x86\xdf\x29\xec\x4c\x39\x64\x01\x60\xdb\xe8\x02\x9a\x4e\xcc\xf9\x07\xfd\x36\xe4\xc3\x57\x6b\x49\x64\xbe\x00\x18\x8e\x42\xe3\x34\x1e\x99\x2b\xd3\xcd\x31\x2e\x61\xb8\x56\x84\x05\xb8\x41\xf2\xd6\x68\x4f\x09\x75\x9b\x34\x2c\x4d\x51\xd2\x9f\x4a\xba\x3c\x73\x7b\x39\xd8\xd0\x22\x3d\x10\xa1\xb5\x34\x55\x1b\x1e\x19\xcd\xa2\xd7\x51\x39\xcc\xfb\x2a\xa9\x27\x67\xe0\x9b\x3a\xe4\xa5\x33\xb0\xbe\xaf\x7a\x9d\x9e\x7a\x5e\xa6\xaf\xf4\xe2\x39\xa3\x5e\xd7\x2d\xce\x84\x27\xea\xa9\xfc\x9f\xfd\x05\x00\x00\xff\xff\xae\x3a\xaf\xf9\x4c\x02\x00\x00")

func internalTemplatedataParametersTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplatedataParametersTmpl,
		"internal/templatedata/parameters.tmpl",
	)
}

func internalTemplatedataParametersTmpl() (*asset, error) {
	bytes, err := internalTemplatedataParametersTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/templatedata/parameters.tmpl", size: 588, mode: os.FileMode(420), modTime: time.Unix(1538668617, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplatedataServerTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x54\x41\x6f\xd3\x30\x14\xbe\xe7\x57\x3c\x55\x03\xda\x69\xb8\xf7\x48\x1c\xa0\xd2\xe0\xc2\x54\x36\x38\x20\xc4\xc1\x24\x2f\xa9\xb5\xce\xce\x6c\x67\xa5\xb2\xfc\xdf\x91\x63\x27\x76\x92\x55\xab\x04\xa2\x97\xda\x7e\xdf\xfb\xfc\xbd\xe7\xef\xc5\x98\x12\x2b\xc6\x11\x16\x0a\xe5\x13\xca\x05\xbc\xb5\x36\x33\xe6\xc0\xf4\x0e\xc8\x35\xdb\x63\xb7\xbd\xa8\x45\x73\x5f\x43\xfe\x0e\xc8\x96\x16\xf7\xb4\x46\xf2\x51\x84\x95\xb5\x59\x66\x8c\xa4\xbc\x46\x20\x77\x28\x9f\x58\x81\xaa\xa3\x01\x30\xe6\x42\x3d\x15\x5d\xde\x0d\x7d\xe8\xa0\xee\x70\x7d\x09\x01\x08\x8c\x6b\x94\x15\x2d\x10\x2e\xd7\x3e\xbc\x5e\x83\x31\x1d\x11\x4a\x6b\x81\x29\xd0\x3b\x0c\x4c\xd6\x82\xf2\x89\x6f\x14\x78\xc5\x91\x81\x64\x00\xfa\xd8\xe0\x38\x7d\xe0\x37\x19\x80\xbb\x3c\x28\xfd\x8c\x7a\x27\xca\x5e\xa8\x0f\xb1\x0a\x84\x04\xb2\xd9\x33\xe4\xfa\x4e\x4b\xa4\x0f\x8c\xd7\x10\xd8\xe2\x41\xcc\x71\x59\xa1\xb4\xe5\x70\x14\xa8\xb8\xd0\x73\xae\x34\xd5\xfd\x2e\x8d\xa9\xc5\x57\xa7\x9a\xdc\xe2\x63\x8b\x4a\x83\x6f\xb6\xb5\x57\x23\x42\xe4\xe5\x24\xd9\x95\xd9\xf1\xf6\xc5\xc6\x84\x55\xa2\x60\x22\xde\x5a\x58\xce\x33\x01\xa5\x14\xd2\xa5\xe1\x5e\xa1\xb5\x7e\xef\xaf\x4d\x1a\xe4\x82\x2f\x57\x5f\x08\xae\xf1\xb7\x26\x1b\xff\x9f\xd6\x71\x56\xb9\x2b\x58\x8e\x70\xaa\x11\x5c\x61\x04\x06\xb1\xd9\x73\xad\x49\x77\xd1\x6d\x5b\x29\x0a\x2c\x5b\x89\x4e\x9b\xd2\xb2\x2d\x34\x13\x3c\xb5\xdc\x87\x96\xed\xcb\xde\x64\x03\x5c\x45\xbc\xb7\xe1\xf7\xf7\xb7\xdb\x0d\x34\x31\x5e\x09\xf9\xac\x3f\x9d\x19\xab\x96\x17\xa7\x88\x97\x2a\xb5\xe9\x0a\x7e\xfc\x3c\x52\xd9\x14\x24\x2a\xf5\x7e\xdd\xb9\xe1\x79\x6d\x0c\xf9\x44\x79\xb9\x77\x58\xe3\x7d\x9f\x83\xf2\x15\x4b\xd4\xad\xe4\xd0\xa5\x37\x52\x68\xf1\xab\xad\x48\x72\x51\x68\xd3\xa9\xf8\x96\x4a\xfa\xa0\xcc\xd0\xfc\x30\x98\x39\x18\xd3\x48\xc6\x75\x05\x8b\x57\x8f\x0b\x20\xd7\x5f\x6e\xd2\x37\xfa\xc6\xa9\x3c\xe6\xbd\xec\x81\xb7\x3b\x3e\x4d\x1e\xe7\xaf\x75\xc0\x7e\x06\xc9\xd4\xd9\xa3\x11\xf1\x28\x67\xb3\x99\x28\xef\xbd\xab\x11\x3c\x34\x2a\x9f\x54\x7c\x83\x87\x4e\x5c\x08\x8f\xaf\x98\xb6\x27\x45\xce\x6b\x48\xef\xc9\x61\x47\x86\x21\xb8\x9a\x81\x36\x12\xa9\xc6\x1c\x38\x1e\x7a\x0f\x0c\xe8\x30\x00\xcb\xd5\x34\x6d\xc2\x33\xda\xbe\xf0\x55\x48\xc2\x7e\xc2\xe7\x4f\xe4\xcf\xcf\x79\x23\xd5\x21\xff\xf3\x23\x79\x79\x67\xbd\xd2\x08\xfa\x17\xcf\xf4\x2f\xfa\x1d\x16\xab\xee\xb3\x13\x71\x71\x19\xcf\xfe\x04\x00\x00\xff\xff\x1c\xaa\x02\x6b\x74\x07\x00\x00")

func internalTemplatedataServerTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplatedataServerTmpl,
		"internal/templatedata/server.tmpl",
	)
}

func internalTemplatedataServerTmpl() (*asset, error) {
	bytes, err := internalTemplatedataServerTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/templatedata/server.tmpl", size: 1908, mode: os.FileMode(420), modTime: time.Unix(1538672842, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplatedataServer_streamTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x94\xc1\x6e\xdb\x30\x0c\x86\xef\x79\x0a\xb6\xe8\xc1\x0e\x3a\xe5\x3e\xa0\xa7\x60\xdb\x69\xd8\x90\xec\x1e\x78\x0e\xed\x08\xb1\x25\x57\xa2\xd3\x05\x82\xdf\x7d\x10\x2d\x2b\x49\x6d\x07\xbd\xf4\x54\x95\x16\xbf\x9f\xd4\x4f\xc6\xb9\x3d\x16\x52\x21\x3c\x5a\x34\x27\x34\x3b\x4b\x06\xb3\xfa\x11\xbe\x74\xdd\xc2\xb9\x37\x49\x07\x10\xdf\x65\x85\xfc\xef\x53\xa9\x9b\x63\x09\x5f\x5f\x40\xfc\xce\xf2\x63\x56\xa2\xf8\xa1\xc3\xa9\xeb\x16\x0b\xe7\x4c\xa6\x4a\x04\xb1\x45\x73\x92\x39\x5a\xc6\x00\x38\xf7\xd4\xe3\x39\x75\xcb\x47\x7f\xdf\x7f\x59\x2d\xa1\x0f\x40\x2f\x0d\x52\x11\x9a\x22\xf3\xd9\xcb\xd5\x70\x2b\x70\x7f\x22\x1d\xf4\x7e\xc0\xfa\x0f\xb2\x00\x6d\x40\xac\x2b\x89\x8a\xb6\x4c\x90\xaa\x1c\x44\x62\x20\xdc\x5f\xad\xc0\x39\xd1\x47\x87\x32\x40\x5a\xc8\x82\xb8\x4f\x8d\xfa\xd0\x5a\xdc\x83\x54\x40\x07\xbc\xb4\xe0\x13\x86\x1b\x82\xa1\x74\x6e\x70\x0a\x1b\x39\x8e\xaf\x01\xac\xb5\x22\xfc\x47\x49\x0a\x79\x7f\x12\x21\x72\xe9\x65\xd4\xc8\xd0\x29\xc0\x06\xf3\x53\x22\x84\x38\x67\xa6\xc9\x83\xd8\xaf\x86\xa4\x56\x29\x24\x4b\xe7\x4a\xfd\xc7\x17\x22\x36\xf8\xda\xa2\x25\xe8\xcd\xea\xba\x67\x40\x63\xb4\x49\x83\x08\xaa\xfd\xed\xf3\xbd\x7f\xaa\x2b\xc9\x2d\xaa\xfd\x2d\xda\x36\x5a\x59\xbc\x62\xcf\x14\xc4\x92\x13\x8a\xdd\x28\x76\x39\xcf\x8c\x43\xdd\x54\x58\xa3\xa2\xcc\x93\x3f\x61\x26\xd8\xbe\xdd\xd8\x3f\x4b\xa6\xcd\x29\x9a\x17\xca\x59\x72\xb7\x8d\xd1\xa4\xff\xb6\xc5\x4d\x4e\x68\x90\xff\x14\xad\xca\x21\xb1\xb0\x1c\x83\xd3\xf9\x39\x88\x62\x06\xa9\x35\x0a\xac\xe8\x55\x45\xcc\xb8\xd6\x98\x1c\x98\xd0\xd4\x5d\x7d\x9e\x24\xdd\x90\x9d\x73\xef\x23\xe3\x14\x6b\xad\x6d\xc9\x31\xbf\xdb\xb1\xe0\x0d\xe6\x28\x4f\x98\x28\x7c\x73\x6e\x60\x78\xa0\x07\x78\x69\x21\x44\x1a\x00\xb2\xe0\xf4\x87\x17\x50\xb2\x8a\xd8\xf8\x08\x4a\x56\xcc\x0f\xf1\x2e\x3e\xd1\xeb\x33\xe8\xa3\x57\xad\x6d\x29\x7c\xc9\xb7\x3a\x57\xf8\x07\x7d\x9c\xe1\xde\xba\xb9\xce\x2c\x7d\xf3\xdd\x25\x3b\xac\x1b\x3a\x8f\x4b\xaf\x6d\x99\x8e\x0a\x61\x1c\xd7\xa3\x64\x35\x39\xe6\xf3\xdb\xf6\x11\xbf\x78\x0d\x8d\xff\x3d\xbc\xbb\x8a\xf7\x1c\x65\xcf\x66\xc7\x6b\x10\x78\x67\xcd\x4c\x17\x93\xbb\x3b\x75\xbc\xc4\xfe\x07\x00\x00\xff\xff\x76\x61\xc3\x55\x67\x06\x00\x00")

func internalTemplatedataServer_streamTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplatedataServer_streamTmpl,
		"internal/templatedata/server_stream.tmpl",
	)
}

func internalTemplatedataServer_streamTmpl() (*asset, error) {
	bytes, err := internalTemplatedataServer_streamTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/templatedata/server_stream.tmpl", size: 1639, mode: os.FileMode(420), modTime: time.Unix(1538672842, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"internal/templatedata/base.tmpl": internalTemplatedataBaseTmpl,
	"internal/templatedata/bindata.go": internalTemplatedataBindataGo,
	"internal/templatedata/caller.tmpl": internalTemplatedataCallerTmpl,
	"internal/templatedata/client.tmpl": internalTemplatedataClientTmpl,
	"internal/templatedata/client_stream.tmpl": internalTemplatedataClient_streamTmpl,
	"internal/templatedata/fx.tmpl": internalTemplatedataFxTmpl,
	"internal/templatedata/handler.tmpl": internalTemplatedataHandlerTmpl,
	"internal/templatedata/parameters.tmpl": internalTemplatedataParametersTmpl,
	"internal/templatedata/server.tmpl": internalTemplatedataServerTmpl,
	"internal/templatedata/server_stream.tmpl": internalTemplatedataServer_streamTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"internal": &bintree{nil, map[string]*bintree{
		"templatedata": &bintree{nil, map[string]*bintree{
			"base.tmpl": &bintree{internalTemplatedataBaseTmpl, map[string]*bintree{}},
			"bindata.go": &bintree{internalTemplatedataBindataGo, map[string]*bintree{}},
			"caller.tmpl": &bintree{internalTemplatedataCallerTmpl, map[string]*bintree{}},
			"client.tmpl": &bintree{internalTemplatedataClientTmpl, map[string]*bintree{}},
			"client_stream.tmpl": &bintree{internalTemplatedataClient_streamTmpl, map[string]*bintree{}},
			"fx.tmpl": &bintree{internalTemplatedataFxTmpl, map[string]*bintree{}},
			"handler.tmpl": &bintree{internalTemplatedataHandlerTmpl, map[string]*bintree{}},
			"parameters.tmpl": &bintree{internalTemplatedataParametersTmpl, map[string]*bintree{}},
			"server.tmpl": &bintree{internalTemplatedataServerTmpl, map[string]*bintree{}},
			"server_stream.tmpl": &bintree{internalTemplatedataServer_streamTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

