// Code generated by go-bindata.
// sources:
// internal/templatedata/base.tmpl
// internal/templatedata/bindata.go
// internal/templatedata/client.tmpl
// internal/templatedata/client_impl.tmpl
// internal/templatedata/client_stream.tmpl
// internal/templatedata/fx.tmpl
// internal/templatedata/parameters.tmpl
// internal/templatedata/server.tmpl
// internal/templatedata/server_impl.tmpl
// internal/templatedata/server_stream.tmpl
// DO NOT EDIT!

package templatedata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _internalTemplatedataBaseTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xcc\x31\x4f\xc3\x30\x10\x05\xe0\xdd\xbf\xe2\x11\x75\x00\x89\x24\x7b\x25\x26\x0a\xa8\x4b\x5b\x89\xee\xe8\x70\xae\xc1\x22\x8e\xad\xb3\xa9\xa8\x2c\xff\x77\x44\x93\x02\x12\x4d\x37\xfb\x7d\xf7\x5e\x5d\xe3\xde\x35\x8c\x96\x7b\x16\x8a\xdc\xe0\xf5\x00\x2f\x2e\x3a\x5d\xb6\xdc\x97\x07\x12\xaf\xcb\xd6\xa9\xba\x46\x70\x1f\xa2\x79\x8e\x94\xaa\x47\xd3\x71\xb5\x22\xcb\x39\x7f\xcb\x62\x8d\xd5\x7a\x8b\x87\xc5\x72\x7b\xa5\x94\x27\xfd\x4e\x2d\xff\xdc\x6d\x86\x7f\xf5\xe4\xc6\x57\xce\x4a\xa5\x64\x76\x18\xfc\x99\x65\x6f\x34\x07\x94\x39\x2b\xc0\x58\xef\x24\xe2\x5a\x01\x40\x4a\x42\x7d\xcb\x98\x0d\xe9\x86\xe2\xdb\x2d\x66\xd4\x19\x0a\x98\xdf\xa1\x5a\x1e\xe3\x53\x75\x68\x0c\x9c\x33\x8a\x94\xfe\xf4\x72\x2e\xc6\x49\xee\x9b\xb1\x70\xa3\x7e\x7f\x2a\xa5\xc8\xd6\x77\x14\x19\x85\xee\x0c\xf7\xb1\x40\x75\xa4\xff\xf2\x62\xac\xef\x2e\x70\x88\xc2\x64\xcf\x1d\x04\x96\x3d\xcb\xb4\x4c\x2e\x8f\x3c\xbd\xbc\xfb\x3c\x97\x7a\x12\xb2\x1c\x59\xc2\x49\xbf\x02\x00\x00\xff\xff\xb7\xa9\x37\x42\xf4\x01\x00\x00")

func internalTemplatedataBaseTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplatedataBaseTmpl,
		"internal/templatedata/base.tmpl",
	)
}

func internalTemplatedataBaseTmpl() (*asset, error) {
	bytes, err := internalTemplatedataBaseTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/templatedata/base.tmpl", size: 500, mode: os.FileMode(420), modTime: time.Unix(1538673775, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplatedataBindataGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func internalTemplatedataBindataGoBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplatedataBindataGo,
		"internal/templatedata/bindata.go",
	)
}

func internalTemplatedataBindataGo() (*asset, error) {
	bytes, err := internalTemplatedataBindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/templatedata/bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1538673782, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplatedataClientTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x52\xcb\x6e\xdb\x30\x10\xbc\xeb\x2b\x06\x46\x1f\xb6\xe1\xd2\xf7\x00\x3d\x14\x06\xd2\x53\xdd\x34\xe9\xa5\xa7\x82\xa1\x57\x32\x11\x85\x54\x48\xaa\x6e\xb0\xe0\xbf\x17\x14\x15\x3d\xec\x02\x2d\x10\x5d\x44\xee\x62\x67\x66\x87\xc3\x7c\xa0\x52\x1b\xc2\x42\xd5\x9a\x4c\x58\xe0\x43\x8c\x05\xf3\x49\x87\x23\xc4\xb5\xae\xa9\xbb\xbe\xa9\x6c\xf3\x50\xe1\xea\x23\xc4\x8d\x54\x0f\xb2\x22\xf1\xd9\xf6\xa7\x18\x8b\x82\xd9\x49\x53\x11\xc4\x1d\xb9\x5f\x5a\x91\xef\x60\x0a\x80\x79\xbb\xc6\xae\x83\x86\x36\x81\x5c\x29\x15\x61\xbd\xcd\xdd\xed\x16\xcc\x22\xb7\x63\x84\xf6\x08\x47\x4a\xa5\xbd\x7c\xa4\x18\xe1\x33\xda\x7b\x0f\x75\x06\x21\x0a\x20\x3c\x37\x34\x9f\x1f\x08\xb8\x00\x12\x79\xaf\xea\x0b\x85\xa3\x3d\x64\x51\x40\x6e\xe9\x12\xd6\xa1\x1f\xbe\x0b\x8e\xe4\xa3\x36\x55\xde\x80\xdc\x58\x18\x67\x30\x2a\x5b\x0e\x25\x40\x59\x13\xe8\x77\x10\xbb\xfc\xdf\x4c\x5a\x1d\x8b\xb1\xe1\x92\x66\x8a\x9a\xbe\x35\x73\x65\xbf\xa7\x85\xc4\x2d\x3d\xb5\xe4\x03\xb2\xe7\x31\xce\x01\xc9\x1c\xce\x86\x85\x10\xcf\xd2\x35\x4a\xec\x64\x5d\x7f\x6d\x82\xb6\x66\x1c\x59\x61\xc9\x2c\x32\xef\x8b\x4f\x1b\x90\x73\xd6\xad\x06\x2b\xa8\xf6\xf4\xaa\x3d\xff\x53\xfd\xbf\x94\xce\x60\x7c\x63\x8d\xa7\x11\xe7\x42\xf4\xc4\x88\xe9\xed\x22\x76\xca\x1a\x1f\x5c\xab\x12\xdd\x34\x79\x7b\x3a\x4d\xc3\x73\xdf\xea\xfa\xe0\x21\x61\xe8\x84\x1f\x9f\x6e\x6f\x76\x2f\xa1\x2b\xad\xfb\x7b\x2e\x53\x08\xcb\xd6\xa8\x33\xa8\xa5\x42\xbf\x66\x57\xd8\xc0\x36\xc1\x0f\xcb\x37\xce\x06\x7b\xdf\x96\x7d\x37\xdb\xb0\x9a\xe5\x38\xa7\xd7\x51\x68\x9d\xc1\xbb\x9f\xe9\x01\xbb\x50\xc6\xc8\xbe\x7b\xc9\x2b\xcc\xa1\xf6\x74\x9a\x3e\xf1\x52\x6d\xc0\xdc\x38\x6d\x42\x89\xc5\xdb\xa7\x05\xc4\xf5\xb7\x7d\xf2\x30\x29\x11\x42\xac\x7a\xa3\x46\xdf\xc6\xe3\x58\xfb\x13\x00\x00\xff\xff\x52\x2a\x51\xa1\x1c\x04\x00\x00")

func internalTemplatedataClientTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplatedataClientTmpl,
		"internal/templatedata/client.tmpl",
	)
}

func internalTemplatedataClientTmpl() (*asset, error) {
	bytes, err := internalTemplatedataClientTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/templatedata/client.tmpl", size: 1052, mode: os.FileMode(420), modTime: time.Unix(1538673714, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplatedataClient_implTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x55\xcb\x6e\xdb\x30\x10\xbc\xeb\x2b\x26\x46\x52\x58\x81\xc2\xdc\x5d\xf8\x64\xb4\x3d\xf5\x81\xba\x77\x83\xa5\x57\x0a\x61\x89\x94\x49\xba\x89\x41\xf0\xdf\x0b\x92\xf2\xab\x76\x72\x6a\x10\x14\x3d\x79\xb5\xe6\xec\xcc\xec\xf2\xe1\xfd\x92\x6a\xa9\x08\x23\xd1\x4a\x52\x6e\x21\xbb\xbe\x1d\xe1\x2e\x84\xc2\xfb\x47\xe9\x1e\xc0\x3e\xca\x96\xd2\xe7\x75\xa3\xfb\x55\x83\xc9\x14\xec\x1b\x17\x2b\xde\x10\xfb\xa4\x87\x28\x84\xa2\xf0\xde\x70\xd5\x10\xd8\x9c\xcc\x2f\x29\xc8\xa6\x32\x80\xf7\xd7\x82\xb7\x2d\x99\x08\xed\x8d\x54\xae\xc6\x68\x71\x63\x47\x60\xb3\x44\x1a\xc1\x71\xd9\xfd\x2d\x72\x02\x51\x05\x75\xa4\x1c\x77\x52\x2b\xdc\xde\xe7\x25\x6e\xdb\xd3\xa1\x5c\x08\xb0\xce\x6c\x84\x83\x2f\x00\xc4\x0f\xe2\x1d\xb6\xdc\xf4\xa2\x37\xda\xe9\x9f\x9b\x9a\xcd\x53\x32\x97\x2d\x80\x81\x69\x10\xfa\x99\xdc\x83\x5e\xda\xa4\x32\xa6\x65\x0d\xae\x96\x3b\x59\x19\x2a\x55\x93\x1d\x91\x39\x24\xee\x06\x08\x50\x6f\x94\xc0\x58\xe0\xf6\x48\x56\x09\xef\xd9\x17\xde\x51\x08\x63\xe1\x9e\x20\xb4\x72\xf4\xe4\xd8\x2c\xff\x56\xd0\xbd\xb3\x60\x8c\x25\xa9\x6c\xc6\xdb\xf6\x6b\x1f\x8d\x96\x18\x7b\x7f\x22\x39\x84\x0a\x64\x8c\x36\xe5\x60\x32\x19\x4d\xb9\xd8\x4d\xc1\xb2\xe9\x54\x23\xe3\x22\x63\x05\xef\x77\x8d\xbe\x59\x8f\x30\x88\xc9\xc4\x8c\xb1\x72\x5f\x4a\xd6\xa9\xd4\xd5\x14\x4a\xb6\x47\x14\x80\x21\xb7\x31\x2a\xa6\x13\xdb\xfe\x9f\x50\xfc\xb1\xe2\xdd\xe2\x4c\xb3\xcf\xaa\x26\xb0\xa1\x8a\x15\x8a\x63\xa8\xf7\xd4\x5a\x8a\xcc\x67\x7d\xfe\x7f\xda\xfa\x5a\x1d\xfd\xcb\x1b\xd5\xd0\x3a\x02\x1a\xfd\x23\x9e\x3c\xf6\x9d\xd6\x1b\xb2\x0e\xf9\x26\xd8\x39\xff\xa7\x5b\x3e\xc0\x26\x53\x58\x36\x27\xb5\x1c\x1b\x5a\x97\xef\xdf\xea\x50\xbc\xe1\xb8\x4e\x70\xb6\xd7\xca\xd2\x11\xf0\x6c\x72\x9d\x6d\x2e\xcf\xee\xc5\xa9\x19\x5a\x57\x50\xf4\xe8\xfd\x9e\x24\x52\xbe\xc2\xd5\x64\x2b\xe8\x55\x14\xd7\xd9\x86\xbd\x68\xee\x84\xf1\x4a\xaf\x9e\xa5\x3a\x7d\x58\x66\xdc\xba\x0f\xb1\x2b\xe3\x05\x75\xbd\xdb\x5e\xb0\x64\xc8\x96\xcf\x6f\x91\xa4\xf1\xc2\x3e\x50\xcb\xfd\xbb\xb9\x8b\x0f\xd1\x21\x3c\xe4\x7e\x07\x00\x00\xff\xff\x26\x7c\x59\x52\xc4\x07\x00\x00")

func internalTemplatedataClient_implTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplatedataClient_implTmpl,
		"internal/templatedata/client_impl.tmpl",
	)
}

func internalTemplatedataClient_implTmpl() (*asset, error) {
	bytes, err := internalTemplatedataClient_implTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/templatedata/client_impl.tmpl", size: 1988, mode: os.FileMode(420), modTime: time.Unix(1538673275, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplatedataClient_streamTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x55\xcd\x8e\x9b\x30\x10\xbe\xef\x53\xcc\xae\xf6\x00\xd1\xd6\xb9\xb7\xda\x43\xb5\x6a\x7b\xaa\x5a\x25\xbd\x47\xd4\x0c\xc4\x0a\xd8\xac\x6d\xb2\x8d\x2c\xde\xbd\xb2\x31\x0e\x04\x88\x68\xd4\xde\x7a\x8a\x33\x78\xbe\x9f\xe1\xb3\x31\x26\xc5\x8c\x71\x84\x07\x5a\x30\xe4\x7a\xa7\xb4\xc4\xa4\x7c\x80\x77\x4d\x73\x67\xcc\x1b\xd3\x7b\x20\x9f\x59\x81\xee\xef\x63\x2e\xaa\x43\x0e\xef\x9f\x81\x7c\x4f\xe8\x21\xc9\x91\x7c\x11\x7e\xd5\x34\x77\x77\xc6\xc8\x84\xe7\x08\x64\x8b\xf2\xc8\x28\x2a\x07\x03\x60\xcc\x63\x0b\xef\x5a\x5f\xdc\xd2\xee\xb7\x4f\xd6\x2b\x68\x0b\xd0\x52\x03\xe3\x1a\x65\x96\xd8\xee\xd5\xba\xdb\xe5\x71\xbf\xa2\xde\x8b\xb4\x83\xb5\x0f\x58\x06\x42\x76\x98\x5b\x87\xc0\x78\xde\x2a\x40\x19\x0a\x7e\xff\x7a\x0d\xc6\x90\xb6\xda\xc9\x00\xa6\x20\xf1\xe4\xb6\x35\xf0\x43\xad\x30\x05\xc6\x41\xef\xf1\x6c\xc1\x36\x74\x3b\x88\x03\xd5\xa7\x0a\xa7\x60\x03\x8e\x71\xdb\x00\x5e\x04\xd7\xf8\x4b\x47\x31\xd0\x76\x45\x7c\xe5\xec\x65\x64\xa4\x73\x0a\xb0\x45\x9e\x46\x2b\x63\x72\xf1\xc3\x12\x92\x0d\xbe\xd6\xa8\x34\xb4\x2f\xa5\x69\x9e\x80\x10\x72\x4a\x64\x45\xbd\x92\x6f\x95\x66\x82\xc7\x80\x52\x0a\xe9\x29\x90\xa7\xc3\xe1\x5d\x0e\xaa\x47\xb8\x41\x7a\x8c\x66\x30\x87\x42\x54\x25\xb8\xc2\x9e\x12\x47\x19\x77\xb6\x0b\xa1\xd0\xa9\xbf\x45\x60\xc2\xd3\xf1\x54\x22\x2e\xf4\x48\x7a\xdc\xd3\xee\x38\x3f\xf2\xf4\xef\x78\x18\xca\x6a\x46\xb5\xf3\x7a\x26\xd2\x65\x55\x60\x89\x5c\x27\x96\xf9\x1f\xe4\xda\x45\x70\x37\xce\xa0\xd2\xb2\xa6\x3a\x04\xd0\xcb\x59\xb9\x69\x54\x52\x68\xf1\xb3\xce\x06\x3d\xde\xa0\xfb\xc9\x6a\x4e\x21\xa2\xb0\x1a\x03\xc7\xf3\x59\x0e\x64\x12\x75\x2d\x39\x50\xd2\xb2\x92\xd0\xd1\xe7\x98\x0c\xbd\x37\x75\x95\xdf\xe5\x49\xe2\x2b\x5c\x3d\x11\xa2\xd2\xea\xea\xb1\x98\x55\xdb\xe1\xb7\x18\x84\x90\x78\xf2\xdd\xcf\x1f\xa4\x25\x26\x5c\x3a\xaf\x69\x5c\x14\xd1\xe0\xa1\x54\xb9\xab\xd9\x5b\x36\x18\xd9\x20\x45\x76\xc4\x88\xe3\x9b\x31\x01\xc4\x42\x76\x03\x0a\xe6\x00\x58\xe6\xfa\xef\x9f\x81\xb3\x22\xe0\x86\xe9\x70\x56\x38\x02\x5f\x6f\xc2\xec\xd4\x13\x88\x83\xa5\x2d\x55\x4e\xae\x8a\xee\x31\xdd\x8b\xc3\x0c\xc5\x30\x9f\x2f\x89\xd2\x9f\xac\xd3\x68\x87\x65\xa5\x4f\x13\x36\x4a\x95\xc7\x23\x51\x0e\xcf\x69\xe3\xac\x58\x1e\xec\x70\x5b\xdd\x1e\x1e\x87\x11\x2d\x0c\xce\x1f\x5c\x70\x4b\x32\x35\xb8\xf9\x96\x67\xeb\xf2\xe4\x5c\x44\xcb\x07\xa3\x1f\xac\xa1\xc9\x0f\xb7\x04\xe7\x7f\x60\x67\x02\xdb\x49\x9e\x49\xcd\xe4\x97\x67\x6a\x79\xae\xfd\x0e\x00\x00\xff\xff\x95\xd0\x3f\x57\xe9\x09\x00\x00")

func internalTemplatedataClient_streamTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplatedataClient_streamTmpl,
		"internal/templatedata/client_stream.tmpl",
	)
}

func internalTemplatedataClient_streamTmpl() (*asset, error) {
	bytes, err := internalTemplatedataClient_streamTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/templatedata/client_stream.tmpl", size: 2537, mode: os.FileMode(420), modTime: time.Unix(1538673408, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplatedataFxTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x95\x5f\x6b\xdb\x3c\x14\xc6\xef\xf5\x29\x0e\xa6\x2f\xd8\x25\x55\xe0\xbd\x0c\x8c\xc1\x36\xb2\xf5\xa6\x09\xdb\xee\xc6\x58\x55\xe7\xd8\x11\x75\x25\x4d\x7f\x12\x17\xa1\xef\x3e\x24\x3b\x8d\x9d\xb8\x25\xbd\x68\xb1\x8f\x8e\x1e\xfd\x74\xce\x79\x1c\xef\x37\x58\x71\x81\x90\x55\x6d\x06\x37\x21\x10\xef\xf7\xdc\x6e\x81\x2e\x79\x83\xe9\xf5\xaa\x96\xea\xb1\x86\xc5\x07\xa0\x6b\x56\x3e\xb2\x1a\xe9\x57\xd9\x3f\x85\x40\x88\xf7\x9a\x89\x1a\x81\xfe\x40\xbd\xe3\x25\x9a\x24\x43\xbc\x9f\x5f\xc3\xb2\x85\xb2\xe1\x28\xac\x81\xeb\x79\x17\xbd\xaa\xda\xcf\x29\x14\x15\x95\xe6\xc2\x56\x90\x2d\xdb\xff\x4c\x06\xb4\x5b\x88\x79\xf3\x39\x0c\x52\x43\x58\x33\xcd\x9e\x0c\x74\xb0\x06\xec\x16\x41\xc5\x10\x5a\xd4\x26\x66\x6b\xfc\xeb\xb8\xc6\x0d\x58\x09\x4a\xcb\x1d\xdf\x20\x30\xf0\xfe\x45\x13\xb8\xb0\x12\x98\x88\xc9\xcb\x16\x98\x52\x0d\x2f\x99\xe5\x52\x50\x62\x9f\x15\x4e\x9e\x67\xac\x76\xa5\x05\x4f\x00\xaa\x96\xde\x0a\x42\x00\x7a\xfa\x67\xa6\x55\xd9\xab\x93\x09\xe2\xef\x68\x5c\x63\x0f\x2c\x66\x0c\x13\xb3\x7b\x9e\x0b\x60\x7a\xa9\x31\xcc\xca\xd9\x01\xcd\x50\xbb\x83\xb9\xc3\xfd\x48\xe4\xdd\x24\x33\x70\x86\x8b\x3a\xd5\xba\xe6\x3b\x4c\x95\x13\xec\x09\xa1\x92\x1a\xb4\x74\x96\x8b\x9a\x92\xf9\x3c\xc6\x23\xd1\xba\x3b\x20\x4f\xef\x00\x87\xc9\x09\x81\x9e\xb2\xe4\x99\xe9\x66\xe5\x26\xea\x65\xc5\xac\xdf\x42\x29\x4d\x4f\x45\xfc\xff\x73\xf5\x65\x95\x3f\xa1\x30\xe5\xb6\x58\xc0\x37\xb9\x87\x3d\x6f\x1a\xb0\x5b\x6e\x60\x2f\xf5\x23\x70\x01\xbb\xff\x3f\x92\xca\x89\xf2\xec\xb6\xf9\x9f\x58\x2e\x2e\xea\x19\x48\x65\x4d\x54\x4e\x0d\x53\x5a\x5a\xf9\xe0\xaa\xfe\xfe\x2b\x15\x6f\x5a\xc4\x0a\xa0\xae\x58\x89\x3e\xa4\xfa\x6a\xb4\x4e\x0b\x88\xd2\xb9\x9a\x9a\x8c\x62\xb2\x43\x71\xeb\xcb\xe6\x89\x84\x6e\xfd\xd0\xb4\xc5\x39\xb5\xea\xb9\x3a\x6a\x4a\x69\x31\x4b\x5b\x02\x89\x7f\x03\x57\x29\x2d\x4b\xdc\x38\x8d\x23\x63\xad\x8f\xd1\x13\x73\x25\x7b\xdd\xc5\xe6\x65\xc7\xa4\x6c\xe8\xb4\x63\xf8\x75\xb7\xb1\xb7\xdc\x16\xb3\xbc\x4f\x5f\x01\xd4\xdd\xbc\xf5\x82\x97\x4d\xfb\x04\xc0\x94\xfd\x3a\xfd\xe1\x49\xe4\x95\x5b\x9c\x3a\xf0\x04\x30\xee\x19\x94\xf1\x7d\x80\x6f\x59\x72\xd0\x85\x5f\xbf\xbb\xcf\xc4\x4b\x08\xee\x6b\x2d\x9d\x5a\x64\x29\x5e\xb5\xd9\xfd\x89\x5d\x87\x87\x5c\x8a\x3e\x09\x0e\xb7\x16\xb0\x55\x58\xda\x54\x7f\x36\xea\x8d\x95\xf0\x80\xa0\x34\x9a\xf8\xf1\xe0\x22\x1d\x50\x4a\x61\x19\x17\xa8\xdf\x67\xea\x21\x71\x3e\x61\xe5\x91\x3f\xc7\xc9\x97\xf8\xee\x7c\x2c\x8a\x57\xdb\x71\xee\xbf\xf3\xa4\x83\x07\x8f\x2b\x0b\xf8\xe4\x78\xb3\xf1\x3e\x19\x24\x84\xe3\x4a\xae\xfa\x92\x9d\xdb\x10\xc5\xe6\xf0\x3b\xd7\x3f\x1e\x63\xff\x02\x00\x00\xff\xff\xcd\x87\x04\x4c\x55\x07\x00\x00")

func internalTemplatedataFxTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplatedataFxTmpl,
		"internal/templatedata/fx.tmpl",
	)
}

func internalTemplatedataFxTmpl() (*asset, error) {
	bytes, err := internalTemplatedataFxTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/templatedata/fx.tmpl", size: 1877, mode: os.FileMode(420), modTime: time.Unix(1538673519, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplatedataParametersTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\x4d\x6b\xc3\x30\x0c\x86\xef\xf9\x15\x2f\x65\x8c\xb6\xb0\xf4\x3e\xe8\x71\xdb\x69\x50\xb6\xdd\x87\x49\xd4\x34\x74\xb5\x3d\xdb\x69\x09\x42\xff\x7d\x24\x71\xbc\xf4\x83\xde\x24\xa1\xf7\x41\x8f\x98\x4b\xda\xd6\x9a\x30\xb3\xca\xa9\x03\x05\x72\x7e\x86\x27\x91\x8c\xf9\x54\x87\x1d\xf2\xd7\xfa\x87\xfa\xf6\xa1\x32\x76\x5f\xe1\x79\x8d\x7c\xa3\x8a\xbd\xaa\x28\x7f\x33\xb1\x12\xc9\x32\x66\xa7\x74\x45\xc8\x3f\xc9\x1d\xeb\x82\x7c\x8f\xc9\x00\xe6\xd5\x12\x9b\x11\x8f\xc2\x68\x1f\x5c\x53\x04\xe3\x3c\x96\xab\x71\x27\x86\xdf\x29\xec\x4c\x39\x64\x01\x60\xdb\xe8\x02\x9a\x4e\xcc\xf9\x07\xfd\x36\xe4\xc3\x57\x6b\x49\x64\xbe\x00\x18\x8e\x42\xe3\x34\x1e\x99\x2b\xd3\xcd\x31\x2e\x61\xb8\x56\x84\x05\xb8\x41\xf2\xd6\x68\x4f\x09\x75\x9b\x34\x2c\x4d\x51\xd2\x9f\x4a\xba\x3c\x73\x7b\x39\xd8\xd0\x22\x3d\x10\xa1\xb5\x34\x55\x1b\x1e\x19\xcd\xa2\xd7\x51\x39\xcc\xfb\x2a\xa9\x27\x67\xe0\x9b\x3a\xe4\xa5\x33\xb0\xbe\xaf\x7a\x9d\x9e\x7a\x5e\xa6\xaf\xf4\xe2\x39\xa3\x5e\xd7\x2d\xce\x84\x27\xea\xa9\xfc\x9f\xfd\x05\x00\x00\xff\xff\xae\x3a\xaf\xf9\x4c\x02\x00\x00")

func internalTemplatedataParametersTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplatedataParametersTmpl,
		"internal/templatedata/parameters.tmpl",
	)
}

func internalTemplatedataParametersTmpl() (*asset, error) {
	bytes, err := internalTemplatedataParametersTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/templatedata/parameters.tmpl", size: 588, mode: os.FileMode(420), modTime: time.Unix(1538668617, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplatedataServerTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x54\x51\x6f\xd3\x3c\x14\x7d\xcf\xaf\xb8\xaa\xf6\x7d\xb4\xd3\x70\xdf\x23\xf1\x00\x95\x06\x2f\x4c\x65\x83\x07\x84\x10\x32\xc9\x4d\x6a\xad\xb3\x33\xdb\x59\xa9\x2c\xff\x77\xe4\xd8\x89\x9d\x64\xd5\x2a\x81\xe8\x4b\x6d\xdf\x73\x8f\xcf\xbd\x3e\x37\xc6\x94\x58\x31\x8e\xb0\x50\x28\x9f\x50\x2e\xe0\xb5\xb5\x99\x31\x07\xa6\x77\x40\xae\xd9\x1e\xbb\xed\x45\x2d\x9a\xfb\x1a\xf2\x37\x40\xb6\xb4\xb8\xa7\x35\x92\xf7\x22\xac\xac\xcd\x32\x63\x24\xe5\x35\x02\xb9\x43\xf9\xc4\x0a\x54\x1d\x0d\x80\x31\x17\xea\xa9\xe8\xf2\x6e\xe8\x43\x07\x75\x87\xeb\x4b\x08\x40\x60\x5c\xa3\xac\x68\x81\x70\xb9\xf6\xe1\xf5\x1a\x8c\xe9\x88\x50\x5a\x0b\x4c\x81\xde\x61\x60\xb2\x16\x94\x4f\x7c\xa5\xc0\x2b\x8e\x0c\x24\x03\xd0\xc7\x06\xc7\xe9\x03\xbf\xc9\x00\xdc\xe5\x41\xe9\x47\xd4\x3b\x51\xf6\x42\x7d\x88\x55\x20\x24\x90\xcd\x9e\x21\xd7\x77\x5a\x22\x7d\x60\xbc\x86\xc0\x16\x0f\x62\x8e\xcb\x0a\xa5\x2d\x87\xa3\x40\xc5\x85\x9e\x73\xa5\xa9\xee\x77\x69\x4c\x2d\x3e\x3b\xd5\xe4\x16\x1f\x5b\x54\x1a\x7c\xb3\xad\xbd\x1a\x11\x22\x2f\x27\xc9\xae\xcc\x8e\xb7\x2f\x36\x26\xac\x12\x05\x13\xf1\xd6\xc2\x72\x9e\x09\x28\xa5\x90\x2e\x0d\xf7\x0a\xad\xf5\x7b\x7f\x6d\xd2\x20\x17\x7c\xb9\xfa\x42\x70\x8d\xbf\x34\xd9\xf8\xff\xb4\x8e\xb3\xca\x5d\xc1\x72\x84\x53\x8d\xe0\x0a\x23\x30\x88\xcd\x9e\x6b\x4d\xba\x8b\x6e\xdb\x4a\x51\x60\xd9\x4a\x74\xda\x94\x96\x6d\xa1\x99\xe0\xa9\xe5\xde\xb5\x6c\x5f\xf6\x26\x1b\xe0\x2a\xe2\xbd\x0d\xbf\xbe\xbd\xdd\x6e\xa0\x89\xf1\x4a\xc8\x67\xfd\xe9\xcc\x58\xb5\xbc\x38\x45\xbc\x54\xa9\x4d\x57\xf0\xed\xfb\x91\xca\xa6\x20\x51\xa9\xf7\xeb\xce\x0d\xcf\xff\x3f\x12\xac\xf1\xbe\xcf\x41\xf9\x8a\x25\xea\x56\x72\xe8\xd2\x1b\x29\xb4\xf8\xd9\x56\x24\xb9\x28\xb4\xe9\x54\x7c\x4b\x25\x7d\x50\x66\x68\x7e\x18\xcc\x1c\x8c\x69\x24\xe3\xba\x82\xc5\x7f\x8f\x0b\x20\xd7\x9f\x6e\xd2\x37\xfa\xc2\xa9\x3c\xe6\xbd\xec\x81\xb7\x3b\x3e\x4d\x1e\xe7\xaf\x75\xc0\x7e\x06\xc9\xd4\xd9\xa3\x11\xf1\x28\x67\xb3\x99\x28\xef\xbd\xab\x11\xfc\x03\xe5\xe5\xde\xf5\x67\xac\xec\x06\x0f\x9d\xb8\x10\x1e\x5f\x31\x6d\x4f\x8a\x9c\xd7\x90\xde\x93\xc3\x8e\x0c\x43\x70\x35\x03\x6d\x24\x52\x8d\x39\x70\x3c\xf4\x1e\x18\xd0\x61\x00\x96\xab\x69\xda\x84\x67\xb4\x7d\xe1\xab\x90\x84\xfd\x84\xcf\x9f\xc8\x9f\x9f\xf3\x46\xaa\x43\xfe\xe3\x47\xf2\xf2\xce\x7a\xa5\x11\xf4\x0f\x9e\xe9\x6f\xf4\x3b\x2c\x56\xdd\x67\x27\xe2\xe2\x32\x9e\xfd\x0e\x00\x00\xff\xff\x49\x76\x00\x1c\x74\x07\x00\x00")

func internalTemplatedataServerTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplatedataServerTmpl,
		"internal/templatedata/server.tmpl",
	)
}

func internalTemplatedataServerTmpl() (*asset, error) {
	bytes, err := internalTemplatedataServerTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/templatedata/server.tmpl", size: 1908, mode: os.FileMode(420), modTime: time.Unix(1538673741, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplatedataServer_implTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x54\x4d\x6f\xda\x40\x10\xbd\xf3\x2b\x5e\x51\x5a\xd9\xc8\xd9\xdc\x23\x71\x42\x6d\x4f\xa9\xaa\xd0\x3b\xda\xda\x63\xb3\x8a\xbd\x36\xb3\x0b\x01\xad\xf6\xbf\x57\x6b\x1b\x6c\x48\x91\x82\x94\x96\x0b\xb3\xc3\xce\x9b\xf7\x61\xec\x5c\x46\xb9\xd2\x84\xa9\x21\xde\x11\xaf\x54\xd5\x94\x53\xdc\x7b\x3f\x71\xee\x55\xd9\x35\xc4\x37\x55\x52\x7b\xbc\x2b\xea\xe6\xa5\xc0\xe3\x1c\xe2\xa7\x4c\x5f\x64\x41\xe2\x7b\xdd\x57\xde\x4f\x26\xce\xb1\xd4\x05\x41\x2c\x89\x77\x2a\x25\xd3\xc2\x00\xce\xdd\xad\xa5\xce\x4a\xe2\x30\xdb\xb0\xd2\x36\xc7\x74\xf5\xd9\x4c\xbb\xab\xc4\x61\x3a\xdc\x7b\x98\xa1\x6b\x20\xd0\xa0\x8a\xb4\x95\x56\xd5\x1a\xb3\x87\xee\x8a\x3d\x34\x34\xc2\xf3\x1e\xc6\xf2\x36\xb5\x70\x13\x00\xe8\x34\xc0\xb9\x01\x17\xe8\xb1\x7b\x6e\x4f\x64\xd7\x75\x66\xda\x5f\x42\x5b\xe5\x90\x3a\x83\x58\x94\x8a\xb4\x5d\x5a\x26\x59\x29\x5d\x1c\x99\x0d\x8d\xfb\x7e\x04\xc8\xb7\x3a\x45\xb4\xc6\x6c\x4c\x24\x0e\x5b\x7f\xc8\x8a\xbc\x8f\x0c\x66\x07\xc9\x4d\xda\x70\x6d\xeb\xdf\xdb\x5c\x74\x28\x1d\x62\x0c\x62\xae\xb9\x67\x1c\x3e\x4c\x76\xcb\x1a\x6b\xd1\xd1\x17\x03\xd0\x97\x55\x90\x32\x1a\xf6\xde\x99\xf6\xf8\x08\xe3\xe3\x1e\xe1\x28\x85\x4a\x43\x50\xf9\x5b\x2d\xff\x92\xba\x49\x42\x33\x04\xfb\x5e\xfe\x6d\x31\xe6\x8f\x40\x3a\x80\x7c\x9a\x43\xab\x72\x04\x7f\xf2\x86\x98\x4f\x4d\x7f\x69\x9c\x11\x4b\xd2\x59\xc4\x64\xae\x3a\xf2\x3f\xc3\x4c\x77\x27\x4b\x8c\x78\xa6\x94\xd4\x8e\x22\x4d\xaf\xce\x89\x67\xda\x6c\xc9\xd8\x5f\x87\x86\xfc\x47\xc8\xdf\x24\x58\x85\x3d\x61\xa9\x88\x66\xce\x15\x75\xc0\xc6\x71\x11\xba\xbf\xec\xc5\x2e\xa6\x0d\xe6\x57\x77\x9d\x8b\x5d\x48\x63\xbf\x06\x89\xd1\x8a\xaa\xc6\x1e\x2e\x45\x24\xed\xee\xf8\x7a\x38\x7f\x79\x2a\x5a\xde\xef\x7b\x34\xce\x82\xbc\x21\xb4\xd4\xee\x91\xd6\xda\xd2\xde\x8a\x45\xf7\x9d\xa0\x42\x2b\x4b\x3c\x91\x31\xb2\xa0\x18\xd1\xd9\x39\xe9\xb2\x8c\xcf\xc2\x3c\x3a\x5c\x7d\x94\xbd\x5a\x95\xc9\xcd\x1e\x57\xb7\x19\x9c\xda\x7d\xc8\x65\xf3\xc6\x45\x9d\x9d\x5e\xc9\xc7\x7a\xa8\x86\x72\xe8\xfd\x09\x00\x00\xff\xff\x59\x57\xb2\x68\x1f\x06\x00\x00")

func internalTemplatedataServer_implTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplatedataServer_implTmpl,
		"internal/templatedata/server_impl.tmpl",
	)
}

func internalTemplatedataServer_implTmpl() (*asset, error) {
	bytes, err := internalTemplatedataServer_implTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/templatedata/server_impl.tmpl", size: 1567, mode: os.FileMode(420), modTime: time.Unix(1538673360, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplatedataServer_streamTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\xc1\x6e\xdb\x30\x0c\xbd\xe7\x2b\xd8\xa2\x07\x3b\xe8\x94\xfb\x80\x9e\x82\x6d\xa7\x61\x43\xb2\x7b\xe0\x39\xb4\x23\xc4\x96\x5c\x89\x4e\x17\x08\xfe\xf7\x41\xb4\xac\x24\xb5\x1d\xf4\xd2\x53\x59\x9a\x7c\x8f\x4f\x8f\x8c\x73\x7b\x2c\xa4\x42\x78\xb4\x68\x4e\x68\x76\x96\x0c\x66\xf5\x23\x7c\xe9\xba\x85\x73\x6f\x92\x0e\x20\xbe\xcb\x0a\xf9\xdf\xa7\x52\x37\xc7\x12\xbe\xbe\x80\xf8\x9d\xe5\xc7\xac\x44\xf1\x43\x87\xa8\xeb\x16\x0b\xe7\x4c\xa6\x4a\x04\xb1\x45\x73\x92\x39\x5a\x86\x01\x70\xee\xa9\x87\xe7\xd6\x2d\x87\xbe\xde\x7f\x59\x2d\xa1\x4f\x40\x4f\x0d\x52\x11\x9a\x22\xf3\xdd\xcb\xd5\x50\x15\x70\x7f\x22\x1d\xf4\x7e\x80\xf5\x1f\x64\x01\xda\x80\x58\x57\x12\x15\x6d\x19\x41\xaa\x72\x20\x89\x89\x50\xbf\x5a\x81\x73\xa2\xcf\x0e\x63\x80\xb4\x90\x05\x72\xdf\x1a\xf9\xa1\xb5\xb8\x07\xa9\x80\x0e\x78\x91\xe0\x1b\x86\x0a\xc1\xa0\x74\x6e\x70\x0a\x36\xe2\x38\x2e\x03\x58\x6b\x45\xf8\x8f\x92\x14\xf2\x3e\x12\x21\x73\xd1\x32\x12\x32\x28\x05\xd8\x60\x7e\x4a\x84\x10\xe7\xcc\x34\x79\x20\xfb\xd5\x90\xd4\x2a\x85\x64\xe9\x5c\xa9\xff\xf8\x41\xc4\x06\x5f\x5b\xb4\x04\xbd\x59\x5d\xf7\x0c\x68\x8c\x36\x69\x20\x41\xb5\xbf\x7d\xbe\xf7\x4f\x75\x45\xb9\x45\xb5\xbf\x85\xb6\x8d\x56\x16\xaf\xb0\x67\x06\x62\xca\x09\xc6\x6e\x94\xbb\xc4\x33\xeb\x50\x37\x15\xd6\xa8\x28\xf3\xc8\x9f\xb0\x13\x6c\xdf\x6e\xec\x9f\x25\xd3\xe6\x14\xcd\x0b\xe3\x2c\x59\x6d\x63\x34\xe9\xbf\x6d\x71\xd3\x13\x04\xf2\x9f\xa2\x55\x39\x24\x16\x96\x63\xe0\x74\x7e\x0f\x22\x99\x41\x6a\x8d\x02\x2b\x7a\x56\x11\x3b\xae\x39\x26\x17\x26\x88\xba\xcb\xcf\x9b\xa4\x1b\xb2\x73\xee\x7d\x64\x9d\xe2\xac\xb5\x2d\x39\xe7\x6f\x3b\x0e\xbc\xc1\x1c\xe5\x09\x13\x85\x6f\xce\x0d\x18\x1e\xd0\x03\x78\x6a\x21\x44\x1a\x00\x64\xc1\xed\x0f\x2f\xa0\x64\x15\x61\xe3\x23\x28\x59\x31\x7e\xc8\x77\xf1\x89\x5e\x9f\x41\x1f\x3d\x6b\x6d\x4b\x71\x6f\xe4\x2b\xa2\x07\x7d\x9c\x61\xb8\xf5\x75\x9d\x59\xfa\xe6\x75\x26\x3b\xac\x1b\x3a\x8f\x45\xd4\xb6\x4c\x47\x23\x31\x1c\x4f\xa6\x64\x35\xb9\xf0\xf3\x77\xf7\x11\xe7\xf8\x20\x8d\xff\x65\xbc\x7b\x94\xf7\xbc\x65\xf7\x66\x17\x6d\x20\x78\x67\xd2\x8c\x8a\xc9\x2b\x9e\x0a\x2f\xb9\xff\x01\x00\x00\xff\xff\x2c\xd3\x70\xba\x71\x06\x00\x00")

func internalTemplatedataServer_streamTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplatedataServer_streamTmpl,
		"internal/templatedata/server_stream.tmpl",
	)
}

func internalTemplatedataServer_streamTmpl() (*asset, error) {
	bytes, err := internalTemplatedataServer_streamTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/templatedata/server_stream.tmpl", size: 1649, mode: os.FileMode(420), modTime: time.Unix(1538673388, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"internal/templatedata/base.tmpl": internalTemplatedataBaseTmpl,
	"internal/templatedata/bindata.go": internalTemplatedataBindataGo,
	"internal/templatedata/client.tmpl": internalTemplatedataClientTmpl,
	"internal/templatedata/client_impl.tmpl": internalTemplatedataClient_implTmpl,
	"internal/templatedata/client_stream.tmpl": internalTemplatedataClient_streamTmpl,
	"internal/templatedata/fx.tmpl": internalTemplatedataFxTmpl,
	"internal/templatedata/parameters.tmpl": internalTemplatedataParametersTmpl,
	"internal/templatedata/server.tmpl": internalTemplatedataServerTmpl,
	"internal/templatedata/server_impl.tmpl": internalTemplatedataServer_implTmpl,
	"internal/templatedata/server_stream.tmpl": internalTemplatedataServer_streamTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"internal": &bintree{nil, map[string]*bintree{
		"templatedata": &bintree{nil, map[string]*bintree{
			"base.tmpl": &bintree{internalTemplatedataBaseTmpl, map[string]*bintree{}},
			"bindata.go": &bintree{internalTemplatedataBindataGo, map[string]*bintree{}},
			"client.tmpl": &bintree{internalTemplatedataClientTmpl, map[string]*bintree{}},
			"client_impl.tmpl": &bintree{internalTemplatedataClient_implTmpl, map[string]*bintree{}},
			"client_stream.tmpl": &bintree{internalTemplatedataClient_streamTmpl, map[string]*bintree{}},
			"fx.tmpl": &bintree{internalTemplatedataFxTmpl, map[string]*bintree{}},
			"parameters.tmpl": &bintree{internalTemplatedataParametersTmpl, map[string]*bintree{}},
			"server.tmpl": &bintree{internalTemplatedataServerTmpl, map[string]*bintree{}},
			"server_impl.tmpl": &bintree{internalTemplatedataServer_implTmpl, map[string]*bintree{}},
			"server_stream.tmpl": &bintree{internalTemplatedataServer_streamTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

