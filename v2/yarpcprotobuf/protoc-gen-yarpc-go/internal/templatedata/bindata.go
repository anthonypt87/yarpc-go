// Code generated by go-bindata.
// sources:
// internal/templatedata/base.tmpl
// internal/templatedata/bindata.go
// internal/templatedata/client.tmpl
// internal/templatedata/client_impl.tmpl
// internal/templatedata/client_stream.tmpl
// internal/templatedata/fx.tmpl
// internal/templatedata/parameters.tmpl
// internal/templatedata/server.tmpl
// internal/templatedata/server_impl.tmpl
// internal/templatedata/server_stream.tmpl
// DO NOT EDIT!

package templatedata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _internalTemplatedataBaseTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xcc\x31\x4f\xc3\x30\x10\x05\xe0\xdd\xbf\xe2\x11\x75\x00\x89\x24\x7b\x25\x26\x0a\xa8\x4b\x5b\x89\xee\xe8\x70\xae\xc1\x22\x8e\xad\xb3\xa9\xa8\x2c\xff\x77\x44\x93\x02\x12\x4d\x37\xfb\x7d\xf7\x5e\x5d\xe3\xde\x35\x8c\x96\x7b\x16\x8a\xdc\xe0\xf5\x00\x2f\x2e\x3a\x5d\xb6\xdc\x97\x07\x12\xaf\xcb\xd6\xa9\xba\x46\x70\x1f\xa2\x79\x8e\x94\xaa\x47\xd3\x71\xb5\x22\xcb\x39\x7f\xcb\x62\x8d\xd5\x7a\x8b\x87\xc5\x72\x7b\xa5\x94\x27\xfd\x4e\x2d\xff\xdc\x6d\x86\x7f\xf5\xe4\xc6\x57\xce\x4a\xa5\x64\x76\x18\xfc\x99\x65\x6f\x34\x07\x94\x39\x2b\xc0\x58\xef\x24\xe2\x5a\x01\x40\x4a\x42\x7d\xcb\x98\x0d\xe9\x86\xe2\xdb\x2d\x66\xd4\x19\x0a\x98\xdf\xa1\x5a\x1e\xe3\x53\x75\x68\x0c\x9c\x33\x8a\x94\xfe\xf4\x72\x2e\xc6\x49\xee\x9b\xb1\x70\xa3\x7e\x7f\x2a\xa5\xc8\xd6\x77\x14\x19\x85\xee\x0c\xf7\xb1\x40\x75\xa4\xff\xf2\x62\xac\xef\x2e\x70\x88\xc2\x64\xcf\x1d\x04\x96\x3d\xcb\xb4\x4c\x2e\x8f\x3c\xbd\xbc\xfb\x3c\x97\x7a\x12\xb2\x1c\x59\xc2\x49\xbf\x02\x00\x00\xff\xff\xb7\xa9\x37\x42\xf4\x01\x00\x00")

func internalTemplatedataBaseTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplatedataBaseTmpl,
		"internal/templatedata/base.tmpl",
	)
}

func internalTemplatedataBaseTmpl() (*asset, error) {
	bytes, err := internalTemplatedataBaseTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/templatedata/base.tmpl", size: 500, mode: os.FileMode(420), modTime: time.Unix(1538673775, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplatedataBindataGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func internalTemplatedataBindataGoBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplatedataBindataGo,
		"internal/templatedata/bindata.go",
	)
}

func internalTemplatedataBindataGo() (*asset, error) {
	bytes, err := internalTemplatedataBindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/templatedata/bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1538675225, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplatedataClientTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x52\xcb\x6e\xdb\x30\x10\xbc\xeb\x2b\x06\x46\x1f\xb6\xe1\xd2\xf7\x00\x3d\x14\x06\xd2\x53\xdd\x34\xe9\xa5\xa7\x82\xa1\x57\x32\x11\x85\x54\x48\xaa\x6e\xb0\xe0\xbf\x17\x14\x15\x3d\xec\x02\x2d\x10\x5d\x44\xee\x62\x67\x66\x87\xc3\x7c\xa0\x52\x1b\xc2\x42\xd5\x9a\x4c\x58\xe0\x43\x8c\x05\xf3\x49\x87\x23\xc4\xb5\xae\xa9\xbb\xbe\xa9\x6c\xf3\x50\xe1\xea\x23\xc4\x8d\x54\x0f\xb2\x22\xf1\xd9\xf6\xa7\x18\x8b\x82\xd9\x49\x53\x11\xc4\x1d\xb9\x5f\x5a\x91\xef\x60\x0a\x80\x79\xbb\xc6\xae\x83\x86\x36\x81\x5c\x29\x15\x61\xbd\xcd\xdd\xed\x16\xcc\x22\xb7\x63\x84\xf6\x08\x47\x4a\xa5\xbd\x7c\xa4\x18\xe1\x33\xda\x7b\x0f\x75\x06\x21\x0a\x20\x3c\x37\x34\x9f\x1f\x08\xb8\x00\x12\x79\xaf\xea\x0b\x85\xa3\x3d\x64\x51\x40\x6e\xe9\x12\xd6\xa1\x1f\xbe\x0b\x8e\xe4\xa3\x36\x55\xde\x80\xdc\x58\x18\x67\x30\x2a\x5b\x0e\x25\x40\x59\x13\xe8\x77\x10\xbb\xfc\xdf\x4c\x5a\x1d\x8b\xb1\xe1\x92\x66\x8a\x9a\xbe\x35\x73\x65\xbf\xa7\x85\xc4\x2d\x3d\xb5\xe4\x03\xb2\xe7\x31\xce\x01\xc9\x1c\xce\x86\x85\x10\xcf\xd2\x35\x4a\xec\x64\x5d\x7f\x6d\x82\xb6\x66\x1c\x59\x61\xc9\x2c\x32\xef\x8b\x4f\x1b\x90\x73\xd6\xad\x06\x2b\xa8\xf6\xf4\xaa\x3d\xff\x53\xfd\xbf\x94\xce\x60\x7c\x63\x8d\xa7\x11\xe7\x42\xf4\xc4\x88\xe9\xed\x22\x76\xca\x1a\x1f\x5c\xab\x12\xdd\x34\x79\x7b\x3a\x4d\xc3\x73\xdf\xea\xfa\xe0\x21\x61\xe8\x84\x1f\x9f\x6e\x6f\x76\x2f\xa1\x2b\xad\xfb\x7b\x2e\x53\x08\xcb\xd6\xa8\x33\xa8\xa5\x42\xbf\x66\x57\xd8\xc0\x36\xc1\x0f\xcb\x37\xce\x06\x7b\xdf\x96\x7d\x37\xdb\xb0\x9a\xe5\x38\xa7\xd7\x51\x68\x9d\xc1\xbb\x9f\xe9\x01\xbb\x50\xc6\xc8\xbe\x7b\xc9\x2b\xcc\xa1\xf6\x74\x9a\x3e\xf1\x52\x6d\xc0\xdc\x38\x6d\x42\x89\xc5\xdb\xa7\x05\xc4\xf5\xb7\x7d\xf2\x30\x29\x11\x42\xac\x7a\xa3\x46\xdf\xc6\xe3\x58\xfb\x13\x00\x00\xff\xff\x52\x2a\x51\xa1\x1c\x04\x00\x00")

func internalTemplatedataClientTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplatedataClientTmpl,
		"internal/templatedata/client.tmpl",
	)
}

func internalTemplatedataClientTmpl() (*asset, error) {
	bytes, err := internalTemplatedataClientTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/templatedata/client.tmpl", size: 1052, mode: os.FileMode(420), modTime: time.Unix(1538673714, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplatedataClient_implTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x55\x4b\x6f\xdb\x3c\x10\xbc\xeb\x57\x4c\x8c\xe4\x83\x65\x28\xcc\xdd\x1f\x7c\x32\xd2\x9e\xfa\x40\xdd\xbb\xc1\xd2\x2b\x85\xb0\x44\xca\x24\xdd\xc4\x20\xf8\xdf\x0b\x92\xf2\xab\x4e\x72\x6a\x10\x14\x3d\x79\xb5\xe6\xec\xcc\xec\xf2\xe1\xfd\x8a\x6a\xa9\x08\x23\xd1\x4a\x52\x6e\x29\xbb\xbe\x1d\xe1\x36\x84\xc2\xfb\x47\xe9\x1e\xc0\x3e\xc8\x96\xd2\xe7\x75\xa3\xfb\x75\x83\xe9\x0c\xec\x2b\x17\x6b\xde\x10\xfb\xa8\x87\x28\x84\xa2\xf0\xde\x70\xd5\x10\xd8\x82\xcc\x4f\x29\xc8\xa6\x32\x80\xf7\xd7\x82\xb7\x2d\x99\x08\xed\x8d\x54\xae\xc6\x68\x79\x63\x47\x60\xf3\x44\x1a\xc1\x71\xd9\xdd\x04\x39\x81\xa8\x82\x3a\x52\x8e\x3b\xa9\x15\x26\x77\x79\x89\xdb\xf5\x74\x2c\x17\x02\xac\x33\x5b\xe1\xe0\x0b\x00\xf1\x83\x78\x87\x1d\x37\xbd\xe8\x8d\x76\xfa\xc7\xb6\x66\x8b\x94\xcc\x65\x0b\x60\x60\x1a\x84\x7e\x22\xf7\xa0\x57\x36\xa9\x8c\x69\x59\x83\xab\xd5\x5e\x56\x86\x4a\xd5\x64\x47\x64\x8e\x89\xdb\x01\x02\xd4\x5b\x25\x30\x16\x98\x9c\xc8\x2a\xe1\x3d\xfb\xcc\x3b\x0a\x61\x2c\xdc\x13\x84\x56\x8e\x9e\x1c\x9b\xe7\xdf\x0a\xba\x77\x16\x8c\xb1\x24\x95\xcd\x79\xdb\x7e\xe9\xa3\xd1\x12\x63\xef\xcf\x24\x87\x50\x81\x8c\xd1\xa6\x1c\x4c\x26\xa3\x29\x17\xbb\x29\x58\x36\x9d\x6a\x64\x5c\x64\xac\xe0\xfd\xbe\xd1\x37\x9b\x11\x06\x31\x99\x98\x31\x56\x1e\x4a\xc9\x3a\x95\xba\x9a\x41\xc9\xf6\x84\x02\x30\xe4\xb6\x46\xc5\x74\x62\x3b\xfc\x13\x8a\xdf\x56\xfc\xb7\xbc\xd0\xec\xb3\xaa\x29\x6c\xa8\x62\x85\xe2\x14\xea\x3d\xb5\x96\x22\xf3\x45\x9f\xff\x9d\xb6\xbe\x55\x47\xff\xf0\x46\x35\xb4\x89\x80\x46\x7f\x8f\x27\x8f\x7d\xa3\xcd\x96\xac\x43\xbe\x09\xf6\xce\xff\xea\x96\x0f\xb0\xe9\x0c\x96\x2d\x48\xad\xc6\x86\x36\xe5\xff\xef\x75\x28\xde\x71\x5c\x67\x38\xdb\x6b\x65\xe9\x04\x78\x31\xb9\xce\x36\xcf\xcf\xee\xd5\xa9\x19\xda\x54\xc9\x04\x3d\xee\x49\xde\xe0\x5a\xb2\x15\xf4\x3a\x0a\xeb\x6c\xc3\x5e\x35\x76\xc6\x78\xa5\xd7\x2f\x52\x9d\x3f\x2a\x73\x6e\xdd\x7d\xec\x48\xdc\xe4\xf7\x5d\xef\x76\xa7\x6e\x0c\xd9\xf2\xe5\x9d\x91\xe4\x3d\x33\x7e\xb5\x3a\x3c\x97\xfb\xf8\x18\x1d\xc3\x63\xee\x57\x00\x00\x00\xff\xff\x83\x45\x62\xed\xbb\x07\x00\x00")

func internalTemplatedataClient_implTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplatedataClient_implTmpl,
		"internal/templatedata/client_impl.tmpl",
	)
}

func internalTemplatedataClient_implTmpl() (*asset, error) {
	bytes, err := internalTemplatedataClient_implTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/templatedata/client_impl.tmpl", size: 1979, mode: os.FileMode(420), modTime: time.Unix(1538674283, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplatedataClient_streamTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x55\xcd\x8e\x9b\x30\x10\xbe\xe7\x29\x66\x57\x7b\x80\x68\xeb\xdc\x5b\xed\xa1\x8a\xb6\x3d\xf5\x47\x49\xef\x2b\x0a\x03\xb1\x02\x36\x6b\x9b\x6c\x23\x8b\x77\xaf\x6c\x6c\x07\x42\x88\x68\xd4\xde\x7a\x8a\x33\x78\xbe\x9f\xe1\xb3\xd1\x3a\xc3\x9c\x32\x84\xfb\xb4\xa4\xc8\xd4\x8b\x54\x02\x93\xea\x1e\xde\xb5\xed\x42\xeb\x37\xaa\x76\x40\x3e\xd1\x12\xed\xdf\x87\x82\xd7\xfb\x02\xde\x3f\x01\xf9\x9e\xa4\xfb\xa4\x40\xf2\x99\xbb\x55\xdb\x2e\x16\x5a\x8b\x84\x15\x08\x64\x8b\xe2\x40\x53\x94\x16\x06\x40\xeb\x87\x0e\xde\xb6\xae\xed\xd2\xec\x37\x4f\x56\x4b\xe8\x0a\xd0\x51\x03\x65\x0a\x45\x9e\x98\xee\xe5\xca\xef\x72\xb8\x5f\x50\xed\x78\xe6\x61\xcd\x03\x9a\x03\x17\x1e\x73\x6b\x11\x28\x2b\x3a\x05\x28\x42\xc1\xed\x5f\xad\x40\x6b\xd2\x55\xbd\x0c\xa0\x12\x12\x47\x6e\x5a\x03\x3f\x34\x12\x33\xa0\x0c\xd4\x0e\x4f\x16\x4c\x83\xdf\x41\x2c\xa8\x3a\xd6\x78\x09\x36\xe0\x68\xbb\x0d\x60\xcd\x99\xc2\x5f\x2a\x8a\x21\xed\x56\xc4\x55\x4e\x5e\x46\x46\xbc\x53\x80\x2d\xb2\x2c\x5a\x6a\x5d\xf0\x1f\x86\x90\x6c\xf0\xb5\x41\xa9\xa0\x7b\x29\x6d\xfb\x08\x84\x90\x63\x22\xea\xd4\x29\xf9\x56\x2b\xca\x59\x0c\x28\x04\x17\x8e\x02\x59\x36\x1c\xde\xf9\xa0\x7a\x84\x1b\x4c\x0f\xd1\x04\xe6\x50\x88\xac\x39\x93\xd8\x53\x62\x29\x63\x6f\xbb\xe4\x12\xad\xfa\x5b\x04\x26\x2c\x1b\x4f\x25\x62\x5c\x8d\xa4\xc7\x3d\xed\x96\xf3\x23\xcb\xfe\x8e\x87\xa1\xac\x76\x54\x3b\xad\x27\x22\x5d\xd5\x25\x56\xc8\x54\x62\x98\xff\x41\xae\x6d\x04\x5f\xc6\x19\x94\x4a\x34\xa9\x0a\x01\x74\x72\x96\x76\x1a\xb5\xe0\x8a\xff\x6c\xf2\x41\x8f\x33\x68\x7f\xf2\x86\xa5\x10\xa5\xb0\x1c\x03\xc7\xd3\x59\x0e\x64\x02\x55\x23\x18\xa4\xa4\x63\x25\xa1\xa3\xcf\x71\x31\xf4\xce\xd4\x55\x7e\x9b\x27\x81\xaf\x70\xf5\x44\xf0\x5a\xc9\xab\xc7\x62\x52\xad\xc7\xef\x30\x08\x21\xf1\xc5\x77\x3f\x7d\x90\xe6\x98\xb0\xe9\xbc\xa6\x71\x56\x44\x83\x87\x4a\x16\xb6\x66\x6e\xd9\x60\x64\x83\x29\xd2\x03\x46\x5a\x93\xaf\xf8\xe6\x41\xfc\x70\x82\x31\x00\x9a\xdb\xde\xbb\x27\x60\xb4\x0c\x98\x61\x32\x8c\x96\x16\xdc\xd5\xdb\x30\x37\xf9\x08\x7c\x6f\x28\x2b\x59\x90\xab\x82\x7b\x4c\x77\x7c\x3f\x41\x31\xcc\xe6\x3a\x91\xea\xd9\xb8\x34\xfa\x9f\xab\x5a\x1d\xfb\x0e\x2a\x59\xc4\x23\x3d\x16\xca\xca\x62\xb4\x9c\x9f\xe7\x70\x49\xdd\x9e\x19\x8b\x11\xcd\xcc\xcb\x1f\xdc\x6b\x73\xa2\x34\xb8\xf0\xe6\x47\xea\xfc\xc0\x9c\x25\xca\x65\xa2\x9f\xa7\xa1\xc9\x0f\xb7\x64\xe6\x7f\x4e\x87\x39\xf5\x6a\x27\xc2\x72\xf1\x3b\x73\x69\x79\xaa\xfd\x0e\x00\x00\xff\xff\x37\xdd\xa9\xbf\xd7\x09\x00\x00")

func internalTemplatedataClient_streamTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplatedataClient_streamTmpl,
		"internal/templatedata/client_stream.tmpl",
	)
}

func internalTemplatedataClient_streamTmpl() (*asset, error) {
	bytes, err := internalTemplatedataClient_streamTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/templatedata/client_stream.tmpl", size: 2519, mode: os.FileMode(420), modTime: time.Unix(1538674641, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplatedataFxTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\x5d\x6f\xd3\x30\x14\x7d\xcf\xaf\xb8\x8a\x86\x94\x4e\x9b\x2b\xf1\x58\x09\x21\x01\x2a\xec\x65\xad\x80\x37\x84\x98\x97\xde\xa4\xd6\x32\xdb\xd8\x4e\x9b\xc9\xca\x7f\x47\xfe\x68\xf3\xd1\x14\xca\xf6\xb0\xba\xd7\xc7\xe7\x1e\xdf\x7b\x8f\x6b\xed\x06\x0b\xc6\x11\xd2\xa2\x49\xe1\xb6\x6d\x13\x6b\xf7\xcc\x6c\x81\x2c\x59\x85\xfe\xeb\x55\x29\xe4\x53\x09\x8b\x77\x40\xd6\x34\x7f\xa2\x25\x92\xcf\x22\xae\xda\x36\x49\xac\x55\x94\x97\x08\xe4\x1b\xaa\x1d\xcb\x51\x7b\x9a\x04\xc0\xda\xf9\x35\x2c\x1b\xc8\x2b\x86\xdc\x68\xb8\x9e\x1f\xe2\x57\x45\xf3\xd1\x07\x1d\xab\x54\x8c\x9b\x02\xd2\x65\xf3\x46\xa7\x40\xc2\x46\x40\xce\xe7\x7d\x70\xdb\xae\xa9\xa2\xcf\x1a\x82\x64\x0d\x66\x8b\x20\x5d\x08\x0d\x2a\x1d\xf0\x0a\x7f\xd7\x4c\xe1\x06\x8c\x00\xa9\xc4\x8e\x6d\x10\x28\x58\x7b\xe4\x05\xc6\x8d\x00\xca\x03\x7c\xd9\x00\x95\xb2\x62\x39\x35\x4c\x70\x92\x00\x98\x17\x89\x93\x59\xb5\x51\x75\x6e\xc0\x26\x00\x00\x45\x43\xee\x78\xe2\x97\xf1\x26\x2f\x54\xc9\x3c\x66\x49\x00\x26\xf5\x7f\x45\x5d\x57\xe6\xa0\x4b\x0f\x85\x05\x7c\x54\x77\x91\xb0\x48\x37\x16\xb6\xaa\xcd\x40\xd9\x30\xc7\x41\xd8\x3d\xee\x07\x64\xaf\x50\x75\x03\xb5\x66\xbc\xf4\x7d\x28\xd9\x0e\x63\x4d\x39\x7d\x46\x28\x84\x02\x25\x6a\xc3\x78\x49\x7c\x38\xec\x39\x7d\xeb\x90\x28\x8b\x11\x3f\x10\x7e\xc6\xda\x96\x8c\x55\x65\xa9\x0e\x53\x75\xeb\x58\xd3\xd9\xcd\xf1\x10\x21\x24\xae\x67\xe1\xf3\xfb\xea\xd3\x2a\x7b\x46\xae\xf3\xed\x6c\x01\x5f\xc4\x1e\xf6\xac\xaa\xc0\x6c\x99\x86\xbd\x50\x4f\xc0\x38\xec\xde\xbe\x4f\x00\x8a\x9a\xe7\x27\xf7\xcf\x7e\xb9\x42\x32\x5e\xde\x80\x90\x46\x3b\x7e\xdf\x52\xa9\x84\x11\x8f\x75\x11\x2b\xb2\x92\xee\xe6\x33\x57\x11\x54\x05\xcd\xd1\xb6\xb1\xf2\x0a\x4d\xad\xb8\x27\xcf\xe4\xd4\x04\xcd\x26\xbb\x17\x0e\x1f\x8f\x4f\x40\x0e\x88\x43\x43\x17\xa7\xda\x65\x54\x17\xb4\x13\x42\x7c\xa1\xdc\x5f\x9b\x1c\xfe\x0f\x3c\x29\x95\xc8\x71\x53\x2b\x1c\xd9\x72\xdd\xc5\x47\xd6\xf4\xe6\xbc\x77\xad\x4d\x3b\x50\x3a\xf4\x69\xb7\x71\xde\xab\xf4\xef\x5e\x75\x38\x6b\xfd\x5b\x82\x2a\x4c\x65\xa4\xbc\xdc\x1f\x13\x32\xce\x99\x37\xe4\xe9\x67\x1c\x7b\xb7\x4f\x36\xf6\xef\x48\x6c\x38\xd5\x2b\xed\xff\x8a\xfd\x97\xa1\x7b\xdd\xf9\xf1\x33\x3c\x38\xc7\x10\x3c\x94\x4a\xd4\x72\x91\xfa\x78\xd1\xa4\x0f\x13\x66\xef\x27\xbb\xfc\x1a\x93\x97\x80\x3b\x03\xd8\x48\xcc\x4d\xec\x0c\x1d\xf4\xcd\x08\x78\x44\x90\x0a\xb5\x7b\x82\x18\xf7\x49\x72\xc1\x0d\x65\x1c\xd5\x6b\x9e\x84\xbe\xf6\xec\xec\x43\x30\xf0\xf6\xf0\xc8\x65\x9e\x3d\x1d\x9e\xd9\xd9\x46\x4d\x79\xf7\x14\xd6\xf9\xb7\xdb\x5b\xc0\x87\x9a\x55\x1b\x6b\xbd\xa5\xda\xb6\xdb\xc9\x64\x2c\xe2\xa4\x85\xad\x45\xbe\x09\x3f\xb0\xc7\x65\x17\xfb\x13\x00\x00\xff\xff\xd3\x10\xb5\x45\xce\x07\x00\x00")

func internalTemplatedataFxTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplatedataFxTmpl,
		"internal/templatedata/fx.tmpl",
	)
}

func internalTemplatedataFxTmpl() (*asset, error) {
	bytes, err := internalTemplatedataFxTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/templatedata/fx.tmpl", size: 1998, mode: os.FileMode(420), modTime: time.Unix(1538675163, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplatedataParametersTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xc1\x6a\xc3\x30\x0c\x86\xef\x79\x8a\x9f\x32\x46\x5b\x98\x7b\x1f\xf4\xb8\xed\xb4\x51\xb6\xbd\x80\x49\xd4\x34\x74\xb5\x3d\xdb\x69\x09\x42\xef\x3e\xea\x38\x59\xba\x96\xdd\x24\xa1\xff\x43\x9f\x98\x2b\xda\x36\x86\x30\x73\xda\xeb\x03\x45\xf2\x61\x86\x07\x91\x82\xf9\xd4\xc4\x1d\xd4\x73\xf3\x45\xa9\xbd\xab\xad\xdb\xd7\x78\x5c\x43\x6d\x74\xb9\xd7\x35\xa9\x17\x9b\x2b\x91\xa2\x60\xf6\xda\xd4\x04\xf5\x41\xfe\xd8\x94\x14\x12\xa6\x00\x98\x57\x4b\x6c\x06\x3c\x4a\x6b\x42\xf4\x6d\x19\xad\x0f\x58\xae\x86\x9d\x1c\x7e\xa5\xb8\xb3\x55\x9f\x05\x80\x6d\x6b\x4a\x30\xab\x37\x3a\xbd\xd3\x77\x4b\x21\x8a\xcc\x17\x00\xc3\x53\x6c\xbd\xc1\x3d\x73\x6d\x3f\x3b\x47\x50\x79\x01\xfd\xa5\x22\x2c\xc0\x0d\x4a\x70\xd6\x04\x4a\x98\xdb\x94\x7e\x61\x8a\x91\x74\x22\x99\xea\xc2\xe9\xe9\xe0\x62\x87\xf1\x71\x88\x9d\xa3\xa9\x52\xff\xc0\x6c\x94\x7d\x8e\xda\x63\x9e\xaa\x51\x79\x74\x3d\xcf\x54\x82\x8e\xaa\xc0\xfa\x7f\xc3\xab\xe0\x60\xf7\x37\x78\x25\x95\x8f\x18\xa4\xce\xdd\xe2\x42\x73\x22\x3c\x96\xbf\xb3\x9f\x00\x00\x00\xff\xff\x63\xc0\xf3\x97\x3a\x02\x00\x00")

func internalTemplatedataParametersTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplatedataParametersTmpl,
		"internal/templatedata/parameters.tmpl",
	)
}

func internalTemplatedataParametersTmpl() (*asset, error) {
	bytes, err := internalTemplatedataParametersTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/templatedata/parameters.tmpl", size: 570, mode: os.FileMode(420), modTime: time.Unix(1538674376, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplatedataServerTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x54\x51\x6f\xd3\x3c\x14\x7d\xcf\xaf\xb8\xaa\xf6\x7d\xb4\xd3\x70\xdf\x23\xf1\x00\x95\x06\x2f\x4c\x65\x83\x07\x84\x10\x32\xc9\x4d\x6a\xad\xb3\x33\xdb\x59\xa9\x2c\xff\x77\xe4\xd8\x89\x9d\x64\xd5\x2a\x81\xe8\x4b\x6d\xdf\x73\x8f\xcf\xbd\x3e\x37\xc6\x94\x58\x31\x8e\xb0\x50\x28\x9f\x50\x2e\xe0\xb5\xb5\x99\x31\x07\xa6\x77\x40\xae\xd9\x1e\xbb\xed\x45\x2d\x9a\xfb\x1a\xf2\x37\x40\xb6\xb4\xb8\xa7\x35\x92\xf7\x22\xac\xac\xcd\x32\x63\x24\xe5\x35\x02\xb9\x43\xf9\xc4\x0a\x54\x1d\x0d\x80\x31\x17\xea\xa9\xe8\xf2\x6e\xe8\x43\x07\x75\x87\xeb\x4b\x08\x40\x60\x5c\xa3\xac\x68\x81\x70\xb9\xf6\xe1\xf5\x1a\x8c\xe9\x88\x50\x5a\x0b\x4c\x81\xde\x61\x60\xb2\x16\x94\x4f\x7c\xa5\xc0\x2b\x8e\x0c\x24\x03\xd0\xc7\x06\xc7\xe9\x03\xbf\xc9\x00\xdc\xe5\x41\xe9\x47\xd4\x3b\x51\xf6\x42\x7d\x88\x55\x20\x24\x90\xcd\x9e\x21\xd7\x77\x5a\x22\x7d\x60\xbc\x86\xc0\x16\x0f\x62\x8e\xcb\x0a\xa5\x2d\x87\xa3\x40\xc5\x85\x9e\x73\xa5\xa9\xee\x77\x69\x4c\x2d\x3e\x3b\xd5\xe4\x16\x1f\x5b\x54\x1a\x7c\xb3\xad\xbd\x1a\x11\x22\x2f\x27\xc9\xae\xcc\x8e\xb7\x2f\x36\x26\xac\x12\x05\x13\xf1\xd6\xc2\x72\x9e\x09\x28\xa5\x90\x2e\x0d\xf7\x0a\xad\xf5\x7b\x7f\x6d\xd2\x20\x17\x7c\xb9\xfa\x42\x70\x8d\xbf\x34\xd9\xf8\xff\xb4\x8e\xb3\xca\x5d\xc1\x72\x84\x53\x8d\xe0\x0a\x23\x30\x88\xcd\x9e\x6b\x4d\xba\x8b\x6e\xdb\x4a\x51\x60\xd9\x4a\x74\xda\x94\x96\x6d\xa1\x99\xe0\xa9\xe5\xde\xb5\x6c\x5f\xf6\x26\x1b\xe0\x2a\xe2\xbd\x0d\xbf\xbe\xbd\xdd\x6e\xa0\x89\xf1\x4a\xc8\x67\xfd\xe9\xcc\x58\xb5\xbc\x38\x45\xbc\x54\xa9\x4d\x57\xf0\xed\xfb\x91\xca\xa6\x20\x51\xa9\xf7\xeb\xce\x0d\xcf\xff\x3f\x12\xac\xf1\xbe\xcf\x41\xf9\x8a\x25\xea\x56\x72\xe8\xd2\x1b\x29\xb4\xf8\xd9\x56\x24\xb9\x28\xb4\xe9\x54\x7c\x4b\x25\x7d\x50\x66\x68\x7e\x18\xcc\x1c\x8c\x69\x24\xe3\xba\x82\xc5\x7f\x8f\x0b\x20\xd7\x9f\x6e\xd2\x37\xfa\xc2\xa9\x3c\xe6\xbd\xec\x81\xb7\x3b\x3e\x4d\x1e\xe7\xaf\x75\xc0\x7e\x06\xc9\xd4\xd9\xa3\x11\xf1\x28\x67\xb3\x99\x28\xef\xbd\xab\x11\xfc\x03\xe5\xe5\xde\xf5\x67\xac\xec\x06\x0f\x9d\xb8\x10\x1e\x5f\x31\x6d\x4f\x8a\x9c\xd7\x90\xde\x93\xc3\x8e\x0c\x43\x70\x35\x03\x6d\x24\x52\x8d\x39\x70\x3c\xf4\x1e\x18\xd0\x61\x00\x96\xab\x69\xda\x84\x67\xb4\x7d\xe1\xab\x90\x84\xfd\x84\xcf\x9f\xc8\x9f\x9f\xf3\x46\xaa\x43\xfe\xe3\x47\xf2\xf2\xce\x7a\xa5\x11\xf4\x0f\x9e\xe9\x6f\xf4\x3b\x2c\x56\xdd\x67\x27\xe2\xe2\x32\x9e\xfd\x0e\x00\x00\xff\xff\x49\x76\x00\x1c\x74\x07\x00\x00")

func internalTemplatedataServerTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplatedataServerTmpl,
		"internal/templatedata/server.tmpl",
	)
}

func internalTemplatedataServerTmpl() (*asset, error) {
	bytes, err := internalTemplatedataServerTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/templatedata/server.tmpl", size: 1908, mode: os.FileMode(420), modTime: time.Unix(1538673741, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplatedataServer_implTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x54\x4d\x6f\xda\x40\x10\xbd\xf3\x2b\x5e\x51\x5a\xd9\xc8\xd9\xdc\x23\x71\x42\x69\x4f\xa9\xaa\xd0\x3b\xda\xda\x63\xb3\x8a\xbd\x36\xb3\x0b\x01\xad\xf6\xbf\x57\x6b\x1b\x6c\x92\x22\x05\x29\x0d\x17\x66\x87\x9d\x37\xef\xc3\xc6\xb9\x8c\x72\xa5\x09\x53\x43\xbc\x23\x5e\xa9\xaa\x29\xa7\xb8\xf5\x7e\xe2\xdc\x8b\xb2\x6b\x88\xef\xaa\xa4\xf6\x78\x53\xd4\xcd\x73\x81\xfb\x39\xc4\x2f\x99\x3e\xcb\x82\xc4\x8f\xba\xaf\xbc\x9f\x4c\x9c\x63\xa9\x0b\x82\x58\x12\xef\x54\x4a\xa6\x85\x01\x9c\xbb\x59\x4b\x9d\x95\xc4\x61\xb6\x61\xa5\x6d\x8e\xe9\xea\xab\x99\x76\x57\x89\xc3\x74\xb8\x77\x37\x43\xd7\x40\xa0\x41\x15\x69\x2b\xad\xaa\x35\x66\x77\xdd\x15\x7b\x68\x68\x84\xe7\x3d\x8c\xe5\x6d\x6a\xe1\x26\x00\xd0\x69\x80\x73\x03\x2e\xd0\x63\xf7\xdc\x1e\xc9\xae\xeb\xcc\xb4\xbf\x84\xb6\xca\x21\x75\x06\xb1\x28\x15\x69\xbb\xb4\x4c\xb2\x52\xba\x38\x32\x1b\x1a\xb7\xfd\x08\x90\x6f\x75\x8a\x68\x8d\xd9\x98\x48\x1c\xb6\xfe\x94\x15\x79\x1f\x19\xcc\x0e\x92\x9b\xb4\xe1\xda\xd6\x7f\xb6\xb9\xe8\x50\x3a\xc4\x18\xc4\x5c\x73\xcf\x38\x7c\x98\xec\x96\x35\xd6\xa2\xa3\x2f\x06\xa0\x6f\xab\x20\x65\x34\xec\xbd\x33\xed\xf1\x1e\xc6\xc7\x3d\xc2\x51\x0a\x95\x86\xa0\xf2\xb7\x5a\xfe\x27\x75\x93\x84\x66\x08\xf6\xbd\xfc\xdb\x62\xcc\x1f\x81\x74\x00\xf9\x32\x87\x56\xe5\x08\xfe\xe4\x0d\x31\x9f\x9a\xfe\xb5\x71\x46\x2c\x49\x67\x11\x93\xb9\xe8\xc8\x67\x86\x99\xee\x4e\x96\x18\xf1\x44\x29\xa9\x1d\x45\x01\x8f\x5e\x9e\x68\xb3\x25\x63\xfd\x47\x48\xdf\x24\x58\x85\x1d\x61\xa1\x88\x66\xce\x15\xf5\xef\xf0\x76\x88\x7e\x09\xba\xd7\xf5\xd5\x2e\xa6\x0d\xe6\x17\x77\x9d\x0b\x5d\x48\x63\x1f\x82\xbc\xc0\xfe\xa1\x6a\xec\xe1\xc4\x3f\x69\xd7\xc6\x97\x33\xf9\xc7\xc3\xd0\x52\x7e\xdf\x13\x71\x96\xdf\x15\x59\xa5\x76\x8f\xb4\xd6\x96\xf6\x56\x2c\xba\xef\x04\x15\x5a\x45\xe2\x91\x8c\x91\x05\xc5\x88\xce\xce\x49\x17\x61\x7c\x96\xe1\xd1\xdc\xea\xa3\x9c\xd5\xaa\x4c\xae\xb1\xb7\xba\xce\xdb\xd4\xee\x43\x24\x9b\x37\x06\xea\xec\xf4\x27\x7c\xac\x87\x6a\x28\x87\xde\xdf\x00\x00\x00\xff\xff\xd7\x48\x97\xe5\x11\x06\x00\x00")

func internalTemplatedataServer_implTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplatedataServer_implTmpl,
		"internal/templatedata/server_impl.tmpl",
	)
}

func internalTemplatedataServer_implTmpl() (*asset, error) {
	bytes, err := internalTemplatedataServer_implTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/templatedata/server_impl.tmpl", size: 1553, mode: os.FileMode(420), modTime: time.Unix(1538674421, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplatedataServer_streamTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\x4d\x6f\xdb\x30\x0c\xbd\xe7\x57\xb0\x45\x0f\x71\xd0\x29\xf7\x01\x3d\x05\xdd\x4e\xfb\x40\xb2\x7b\xe1\x39\xb4\x23\xc4\x96\x5c\x89\x4e\x17\x08\xfe\xef\x83\x68\x59\x71\x6a\x3b\xe8\xa5\xa7\xb2\x34\xf9\xde\xa3\x1e\x19\xe7\xf6\x98\x4b\x85\x70\x6f\xd1\x9c\xd0\xbc\x58\x32\x98\x56\xf7\xf0\xa5\x6d\x17\xce\xbd\x49\x3a\x80\xf8\x26\x4b\xe4\x7f\x1f\x0a\x5d\x1f\x0b\xf8\xfa\x04\xe2\x77\x9a\x1d\xd3\x02\xc5\x77\x1d\xa2\xb6\x5d\x2c\x9c\x33\xa9\x2a\x10\xc4\x0e\xcd\x49\x66\x68\x19\x06\xc0\xb9\x87\x0e\x9e\x5b\x77\x1c\xfa\x7a\xff\x65\xbd\x82\x2e\x01\x1d\x35\x48\x45\x68\xf2\xd4\x77\xaf\xd6\x7d\x55\xc0\xfd\x81\x74\xd0\xfb\x1e\xd6\x7f\x90\x39\x68\x03\x62\x53\x4a\x54\xb4\x63\x04\xa9\x8a\x9e\x24\x26\x42\xfd\x7a\x0d\xce\x89\x2e\xdb\xcb\x00\x69\x21\x0d\xe4\xbe\x35\xf2\x43\x63\x71\x0f\x52\x01\x1d\xf0\x32\x82\x6f\xe8\x2b\x04\x83\xd2\xb9\xc6\x29\xd8\x88\xe3\xb8\x0c\x60\xa3\x15\xe1\x3f\x5a\x26\x90\x75\x91\x08\x99\xcb\x2c\xa3\x41\xfa\x49\x01\xb6\x98\x9d\x96\x42\x88\x73\x6a\xea\x2c\x90\xfd\xaa\x49\x6a\x95\xc0\x72\xe5\x5c\xa1\xff\x78\x21\x62\x8b\xaf\x0d\x5a\x82\xce\xac\xb6\x7d\x04\x34\x46\x9b\x24\x90\xa0\xda\x5f\x3f\xdf\xfb\xa7\x1a\x50\xee\x50\xed\xaf\xa1\x6d\xad\x95\xc5\x01\xf6\x8c\x20\xa6\x9c\x60\x6c\x47\xb9\x4b\x3c\xb3\x0e\x55\x5d\x62\x85\x8a\x52\x8f\xfc\x09\x3b\xc1\xf6\xbd\x8c\xfd\xb3\x64\x9a\x8c\xa2\x79\x41\xce\x8a\xa7\xad\x8d\x26\xfd\xb7\xc9\xaf\x7a\xc2\x80\xfc\x27\x6f\x54\x06\x4b\x0b\xab\x31\x70\x32\xbf\x07\x91\xcc\x20\x35\x46\x81\x15\x1d\xab\x88\x1d\x43\x8e\xc9\x85\x09\x43\xdd\xe4\xe7\x4d\xd2\x35\xd9\x39\xf7\x3e\xb2\x4e\x51\x6b\x65\x0b\xce\xf9\xdb\x8e\x82\xb7\x98\xa1\x3c\xe1\xd2\x39\xf1\x13\xdf\x02\x86\x6f\xf6\xb4\x42\x88\x24\x34\xcb\x9c\x5b\xef\x9e\x40\xc9\x32\x42\xc6\x07\x50\xb2\x64\xec\x90\x6f\xe3\xf3\xbc\x3e\x82\x3e\x7a\xc6\xca\x16\xe2\x96\xdc\x01\xd1\x9d\x3e\xce\x30\x5c\x7b\xba\x49\x2d\x3d\xfb\x19\xbd\xfa\xe7\xaa\xa6\xf3\x40\x7f\x65\x8b\x64\xa4\x86\x91\x58\x94\x92\xe5\xe4\x9e\xcf\x9f\xdb\x47\x0c\xe3\x3b\x34\xfe\x07\xf1\xe6\x2d\xde\xb2\x94\x4d\x9b\xdd\xaf\x9e\xe0\x9d\x3f\x33\x53\x4c\x1e\xef\x54\x78\xc9\xfd\x0f\x00\x00\xff\xff\xdd\x60\x15\x89\x68\x06\x00\x00")

func internalTemplatedataServer_streamTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplatedataServer_streamTmpl,
		"internal/templatedata/server_stream.tmpl",
	)
}

func internalTemplatedataServer_streamTmpl() (*asset, error) {
	bytes, err := internalTemplatedataServer_streamTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/templatedata/server_stream.tmpl", size: 1640, mode: os.FileMode(420), modTime: time.Unix(1538674444, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"internal/templatedata/base.tmpl": internalTemplatedataBaseTmpl,
	"internal/templatedata/bindata.go": internalTemplatedataBindataGo,
	"internal/templatedata/client.tmpl": internalTemplatedataClientTmpl,
	"internal/templatedata/client_impl.tmpl": internalTemplatedataClient_implTmpl,
	"internal/templatedata/client_stream.tmpl": internalTemplatedataClient_streamTmpl,
	"internal/templatedata/fx.tmpl": internalTemplatedataFxTmpl,
	"internal/templatedata/parameters.tmpl": internalTemplatedataParametersTmpl,
	"internal/templatedata/server.tmpl": internalTemplatedataServerTmpl,
	"internal/templatedata/server_impl.tmpl": internalTemplatedataServer_implTmpl,
	"internal/templatedata/server_stream.tmpl": internalTemplatedataServer_streamTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"internal": &bintree{nil, map[string]*bintree{
		"templatedata": &bintree{nil, map[string]*bintree{
			"base.tmpl": &bintree{internalTemplatedataBaseTmpl, map[string]*bintree{}},
			"bindata.go": &bintree{internalTemplatedataBindataGo, map[string]*bintree{}},
			"client.tmpl": &bintree{internalTemplatedataClientTmpl, map[string]*bintree{}},
			"client_impl.tmpl": &bintree{internalTemplatedataClient_implTmpl, map[string]*bintree{}},
			"client_stream.tmpl": &bintree{internalTemplatedataClient_streamTmpl, map[string]*bintree{}},
			"fx.tmpl": &bintree{internalTemplatedataFxTmpl, map[string]*bintree{}},
			"parameters.tmpl": &bintree{internalTemplatedataParametersTmpl, map[string]*bintree{}},
			"server.tmpl": &bintree{internalTemplatedataServerTmpl, map[string]*bintree{}},
			"server_impl.tmpl": &bintree{internalTemplatedataServer_implTmpl, map[string]*bintree{}},
			"server_stream.tmpl": &bintree{internalTemplatedataServer_streamTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

