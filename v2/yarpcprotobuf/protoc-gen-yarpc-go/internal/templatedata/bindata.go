// Code generated by go-bindata.
// sources:
// internal/templatedata/base.tmpl
// internal/templatedata/bindata.go
// internal/templatedata/client.tmpl
// internal/templatedata/client_impl.tmpl
// internal/templatedata/client_stream.tmpl
// internal/templatedata/fx.tmpl
// internal/templatedata/parameters.tmpl
// internal/templatedata/server.tmpl
// internal/templatedata/server_impl.tmpl
// internal/templatedata/server_stream.tmpl
// DO NOT EDIT!

package templatedata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _internalTemplatedataBaseTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xcc\x31\x4f\xc3\x30\x10\x05\xe0\xdd\xbf\xe2\x11\x75\x00\x89\x24\x7b\x25\x26\x0a\xa8\x4b\x5b\x89\xee\xe8\x70\xae\xc1\x22\x8e\xad\xb3\xa9\xa8\x2c\xff\x77\x44\x93\x02\x12\x4d\x37\xfb\x7d\xf7\x5e\x5d\xe3\xde\x35\x8c\x96\x7b\x16\x8a\xdc\xe0\xf5\x00\x2f\x2e\x3a\x5d\xb6\xdc\x97\x07\x12\xaf\xcb\xd6\xa9\xba\x46\x70\x1f\xa2\x79\x8e\x94\xaa\x47\xd3\x71\xb5\x22\xcb\x39\x7f\xcb\x62\x8d\xd5\x7a\x8b\x87\xc5\x72\x7b\xa5\x94\x27\xfd\x4e\x2d\xff\xdc\x6d\x86\x7f\xf5\xe4\xc6\x57\xce\x4a\xa5\x64\x76\x18\xfc\x99\x65\x6f\x34\x07\x94\x39\x2b\xc0\x58\xef\x24\xe2\x5a\x01\x40\x4a\x42\x7d\xcb\x98\x0d\xe9\x86\xe2\xdb\x2d\x66\xd4\x19\x0a\x98\xdf\xa1\x5a\x1e\xe3\x53\x75\x68\x0c\x9c\x33\x8a\x94\xfe\xf4\x72\x2e\xc6\x49\xee\x9b\xb1\x70\xa3\x7e\x7f\x2a\xa5\xc8\xd6\x77\x14\x19\x85\xee\x0c\xf7\xb1\x40\x75\xa4\xff\xf2\x62\xac\xef\x2e\x70\x88\xc2\x64\xcf\x1d\x04\x96\x3d\xcb\xb4\x4c\x2e\x8f\x3c\xbd\xbc\xfb\x3c\x97\x7a\x12\xb2\x1c\x59\xc2\x49\xbf\x02\x00\x00\xff\xff\xb7\xa9\x37\x42\xf4\x01\x00\x00")

func internalTemplatedataBaseTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplatedataBaseTmpl,
		"internal/templatedata/base.tmpl",
	)
}

func internalTemplatedataBaseTmpl() (*asset, error) {
	bytes, err := internalTemplatedataBaseTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/templatedata/base.tmpl", size: 500, mode: os.FileMode(420), modTime: time.Unix(1538673775, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplatedataBindataGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func internalTemplatedataBindataGoBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplatedataBindataGo,
		"internal/templatedata/bindata.go",
	)
}

func internalTemplatedataBindataGo() (*asset, error) {
	bytes, err := internalTemplatedataBindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/templatedata/bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1538677441, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplatedataClientTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x52\xcb\x6e\xdb\x30\x10\xbc\xeb\x2b\x06\x46\x1f\xb6\xe1\xd2\xf7\x00\x3d\x14\x06\xd2\x53\xdd\x34\xe9\xa5\xa7\x82\xa1\x57\x32\x11\x85\x54\x48\xaa\x6e\xb0\xe0\xbf\x17\x14\x15\x3d\xec\x02\x2d\x10\x5d\x44\xee\x62\x67\x66\x87\xc3\x7c\xa0\x52\x1b\xc2\x42\xd5\x9a\x4c\x58\xe0\x43\x8c\x05\xf3\x49\x87\x23\xc4\xb5\xae\xa9\xbb\xbe\xa9\x6c\xf3\x50\xe1\xea\x23\xc4\x8d\x54\x0f\xb2\x22\xf1\xd9\xf6\xa7\x18\x8b\x82\xd9\x49\x53\x11\xc4\x1d\xb9\x5f\x5a\x91\xef\x60\x0a\x80\x79\xbb\xc6\xae\x83\x86\x36\x81\x5c\x29\x15\x61\xbd\xcd\xdd\xed\x16\xcc\x22\xb7\x63\x84\xf6\x08\x47\x4a\xa5\xbd\x7c\xa4\x18\xe1\x33\xda\x7b\x0f\x75\x06\x21\x0a\x20\x3c\x37\x34\x9f\x1f\x08\xb8\x00\x12\x79\xaf\xea\x0b\x85\xa3\x3d\x64\x51\x40\x6e\xe9\x12\xd6\xa1\x1f\xbe\x0b\x8e\xe4\xa3\x36\x55\xde\x80\xdc\x58\x18\x67\x30\x2a\x5b\x0e\x25\x40\x59\x13\xe8\x77\x10\xbb\xfc\xdf\x4c\x5a\x1d\x8b\xb1\xe1\x92\x66\x8a\x9a\xbe\x35\x73\x65\xbf\xa7\x85\xc4\x2d\x3d\xb5\xe4\x03\xb2\xe7\x31\xce\x01\xc9\x1c\xce\x86\x85\x10\xcf\xd2\x35\x4a\xec\x64\x5d\x7f\x6d\x82\xb6\x66\x1c\x59\x61\xc9\x2c\x32\xef\x8b\x4f\x1b\x90\x73\xd6\xad\x06\x2b\xa8\xf6\xf4\xaa\x3d\xff\x53\xfd\xbf\x94\xce\x60\x7c\x63\x8d\xa7\x11\xe7\x42\xf4\xc4\x88\xe9\xed\x22\x76\xca\x1a\x1f\x5c\xab\x12\xdd\x34\x79\x7b\x3a\x4d\xc3\x73\xdf\xea\xfa\xe0\x21\x61\xe8\x84\x1f\x9f\x6e\x6f\x76\x2f\xa1\x2b\xad\xfb\x7b\x2e\x53\x08\xcb\xd6\xa8\x33\xa8\xa5\x42\xbf\x66\x57\xd8\xc0\x36\xc1\x0f\xcb\x37\xce\x06\x7b\xdf\x96\x7d\x37\xdb\xb0\x9a\xe5\x38\xa7\xd7\x51\x68\x9d\xc1\xbb\x9f\xe9\x01\xbb\x50\xc6\xc8\xbe\x7b\xc9\x2b\xcc\xa1\xf6\x74\x9a\x3e\xf1\x52\x6d\xc0\xdc\x38\x6d\x42\x89\xc5\xdb\xa7\x05\xc4\xf5\xb7\x7d\xf2\x30\x29\x11\x42\xac\x7a\xa3\x46\xdf\xc6\xe3\x58\xfb\x13\x00\x00\xff\xff\x52\x2a\x51\xa1\x1c\x04\x00\x00")

func internalTemplatedataClientTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplatedataClientTmpl,
		"internal/templatedata/client.tmpl",
	)
}

func internalTemplatedataClientTmpl() (*asset, error) {
	bytes, err := internalTemplatedataClientTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/templatedata/client.tmpl", size: 1052, mode: os.FileMode(420), modTime: time.Unix(1538673714, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplatedataClient_implTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x55\xcb\x6e\xdb\x3a\x10\xdd\xeb\x2b\x4e\x8c\xdc\x0b\xcb\x50\x98\xbd\x0b\xaf\x8c\xb4\xe8\xa2\x0f\xd4\xdd\x07\x2a\x3d\x52\x08\x4b\x24\x4d\xd2\x4d\x0c\x82\xff\x5e\x90\x94\x5f\x71\x92\x9d\x11\x14\x5d\x99\x1c\xf3\xbc\x86\x23\xc9\xfb\x25\x35\x42\x12\x46\xbc\x13\x24\xdd\xbd\xe8\x75\x37\xc2\x4d\x08\x85\xf7\x8f\xc2\x3d\x80\x7d\x14\x1d\xa5\xed\x75\xab\xf4\xaa\xc5\x74\x06\xf6\xbd\xe6\xab\xba\x25\xf6\x49\x0d\xab\x10\x8a\xc2\x7b\x53\xcb\x96\xc0\x16\x64\x7e\x0b\x4e\x36\xd1\x00\xde\x5f\x67\xf2\xcf\xbd\xee\x12\x7c\xbe\xdf\x46\x5c\x3c\x71\x3b\x41\x2e\x22\x1a\xa0\x9e\xa4\xab\x9d\x50\x12\x93\xdb\x7c\xc4\x6d\x35\x9d\x32\x85\x00\xeb\xcc\x86\x3b\xf8\x02\x40\xdc\x50\xdd\x63\x5b\x1b\xcd\xb5\x51\x4e\xfd\xda\x34\x6c\x91\x8a\x99\xba\x00\x06\xb5\xc1\xe7\x17\x72\x0f\x6a\x69\x93\xc9\x58\x16\x0d\x6a\xb9\xdc\xd9\xcb\x50\x21\xdb\x1c\x88\xcc\xa1\x70\x33\x40\x80\x66\x23\x39\xc6\x1c\x93\x67\xd6\x4a\x78\xcf\xbe\xd6\x3d\x85\x30\xe6\xee\x09\x5c\x49\x47\x4f\x8e\xcd\xf3\x6f\x05\xa5\x9d\x05\x63\x2c\xd9\x65\xf3\xba\xeb\xbe\xe9\x18\xb8\xc4\xd8\xfb\x13\xdb\x21\x54\x20\x63\x94\x29\x87\xa0\x29\x6c\xaa\xc5\x66\x72\x96\x83\x27\x8e\x8c\x8b\x8a\x15\xbc\xd7\x46\x48\xd7\x60\xf4\xdf\x7a\x84\xc1\x4c\x16\x66\x8c\x95\x7b\x2a\xd1\x24\xaa\xab\x19\xa4\xe8\x8e\x24\x00\x43\x6e\x63\x64\x2c\x27\xb5\xfd\x3f\xa1\x78\x76\xe2\xff\xfb\x33\xcf\x3e\xbb\x9a\xc2\x86\x2a\x32\x14\xc7\x50\xef\xa9\xb3\x14\x95\xcf\x7a\xfd\x6f\xb5\xf6\x52\x5d\xbd\xc0\xc0\x1a\x5a\x47\x50\xab\x7e\xc6\x27\x91\xfd\xa0\xf5\x86\xac\x43\x7e\x29\xec\xd2\xff\xd5\x6d\x1f\x60\xd3\x19\x2c\x5b\x90\x5c\x8e\x0d\xad\xcb\x0f\xef\xf5\x70\xbc\xf3\x95\x9d\xe0\xac\x56\xd2\xd2\x11\xf0\xec\xf6\x7a\xdb\xbe\x7c\x7f\x6f\xde\x9c\xa1\x75\x95\x42\xd0\xe3\x4e\xe4\x02\xaf\x28\x5b\x41\xad\xa2\xb1\xde\xb6\xec\xcd\x60\x27\x8a\x57\x6a\xf5\xaa\xd4\xe9\x47\x66\x5e\x5b\x77\x17\x3b\x12\x07\xfd\xae\xd7\x6e\x7b\x9c\xc6\x90\x2d\x5f\x9f\x8e\x64\xef\x85\x11\x90\xcb\xfd\xd7\x73\xb7\x3e\xac\x0e\xcb\x43\xed\x4f\x00\x00\x00\xff\xff\x14\xab\xe8\x14\xca\x07\x00\x00")

func internalTemplatedataClient_implTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplatedataClient_implTmpl,
		"internal/templatedata/client_impl.tmpl",
	)
}

func internalTemplatedataClient_implTmpl() (*asset, error) {
	bytes, err := internalTemplatedataClient_implTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/templatedata/client_impl.tmpl", size: 1994, mode: os.FileMode(420), modTime: time.Unix(1538677401, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplatedataClient_streamTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x55\xcd\x8e\x9b\x30\x10\xbe\xe7\x29\x66\x57\x7b\x80\x68\xeb\xdc\x5b\xed\xa1\x8a\xb6\x3d\xf5\x47\x49\xef\x2b\x0a\x03\xb1\x02\x36\x6b\x9b\x6c\x23\x8b\x77\xaf\x6c\x6c\x07\x42\x88\x68\xd4\xde\x7a\x8a\x33\x78\xbe\x9f\xe1\xb3\xd1\x3a\xc3\x9c\x32\x84\xfb\xb4\xa4\xc8\xd4\x8b\x54\x02\x93\xea\x1e\xde\xb5\xed\x42\xeb\x37\xaa\x76\x40\x3e\xd1\x12\xed\xdf\x87\x82\xd7\xfb\x02\xde\x3f\x01\xf9\x9e\xa4\xfb\xa4\x40\xf2\x99\xbb\x55\xdb\x2e\x16\x5a\x8b\x84\x15\x08\x64\x8b\xe2\x40\x53\x94\x16\x06\x40\xeb\x87\x0e\xde\xb6\xae\xed\xd2\xec\x37\x4f\x56\x4b\xe8\x0a\xd0\x51\x03\x65\x0a\x45\x9e\x98\xee\xe5\xca\xef\x72\xb8\x5f\x50\xed\x78\xe6\x61\xcd\x03\x9a\x03\x17\x1e\x73\x6b\x11\x28\x2b\x3a\x05\x28\x42\xc1\xed\x5f\xad\x40\x6b\xd2\x55\xbd\x0c\xa0\x12\x12\x47\x6e\x5a\x03\x3f\x34\x12\x33\xa0\x0c\xd4\x0e\x4f\x16\x4c\x83\xdf\x41\x2c\xa8\x3a\xd6\x78\x09\x36\xe0\x68\xbb\x0d\x60\xcd\x99\xc2\x5f\x2a\x8a\x21\xed\x56\xc4\x55\x4e\x5e\x46\x46\xbc\x53\x80\x2d\xb2\x2c\x5a\x6a\x5d\xf0\x1f\x86\x90\x6c\xf0\xb5\x41\xa9\xa0\x7b\x29\x6d\xfb\x08\x84\x90\x63\x22\xea\xd4\x29\xf9\x56\x2b\xca\x59\x0c\x28\x04\x17\x8e\x02\x59\x36\x1c\xde\xf9\xa0\x7a\x84\x1b\x4c\x0f\xd1\x04\xe6\x50\x88\xac\x39\x93\xd8\x53\x62\x29\x63\x6f\xbb\xe4\x12\xad\xfa\x5b\x04\x26\x2c\x1b\x4f\x25\x62\x5c\x8d\xa4\xc7\x3d\xed\x96\xf3\x23\xcb\xfe\x8e\x87\xa1\xac\x76\x54\x3b\xad\x27\x22\x5d\xd5\x25\x56\xc8\x54\x62\x98\xff\x41\xae\x6d\x04\x5f\xc6\x19\x94\x4a\x34\xa9\x0a\x01\x74\x72\x96\x76\x1a\xb5\xe0\x8a\xff\x6c\xf2\x41\x8f\x33\x68\x7f\xf2\x86\xa5\x10\xa5\xb0\x1c\x03\xc7\xd3\x59\x0e\x64\x02\x55\x23\x18\xa4\xa4\x63\x25\xa1\xa3\xcf\x71\x31\xf4\xce\xd4\x55\x7e\x9b\x27\x81\xaf\x70\xf5\x44\xf0\x5a\xc9\xab\xc7\x62\x52\xad\xc7\xef\x30\x08\x21\xf1\xc5\x77\x3f\x7d\x90\xe6\x98\xb0\xe9\xbc\xa6\x71\x56\x44\x83\x87\x4a\x16\xb6\x66\x6e\xd9\x60\x64\x83\x29\xd2\x03\x46\x5a\x93\xaf\xf8\xe6\x41\xfc\x70\x82\x31\x00\x9a\xdb\xde\xbb\x27\x60\xb4\x0c\x98\x61\x32\x8c\x96\x16\xdc\xd5\xdb\x30\x37\xf9\x08\x7c\x6f\x28\x2b\x59\x90\xab\x82\x7b\x4c\x77\x7c\x3f\x41\x31\xcc\xe6\x3a\x91\xea\xd9\xb8\x34\xfa\x9f\xab\x5a\x1d\xfb\x0e\x2a\x59\xc4\x23\x3d\x16\xca\xca\x62\xb4\x9c\x9f\xe7\x70\x49\xdd\x9e\x19\x8b\x11\xcd\xcc\xcb\x1f\xdc\x6b\x73\xa2\x34\xb8\xf0\xe6\x47\xea\xfc\xc0\x9c\x25\xca\x65\xa2\x9f\xa7\xa1\xc9\x0f\xb7\x64\xe6\x7f\x4e\x87\x39\xf5\x6a\x27\xc2\x72\xf1\x3b\x73\x69\x79\xaa\xfd\x0e\x00\x00\xff\xff\x37\xdd\xa9\xbf\xd7\x09\x00\x00")

func internalTemplatedataClient_streamTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplatedataClient_streamTmpl,
		"internal/templatedata/client_stream.tmpl",
	)
}

func internalTemplatedataClient_streamTmpl() (*asset, error) {
	bytes, err := internalTemplatedataClient_streamTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/templatedata/client_stream.tmpl", size: 2519, mode: os.FileMode(420), modTime: time.Unix(1538674641, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplatedataFxTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x95\x41\x6f\xdb\x38\x10\x85\xef\xfa\x15\x0f\xc6\x1e\xe4\x20\xa1\x81\x3d\x1a\x58\x2c\xb0\x5b\xb8\xcd\x25\x36\x9a\xde\x8a\xa2\x61\xe4\x91\x4c\x44\x26\x59\x92\xb2\x15\x10\xfa\xef\x05\x45\xc9\x8a\x1c\xa5\x75\xe3\x83\x4d\x8f\x86\x6f\x3e\xcd\xf0\x49\xde\x6f\x29\x17\x92\x30\xcb\xeb\x19\x6e\x9a\x26\xf1\xfe\x28\xdc\x0e\x6c\x25\x4a\x6a\xff\xfe\x55\x28\xfd\x54\x60\xf9\x0f\xd8\x86\x67\x4f\xbc\x20\xf6\x51\x75\xab\xa6\x49\x12\xef\x0d\x97\x05\x81\xdd\x93\x39\x88\x8c\x6c\x2b\x93\x00\xde\x2f\xae\xb0\xaa\x91\x95\x82\xa4\xb3\xb8\x5a\xc4\xf8\x62\x01\xef\xd9\xaa\xfe\xbf\x8d\x37\xcd\x86\x1b\xbe\xb7\x88\x20\x16\x6e\x47\xd0\x21\x44\x8e\x8c\x8d\xf9\x86\x7e\x54\xc2\xd0\x16\x4e\x41\x1b\x75\x10\x5b\x02\x0f\x2a\xbd\x06\x84\x74\x0a\x5c\xc6\xf4\x55\x0d\xae\x75\x29\x32\xee\x84\x92\x2c\x01\xdc\xb3\xa6\xc9\xaa\xd6\x99\x2a\x73\xf0\x09\x00\xe4\x35\xbb\x95\x49\xbb\x8c\x69\x78\xe6\x46\x67\x5d\x95\x04\x98\xe4\xff\x4c\xb6\x2a\x5d\xcf\x65\xc7\x60\x31\xbf\xa3\xbb\x08\xac\x93\x3b\x07\x5b\x57\x6e\x44\x36\xae\xd1\x83\xdd\xd1\x71\x24\xf6\x0e\xaa\x6b\x54\x56\xc8\xa2\x9d\x43\x21\x0e\xd4\xf5\x54\xf2\x3d\x21\x57\x06\x46\x55\x4e\xc8\x82\xb5\xe1\x78\x2d\xf0\x6d\x62\xa1\xb4\x8b\x84\xf1\xc7\x93\xd3\x34\xec\x9c\x2a\x9d\xd9\x78\x56\x6e\x82\xea\x6c\x7e\x7d\xda\xc4\x18\xeb\xd6\xf3\xf8\xfb\x65\xfd\x61\x9d\xee\x49\xda\x6c\x37\x5f\xe2\x93\x3a\xe2\x28\xca\x12\x6e\x27\x2c\x8e\xca\x3c\x41\x48\x1c\xfe\xfe\x37\x01\xf2\x4a\x66\xaf\xee\x3f\xfd\x1e\x1a\x29\x64\x71\x0d\xa5\x9d\x0d\xfa\xed\x48\xb5\x51\x4e\x3d\x56\x79\xd7\x91\xb5\x0e\x77\x3e\x0f\x1d\x21\x93\xf3\x8c\x7c\xd3\x75\xde\x90\xab\x8c\x6c\xc5\x53\x3d\x75\x82\xe6\x93\xd3\x8b\x9b\x4f\xdb\x27\x52\xfa\x8c\x7e\xa0\xcb\xd7\xec\xba\xa3\x8b\xec\x8c\xb1\xb6\x51\xe1\xd3\x24\xfd\xf7\xc8\x69\xa1\xab\x64\x5e\x3b\xed\xbe\x8d\xbf\xed\x34\xfe\x6b\xa7\x85\x3c\xef\x59\xaf\x12\xe2\x19\x6d\x2b\x43\xf6\xf2\xd3\x7d\x86\xf0\x96\xed\x62\xda\xcb\x6a\xe7\xae\xeb\xe3\xe7\xae\x3b\x83\x8c\x3b\x06\xd2\x3f\x82\xfc\x9d\x05\x37\x83\xec\xd7\x6f\xf1\x11\x71\x0a\xe1\xa1\x30\xaa\xd2\xcb\x59\x1b\xcf\xeb\xd9\xc3\x84\x3d\x5f\xb6\xf2\x32\xfc\x49\x78\xdc\x3a\x50\xad\x29\x73\xdd\x24\xf8\x68\x4e\x4e\xe1\x91\xa0\x0d\xd9\xf0\xc0\x10\xb2\x2d\x92\x29\xe9\xb8\x90\x64\xde\x63\xe0\x5e\x3a\x7d\xd3\xb2\x23\x17\x0e\xe9\x97\x39\x6b\x7c\x48\xe6\x93\x43\x99\x72\xd6\x38\x65\x70\xd6\x30\xa7\x25\xfe\xab\x44\xb9\xf5\x9e\xdd\xf1\x3d\x35\xcd\x70\x25\xd5\x5d\xc3\x26\xcd\xe5\x3d\xc9\x6d\x7c\xa1\x9d\x96\x43\xec\x67\x00\x00\x00\xff\xff\xd3\xb5\xa5\xa9\x3e\x07\x00\x00")

func internalTemplatedataFxTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplatedataFxTmpl,
		"internal/templatedata/fx.tmpl",
	)
}

func internalTemplatedataFxTmpl() (*asset, error) {
	bytes, err := internalTemplatedataFxTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/templatedata/fx.tmpl", size: 1854, mode: os.FileMode(420), modTime: time.Unix(1538677131, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplatedataParametersTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xc1\x6a\xc3\x30\x0c\x86\xef\x79\x8a\x9f\x32\x46\x5b\x98\x7b\x1f\xf4\xb8\xed\xb4\x51\xb6\xbd\x80\x49\xd4\x34\x74\xb5\x3d\xdb\x69\x09\x42\xef\x3e\xea\x38\x59\xba\x96\xdd\x24\xa1\xff\x43\x9f\x98\x2b\xda\x36\x86\x30\x73\xda\xeb\x03\x45\xf2\x61\x86\x07\x91\x82\xf9\xd4\xc4\x1d\xd4\x73\xf3\x45\xa9\xbd\xab\xad\xdb\xd7\x78\x5c\x43\x6d\x74\xb9\xd7\x35\xa9\x17\x9b\x2b\x91\xa2\x60\xf6\xda\xd4\x04\xf5\x41\xfe\xd8\x94\x14\x12\xa6\x00\x98\x57\x4b\x6c\x06\x3c\x4a\x6b\x42\xf4\x6d\x19\xad\x0f\x58\xae\x86\x9d\x1c\x7e\xa5\xb8\xb3\x55\x9f\x05\x80\x6d\x6b\x4a\x30\xab\x37\x3a\xbd\xd3\x77\x4b\x21\x8a\xcc\x17\x00\xc3\x53\x6c\xbd\xc1\x3d\x73\x6d\x3f\x3b\x47\x50\x79\x01\xfd\xa5\x22\x2c\xc0\x0d\x4a\x70\xd6\x04\x4a\x98\xdb\x94\x7e\x61\x8a\x91\x74\x22\x99\xea\xc2\xe9\xe9\xe0\x62\x87\xf1\x71\x88\x9d\xa3\xa9\x52\xff\xc0\x6c\x94\x7d\x8e\xda\x63\x9e\xaa\x51\x79\x74\x3d\xcf\x54\x82\x8e\xaa\xc0\xfa\x7f\xc3\xab\xe0\x60\xf7\x37\x78\x25\x95\x8f\x18\xa4\xce\xdd\xe2\x42\x73\x22\x3c\x96\xbf\xb3\x9f\x00\x00\x00\xff\xff\x63\xc0\xf3\x97\x3a\x02\x00\x00")

func internalTemplatedataParametersTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplatedataParametersTmpl,
		"internal/templatedata/parameters.tmpl",
	)
}

func internalTemplatedataParametersTmpl() (*asset, error) {
	bytes, err := internalTemplatedataParametersTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/templatedata/parameters.tmpl", size: 570, mode: os.FileMode(420), modTime: time.Unix(1538674376, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplatedataServerTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x54\xcd\x6e\xdb\x3c\x10\xbc\xeb\x29\x16\x46\xbe\xaf\x76\x90\xd2\x77\x01\x3d\xb4\x06\xd2\x5e\x1a\xb8\x49\x7b\x28\x8a\xa2\x60\xa5\x95\x4c\xc4\x21\x15\x92\x8a\x6b\x10\x7c\xf7\x82\x22\x25\x52\x92\x83\x18\x68\x51\x5f\xcc\x9f\xd9\xe1\xec\xee\xac\x8c\x29\xb1\x62\x1c\x61\xa1\x50\x3e\xa1\x5c\xc0\x6b\x6b\x33\x63\x0e\x4c\xef\x80\x5c\xb3\x3d\x76\xdb\x8b\x5a\x34\xf7\x35\xe4\x6f\x80\x6c\x69\x71\x4f\x6b\x24\xef\x45\x58\x59\x9b\x65\xc6\x48\xca\x6b\x04\x72\x87\xf2\x89\x15\xa8\x3a\x1a\x00\x63\x2e\xd4\x53\xd1\xc5\xdd\xd0\x87\x0e\xea\x0e\xd7\x97\x10\x80\xc0\xb8\x46\x59\xd1\x02\xe1\x72\xed\xaf\xd7\x6b\x30\xa6\x23\x42\x69\x2d\x30\x05\x7a\x87\x81\xc9\x5a\x50\x3e\xf0\x95\x02\xaf\x38\x32\x90\x0c\x40\x1f\x1b\x1c\x87\x0f\xfc\x26\x03\x70\x8f\x07\xa5\x1f\x51\xef\x44\xd9\x0b\xf5\x57\xac\x02\x21\x81\x6c\xf6\x0c\xb9\xbe\xd3\x12\xe9\x03\xe3\x35\x04\xb6\x78\x10\x63\x5c\x54\x48\x6d\x39\x1c\x05\x2a\x2e\xf4\x9c\x2b\x0d\x75\xbf\x4b\x63\x6a\xf1\xd9\xa9\x26\xb7\xf8\xd8\xa2\xd2\xe0\x8b\x6d\xed\xd5\x88\x10\x79\x39\x09\x76\x69\x76\xbc\x7d\xb2\x31\x60\x95\x28\x98\x88\xb7\x16\x96\xf3\x48\x40\x29\x85\x74\x61\xb8\x57\x68\xad\xdf\xfb\x67\x93\x02\xb9\xcb\x97\xb3\x2f\x04\xd7\xf8\x4b\x93\x8d\xff\x4f\xf3\x38\x2b\xdd\x15\x2c\x47\x38\xd5\x08\xae\x30\x02\x83\xd8\xec\x54\x69\xd2\x5d\x74\xdb\x56\x8a\x02\xcb\x56\xa2\xd3\xa6\xb4\x6c\x0b\xcd\x04\x4f\x2d\xf7\xae\x65\xfb\xd2\x18\x32\x20\x95\xb5\x11\xec\x3d\xf8\xf5\xed\xed\x76\x03\xcd\x80\x80\x4a\xc8\x93\xe6\x74\x4e\xac\x5a\x5e\x9c\x64\x5d\xaa\xd4\xa0\x2b\xf8\xf6\xfd\x48\x65\x53\x44\x4c\x70\xea\xce\x8d\xcd\xff\x3f\x12\xac\xf1\x8e\xcf\x41\xf9\x5c\x25\xea\x56\x72\xe8\xc2\x1b\x29\xb4\xf8\xd9\x56\xc9\x53\x7d\x4b\x9e\xbb\xdf\x52\x49\x1f\x94\x19\xca\x1e\x46\x32\x07\x63\x1a\xc9\xb8\xae\x60\xf1\xdf\xe3\x02\xc8\xf5\xa7\x9b\xb4\x3b\x5f\x38\x95\xc7\xbc\x97\x3d\xf0\x76\xc7\xcf\x93\xc7\xc9\x6b\x1d\xb0\x9f\x3e\x32\xf5\xf4\x68\x38\x3c\xca\x19\x6c\x26\xca\xbb\xee\x6a\x04\xff\x40\x79\xb9\x77\xf5\x19\x2b\xbb\xc1\x43\x27\x2e\x5c\x8f\x9f\x98\x96\x27\x45\xce\x73\x48\xdf\xc9\x61\x47\x06\xfb\x5f\xcd\x40\x1b\x89\x54\x63\x0e\x1c\x0f\xbd\x3d\x06\x74\xb0\xfe\x72\x35\x0d\x9b\xf0\x8c\xb6\x2f\x7c\x0f\x92\x6b\x3f\xdb\xf3\x16\xf9\xf3\x73\x7a\xa4\x3a\xe4\x3f\x6e\x92\x97\x77\x56\x97\x46\xd0\x3f\x68\xd3\xdf\xa8\x77\x58\xac\xba\x0f\x4e\xc4\xc5\x65\x3c\xfb\x1d\x00\x00\xff\xff\xd9\xf6\xeb\x18\x6e\x07\x00\x00")

func internalTemplatedataServerTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplatedataServerTmpl,
		"internal/templatedata/server.tmpl",
	)
}

func internalTemplatedataServerTmpl() (*asset, error) {
	bytes, err := internalTemplatedataServerTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/templatedata/server.tmpl", size: 1902, mode: os.FileMode(420), modTime: time.Unix(1538677160, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplatedataServer_implTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x54\xcf\x6f\xda\x30\x14\xbe\xf3\x57\x7c\xab\xaa\x29\x41\xa9\x7b\xaf\xc4\x09\x75\xd3\x0e\x9d\xa6\xb2\x3b\xf2\xcc\x23\x58\x4d\x9c\x60\x1b\x0a\xb2\xfc\xbf\x4f\xb6\x43\x20\x74\x48\x45\xea\xca\x85\xe7\x97\xbc\xef\x7d\x3f\x92\x38\xb7\xa0\xa5\x54\x84\x1b\x43\x7a\x4b\x7a\x2e\xeb\xb6\xba\xc1\x9d\xf7\x23\xe7\x5e\xa5\x5d\x81\x7d\x93\x15\xc5\xe3\x6d\xd9\xb4\x2f\x25\x1e\x26\x60\xbf\xb8\x78\xe1\x25\xb1\xef\x4d\x57\x79\x3f\x1a\x39\xa7\xb9\x2a\x09\x6c\x46\x7a\x2b\x05\x99\x08\x03\x38\x77\x9b\xc0\x7f\xd4\x6d\x15\xc7\x67\xfd\x31\xcc\x85\x3b\xee\xc7\x48\x4d\x04\x02\x54\x93\xb2\xdc\xca\x46\x61\x7c\x9f\x6e\xb1\xfb\x96\x86\x48\xde\xc3\x58\xbd\x11\x16\x6e\x04\x00\xe9\x0a\x9c\xeb\xe0\xe3\xee\x0e\xbe\x23\xf6\x44\x76\xd5\x2c\x4c\xbc\x12\xda\x72\x09\xae\x16\x60\xd3\x4a\x92\xb2\x33\xab\x89\xd7\x52\x95\x07\x82\xc7\xc6\x5d\x37\x02\x2c\x37\x4a\x20\x5b\x61\x7c\xc6\x25\x0f\x8b\x7f\xf2\x9a\xbc\xcf\x0c\xc6\x7b\xae\x5b\xd1\xea\xc6\x36\x7f\x36\x4b\x96\x80\x12\x68\x0e\xd2\xba\xd1\x1d\xe9\xf0\xd3\x64\x37\x5a\x61\xc5\x12\x1e\x3b\x02\x7d\x9d\x07\x35\x27\xc3\xde\x3b\x13\x8f\x0f\x30\x3e\xef\x10\x0e\x6a\xa8\x32\x04\xb9\x7c\x2b\xe7\x3f\xb3\x37\x45\x68\x86\x60\xdf\x2b\x21\x16\xa7\x12\x10\x78\x07\x90\x2f\x13\x28\x59\x9d\xc0\xf7\xf6\x90\xd6\x7d\xd3\x9f\x7b\x67\xd8\x8c\xd4\x22\xd3\x64\x2e\x9a\xf2\xc9\x91\x8a\x6d\xef\x8a\x61\xcf\x24\x48\x6e\x29\x0b\x78\xf4\xfa\x4c\xeb\x0d\x19\xeb\x3f\x42\xfd\xba\xc0\x3c\xec\x08\x0b\x59\x36\x76\xae\x6c\x7e\x87\x37\x85\x75\x4b\x90\x5e\xda\xb3\x5d\x9a\xd6\x98\x5c\xdc\x35\x14\x3a\xe5\xc6\x3e\x06\x79\x81\xfd\x63\xdd\xda\x7d\xcf\xbf\x88\x6b\xf3\xcb\xb1\xfc\xe3\x79\x88\x94\xdf\xf7\x50\x0c\x22\xbc\x2e\x2e\x61\x77\x10\x8d\xb2\xb4\xb3\x6c\x9a\xfe\x0b\xd4\x88\xa2\xd8\x13\x19\xc3\x4b\xca\x91\x0d\xce\x45\x4a\x31\x1f\xc4\x78\xf0\xb7\xfe\x28\x73\x95\xac\x8a\x6b\x1c\xae\xaf\xb3\x57\xd8\x5d\x48\x65\xfd\xc6\x43\xb5\xe8\xbf\xc6\x87\xfa\x58\x1d\xcb\x63\xef\x6f\x00\x00\x00\xff\xff\xee\x01\xf6\x4b\x1a\x06\x00\x00")

func internalTemplatedataServer_implTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplatedataServer_implTmpl,
		"internal/templatedata/server_impl.tmpl",
	)
}

func internalTemplatedataServer_implTmpl() (*asset, error) {
	bytes, err := internalTemplatedataServer_implTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/templatedata/server_impl.tmpl", size: 1562, mode: os.FileMode(420), modTime: time.Unix(1538677432, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalTemplatedataServer_streamTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\x4d\x6f\xdb\x30\x0c\xbd\xe7\x57\xb0\x45\x0f\x71\xd0\x29\xf7\x01\x3d\x05\xdd\x4e\xfb\x40\xb2\x7b\xe1\x39\xb4\x23\xc4\x96\x5c\x89\x4e\x17\x08\xfe\xef\x83\x68\x59\x71\x6a\x3b\xe8\xa5\xa7\xb2\x34\xf9\xde\xa3\x1e\x19\xe7\xf6\x98\x4b\x85\x70\x6f\xd1\x9c\xd0\xbc\x58\x32\x98\x56\xf7\xf0\xa5\x6d\x17\xce\xbd\x49\x3a\x80\xf8\x26\x4b\xe4\x7f\x1f\x0a\x5d\x1f\x0b\xf8\xfa\x04\xe2\x77\x9a\x1d\xd3\x02\xc5\x77\x1d\xa2\xb6\x5d\x2c\x9c\x33\xa9\x2a\x10\xc4\x0e\xcd\x49\x66\x68\x19\x06\xc0\xb9\x87\x0e\x9e\x5b\x77\x1c\xfa\x7a\xff\x65\xbd\x82\x2e\x01\x1d\x35\x48\x45\x68\xf2\xd4\x77\xaf\xd6\x7d\x55\xc0\xfd\x81\x74\xd0\xfb\x1e\xd6\x7f\x90\x39\x68\x03\x62\x53\x4a\x54\xb4\x63\x04\xa9\x8a\x9e\x24\x26\x42\xfd\x7a\x0d\xce\x89\x2e\xdb\xcb\x00\x69\x21\x0d\xe4\xbe\x35\xf2\x43\x63\x71\x0f\x52\x01\x1d\xf0\x32\x82\x6f\xe8\x2b\x04\x83\xd2\xb9\xc6\x29\xd8\x88\xe3\xb8\x0c\x60\xa3\x15\xe1\x3f\x5a\x26\x90\x75\x91\x08\x99\xcb\x2c\xa3\x41\xfa\x49\x01\xb6\x98\x9d\x96\x42\x88\x73\x6a\xea\x2c\x90\xfd\xaa\x49\x6a\x95\xc0\x72\xe5\x5c\xa1\xff\x78\x21\x62\x8b\xaf\x0d\x5a\x82\xce\xac\xb6\x7d\x04\x34\x46\x9b\x24\x90\xa0\xda\x5f\x3f\xdf\xfb\xa7\x1a\x50\xee\x50\xed\xaf\xa1\x6d\xad\x95\xc5\x01\xf6\x8c\x20\xa6\x9c\x60\x6c\x47\xb9\x4b\x3c\xb3\x0e\x55\x5d\x62\x85\x8a\x52\x8f\xfc\x09\x3b\xc1\xf6\xbd\x8c\xfd\xb3\x64\x9a\x8c\xa2\x79\x41\xce\x8a\xa7\xad\x8d\x26\xfd\xb7\xc9\xaf\x7a\xc2\x80\xfc\x27\x6f\x54\x06\x4b\x0b\xab\x31\x70\x32\xbf\x07\x91\xcc\x20\x35\x46\x81\x15\x1d\xab\x88\x1d\x43\x8e\xc9\x85\x09\x43\xdd\xe4\xe7\x4d\xd2\x35\xd9\x39\xf7\x3e\xb2\x4e\x51\x6b\x65\x0b\xce\xf9\xdb\x8e\x82\xb7\x98\xa1\x3c\xe1\xd2\x39\xf1\x13\xdf\x02\x86\x6f\xf6\xb4\x42\x88\x24\x34\xcb\x9c\x5b\xef\x9e\x40\xc9\x32\x42\xc6\x07\x50\xb2\x64\xec\x90\x6f\xe3\xf3\xbc\x3e\x82\x3e\x7a\xc6\xca\x16\xe2\x96\xdc\x01\xd1\x9d\x3e\xce\x30\x5c\x7b\xba\x49\x2d\x3d\xfb\x19\xbd\xfa\xe7\xaa\xa6\xf3\x40\x7f\x65\x8b\x64\xa4\x86\x91\x58\x94\x92\xe5\xe4\x9e\xcf\x9f\xdb\x47\x0c\xe3\x3b\x34\xfe\x07\xf1\xe6\x2d\xde\xb2\x94\x4d\x9b\xdd\xaf\x9e\xe0\x9d\x3f\x33\x53\x4c\x1e\xef\x54\x78\xc9\xfd\x0f\x00\x00\xff\xff\xdd\x60\x15\x89\x68\x06\x00\x00")

func internalTemplatedataServer_streamTmplBytes() ([]byte, error) {
	return bindataRead(
		_internalTemplatedataServer_streamTmpl,
		"internal/templatedata/server_stream.tmpl",
	)
}

func internalTemplatedataServer_streamTmpl() (*asset, error) {
	bytes, err := internalTemplatedataServer_streamTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/templatedata/server_stream.tmpl", size: 1640, mode: os.FileMode(420), modTime: time.Unix(1538674444, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"internal/templatedata/base.tmpl": internalTemplatedataBaseTmpl,
	"internal/templatedata/bindata.go": internalTemplatedataBindataGo,
	"internal/templatedata/client.tmpl": internalTemplatedataClientTmpl,
	"internal/templatedata/client_impl.tmpl": internalTemplatedataClient_implTmpl,
	"internal/templatedata/client_stream.tmpl": internalTemplatedataClient_streamTmpl,
	"internal/templatedata/fx.tmpl": internalTemplatedataFxTmpl,
	"internal/templatedata/parameters.tmpl": internalTemplatedataParametersTmpl,
	"internal/templatedata/server.tmpl": internalTemplatedataServerTmpl,
	"internal/templatedata/server_impl.tmpl": internalTemplatedataServer_implTmpl,
	"internal/templatedata/server_stream.tmpl": internalTemplatedataServer_streamTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"internal": &bintree{nil, map[string]*bintree{
		"templatedata": &bintree{nil, map[string]*bintree{
			"base.tmpl": &bintree{internalTemplatedataBaseTmpl, map[string]*bintree{}},
			"bindata.go": &bintree{internalTemplatedataBindataGo, map[string]*bintree{}},
			"client.tmpl": &bintree{internalTemplatedataClientTmpl, map[string]*bintree{}},
			"client_impl.tmpl": &bintree{internalTemplatedataClient_implTmpl, map[string]*bintree{}},
			"client_stream.tmpl": &bintree{internalTemplatedataClient_streamTmpl, map[string]*bintree{}},
			"fx.tmpl": &bintree{internalTemplatedataFxTmpl, map[string]*bintree{}},
			"parameters.tmpl": &bintree{internalTemplatedataParametersTmpl, map[string]*bintree{}},
			"server.tmpl": &bintree{internalTemplatedataServerTmpl, map[string]*bintree{}},
			"server_impl.tmpl": &bintree{internalTemplatedataServer_implTmpl, map[string]*bintree{}},
			"server_stream.tmpl": &bintree{internalTemplatedataServer_streamTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

